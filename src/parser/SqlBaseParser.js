// Generated from SqlBase.g4 by ANTLR 4.7.2
// jshint ignore: start
var antlr4 = require('antlr4/index');
var SqlBaseListener = require('./SqlBaseListener').SqlBaseListener;
var grammarFileName = "SqlBase.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u00a4\u039d\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u0003\u0002\u0007\u0002l\n\u0002",
    "\f\u0002\u000e\u0002o\u000b\u0002\u0003\u0002\u0003\u0002\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005~\n\u0005",
    "\u0003\u0005\u0003\u0005\u0005\u0005\u0082\n\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0005\u0005\u0087\n\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0005\u0005\u008c\n\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0005\u0005\u0092\n\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u0099\n\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u00a5\n\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u00ab\n",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u00bc\n\u0005",
    "\u0003\u0005\u0003\u0005\u0005\u0005\u00c0\n\u0005\u0003\u0005\u0003",
    "\u0005\u0005\u0005\u00c4\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0005\u0005\u00cb\n\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0005\u0005\u00d0\n\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0005\u0005\u00da\n\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u00de",
    "\n\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u00e2\n\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u00e9\n",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u00ee\n\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0005\u0005\u0103\n\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u010c",
    "\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u0111\n\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u0117\n",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u011c\n\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0005\u0005\u0124\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005",
    "\u0005\u012f\n\u0005\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0007\u0006\u0135\n\u0006\f\u0006\u000e\u0006\u0138\u000b\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u013e\n\u0006",
    "\u0003\u0006\u0003\u0006\u0005\u0006\u0142\n\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0005\u0006\u0147\n\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0005\u0006\u014c\n\u0006\u0003\u0006\u0003\u0006\u0005",
    "\u0006\u0150\n\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u0154\n\u0006",
    "\u0003\u0006\u0005\u0006\u0157\n\u0006\u0003\u0007\u0003\u0007\u0003",
    "\b\u0003\b\u0003\b\u0003\b\u0007\b\u015f\n\b\f\b\u000e\b\u0162\u000b",
    "\b\u0003\b\u0003\b\u0003\t\u0003\t\u0003\t\u0005\t\u0169\n\t\u0003\t",
    "\u0005\t\u016c\n\t\u0003\n\u0003\n\u0003\n\u0003\n\u0007\n\u0172\n\n",
    "\f\n\u000e\n\u0175\u000b\n\u0003\n\u0003\n\u0003\u000b\u0003\u000b\u0005",
    "\u000b\u017b\n\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\f\u0003",
    "\f\u0005\f\u0182\n\f\u0003\f\u0005\f\u0185\n\f\u0003\f\u0005\f\u0188",
    "\n\f\u0003\r\u0003\r\u0003\r\u0003\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0011\u0005",
    "\u0011\u019c\n\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0005\u0011",
    "\u01a1\n\u0011\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0005\u0012\u01a9\n\u0012\u0003\u0012\u0005\u0012",
    "\u01ac\n\u0012\u0003\u0012\u0003\u0012\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u01bb\n\u0013\u0003\u0013",
    "\u0005\u0013\u01be\n\u0013\u0003\u0013\u0003\u0013\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0005\u0014\u01c7\n\u0014",
    "\u0003\u0014\u0005\u0014\u01ca\n\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0015\u0003\u0015\u0003\u0016\u0003\u0016\u0005\u0016\u01d2\n\u0016",
    "\u0003\u0016\u0005\u0016\u01d5\n\u0016\u0003\u0017\u0003\u0017\u0005",
    "\u0017\u01d9\n\u0017\u0003\u0017\u0005\u0017\u01dc\n\u0017\u0003\u0017",
    "\u0003\u0017\u0003\u0017\u0007\u0017\u01e1\n\u0017\f\u0017\u000e\u0017",
    "\u01e4\u000b\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0007",
    "\u0017\u01ea\n\u0017\f\u0017\u000e\u0017\u01ed\u000b\u0017\u0005\u0017",
    "\u01ef\n\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u01f3\n\u0017\u0003",
    "\u0017\u0005\u0017\u01f6\n\u0017\u0005\u0017\u01f8\n\u0017\u0003\u0018",
    "\u0003\u0018\u0003\u0018\u0003\u0018\u0007\u0018\u01fe\n\u0018\f\u0018",
    "\u000e\u0018\u0201\u000b\u0018\u0005\u0018\u0203\n\u0018\u0003\u0018",
    "\u0003\u0018\u0003\u0019\u0003\u0019\u0005\u0019\u0209\n\u0019\u0003",
    "\u0019\u0005\u0019\u020c\n\u0019\u0003\u0019\u0003\u0019\u0003\u0019",
    "\u0003\u0019\u0003\u0019\u0005\u0019\u0213\n\u0019\u0003\u001a\u0003",
    "\u001a\u0006\u001a\u0217\n\u001a\r\u001a\u000e\u001a\u0218\u0003\u001a",
    "\u0005\u001a\u021c\n\u001a\u0003\u001b\u0003\u001b\u0003\u001b\u0003",
    "\u001b\u0005\u001b\u0222\n\u001b\u0003\u001b\u0003\u001b\u0003\u001c",
    "\u0005\u001c\u0227\n\u001c\u0003\u001c\u0003\u001c\u0005\u001c\u022b",
    "\n\u001c\u0003\u001c\u0003\u001c\u0005\u001c\u022f\n\u001c\u0005\u001c",
    "\u0231\n\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001e\u0003",
    "\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0005",
    "\u001e\u023d\n\u001e\u0003\u001f\u0003\u001f\u0003\u001f\u0003 \u0003",
    " \u0003 \u0003!\u0003!\u0005!\u0247\n!\u0003!\u0005!\u024a\n!\u0003",
    "\"\u0003\"\u0003\"\u0003\"\u0007\"\u0250\n\"\f\"\u000e\"\u0253\u000b",
    "\"\u0003\"\u0003\"\u0003#\u0003#\u0003$\u0003$\u0003%\u0003%\u0003%",
    "\u0003%\u0005%\u025f\n%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0007",
    "%\u0267\n%\f%\u000e%\u026a\u000b%\u0003&\u0003&\u0005&\u026e\n&\u0003",
    "\'\u0003\'\u0003\'\u0003\'\u0005\'\u0274\n\'\u0003\'\u0003\'\u0003\'",
    "\u0003\'\u0003\'\u0003\'\u0005\'\u027c\n\'\u0003\'\u0003\'\u0003\'\u0003",
    "\'\u0003\'\u0007\'\u0283\n\'\f\'\u000e\'\u0286\u000b\'\u0003\'\u0003",
    "\'\u0003\'\u0005\'\u028b\n\'\u0003\'\u0003\'\u0003\'\u0003\'\u0005\'",
    "\u0291\n\'\u0003\'\u0003\'\u0005\'\u0295\n\'\u0003\'\u0003\'\u0003\'",
    "\u0005\'\u029a\n\'\u0003\'\u0003\'\u0003\'\u0005\'\u029f\n\'\u0003(",
    "\u0003(\u0003(\u0003(\u0005(\u02a5\n(\u0003(\u0003(\u0003(\u0003(\u0003",
    "(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0007(\u02b3\n(\f",
    "(\u000e(\u02b6\u000b(\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003",
    ")\u0003)\u0006)\u02c0\n)\r)\u000e)\u02c1\u0003)\u0003)\u0005)\u02c6",
    "\n)\u0003)\u0003)\u0003)\u0003)\u0006)\u02cc\n)\r)\u000e)\u02cd\u0003",
    ")\u0003)\u0005)\u02d2\n)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003",
    ")\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0007)\u02e2\n)\f",
    ")\u000e)\u02e5\u000b)\u0005)\u02e7\n)\u0003)\u0003)\u0003)\u0003)\u0003",
    ")\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0007)\u02f4\n)\f)\u000e",
    ")\u02f7\u000b)\u0005)\u02f9\n)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003",
    ")\u0003)\u0003)\u0003)\u0003)\u0003)\u0007)\u0306\n)\f)\u000e)\u0309",
    "\u000b)\u0005)\u030b\n)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003",
    ")\u0003)\u0003)\u0003)\u0003)\u0007)\u0318\n)\f)\u000e)\u031b\u000b",
    ")\u0005)\u031d\n)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003",
    ")\u0003)\u0003)\u0003)\u0005)\u032a\n)\u0003)\u0003)\u0003)\u0003)\u0003",
    ")\u0003)\u0003)\u0003)\u0007)\u0334\n)\f)\u000e)\u0337\u000b)\u0003",
    "*\u0003*\u0003*\u0003*\u0003+\u0003+\u0003,\u0003,\u0003-\u0003-\u0003",
    "-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003",
    "-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0007-\u0356",
    "\n-\f-\u000e-\u0359\u000b-\u0005-\u035b\n-\u0003-\u0003-\u0003-\u0003",
    "-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0007",
    "-\u036a\n-\f-\u000e-\u036d\u000b-\u0003-\u0003-\u0005-\u0371\n-\u0005",
    "-\u0373\n-\u0003-\u0003-\u0007-\u0377\n-\f-\u000e-\u037a\u000b-\u0003",
    ".\u0003.\u0005.\u037e\n.\u0003/\u0003/\u00030\u00030\u00030\u00030\u0003",
    "0\u00031\u00031\u00031\u00031\u00031\u00051\u038c\n1\u00032\u00032\u0003",
    "3\u00033\u00033\u00053\u0393\n3\u00034\u00034\u00034\u00034\u00054\u0399",
    "\n4\u00035\u00035\u00035\u0002\u0006HNPX6\u0002\u0004\u0006\b\n\f\u000e",
    "\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@B",
    "DFHJLNPRTVXZ\\^`bdfh\u0002\u000b\u0003\u0002`a\u0003\u0002\u0081\u0082",
    "\u0004\u0002))uu\u0004\u0002,037\u0003\u0002\u008e\u008f\u0003\u0002",
    "\u0090\u0092\u0003\u0002\u0088\u008d\u0003\u0002#$\u000f\u0002\n\u000b",
    "  %/88LM[^``bbhlpt~~\u0081\u0082\u0086\u0087\u0002\u0416\u0002m\u0003",
    "\u0002\u0002\u0002\u0004r\u0003\u0002\u0002\u0002\u0006u\u0003\u0002",
    "\u0002\u0002\b\u012e\u0003\u0002\u0002\u0002\n\u0130\u0003\u0002\u0002",
    "\u0002\f\u0158\u0003\u0002\u0002\u0002\u000e\u015a\u0003\u0002\u0002",
    "\u0002\u0010\u0165\u0003\u0002\u0002\u0002\u0012\u016d\u0003\u0002\u0002",
    "\u0002\u0014\u017a\u0003\u0002\u0002\u0002\u0016\u0181\u0003\u0002\u0002",
    "\u0002\u0018\u0189\u0003\u0002\u0002\u0002\u001a\u018c\u0003\u0002\u0002",
    "\u0002\u001c\u018f\u0003\u0002\u0002\u0002\u001e\u0194\u0003\u0002\u0002",
    "\u0002 \u019b\u0003\u0002\u0002\u0002\"\u01a2\u0003\u0002\u0002\u0002",
    "$\u01af\u0003\u0002\u0002\u0002&\u01c1\u0003\u0002\u0002\u0002(\u01cd",
    "\u0003\u0002\u0002\u0002*\u01cf\u0003\u0002\u0002\u0002,\u01f7\u0003",
    "\u0002\u0002\u0002.\u01f9\u0003\u0002\u0002\u00020\u0212\u0003\u0002",
    "\u0002\u00022\u021b\u0003\u0002\u0002\u00024\u021d\u0003\u0002\u0002",
    "\u00026\u0230\u0003\u0002\u0002\u00028\u0232\u0003\u0002\u0002\u0002",
    ":\u023c\u0003\u0002\u0002\u0002<\u023e\u0003\u0002\u0002\u0002>\u0241",
    "\u0003\u0002\u0002\u0002@\u0244\u0003\u0002\u0002\u0002B\u024b\u0003",
    "\u0002\u0002\u0002D\u0256\u0003\u0002\u0002\u0002F\u0258\u0003\u0002",
    "\u0002\u0002H\u025e\u0003\u0002\u0002\u0002J\u026b\u0003\u0002\u0002",
    "\u0002L\u029e\u0003\u0002\u0002\u0002N\u02a4\u0003\u0002\u0002\u0002",
    "P\u0329\u0003\u0002\u0002\u0002R\u0338\u0003\u0002\u0002\u0002T\u033c",
    "\u0003\u0002\u0002\u0002V\u033e\u0003\u0002\u0002\u0002X\u0372\u0003",
    "\u0002\u0002\u0002Z\u037d\u0003\u0002\u0002\u0002\\\u037f\u0003\u0002",
    "\u0002\u0002^\u0381\u0003\u0002\u0002\u0002`\u038b\u0003\u0002\u0002",
    "\u0002b\u038d\u0003\u0002\u0002\u0002d\u0392\u0003\u0002\u0002\u0002",
    "f\u0398\u0003\u0002\u0002\u0002h\u039a\u0003\u0002\u0002\u0002jl\u0005",
    "\u0004\u0003\u0002kj\u0003\u0002\u0002\u0002lo\u0003\u0002\u0002\u0002",
    "mk\u0003\u0002\u0002\u0002mn\u0003\u0002\u0002\u0002np\u0003\u0002\u0002",
    "\u0002om\u0003\u0002\u0002\u0002pq\u0007\u0002\u0002\u0003q\u0003\u0003",
    "\u0002\u0002\u0002rs\u0005\b\u0005\u0002st\u0007\u0003\u0002\u0002t",
    "\u0005\u0003\u0002\u0002\u0002uv\u0005F$\u0002vw\u0007\u0002\u0002\u0003",
    "w\u0007\u0003\u0002\u0002\u0002x\u012f\u0005\n\u0006\u0002yz\t\u0002",
    "\u0002\u0002z\u012f\u0007x\u0002\u0002{}\t\u0002\u0002\u0002|~\u0007",
    "\u000f\u0002\u0002}|\u0003\u0002\u0002\u0002}~\u0003\u0002\u0002\u0002",
    "~\u007f\u0003\u0002\u0002\u0002\u007f\u0081\u0007c\u0002\u0002\u0080",
    "\u0082\u0007Y\u0002\u0002\u0081\u0080\u0003\u0002\u0002\u0002\u0081",
    "\u0082\u0003\u0002\u0002\u0002\u0082\u012f\u0003\u0002\u0002\u0002\u0083",
    "\u0084\t\u0002\u0002\u0002\u0084\u0086\u0007T\u0002\u0002\u0085\u0087",
    "\u0007Y\u0002\u0002\u0086\u0085\u0003\u0002\u0002\u0002\u0086\u0087",
    "\u0003\u0002\u0002\u0002\u0087\u012f\u0003\u0002\u0002\u0002\u0088\u0089",
    "\t\u0002\u0002\u0002\u0089\u008b\u0007b\u0002\u0002\u008a\u008c\u0007",
    "Y\u0002\u0002\u008b\u008a\u0003\u0002\u0002\u0002\u008b\u008c\u0003",
    "\u0002\u0002\u0002\u008c\u012f\u0003\u0002\u0002\u0002\u008d\u008e\t",
    "\u0002\u0002\u0002\u008e\u012f\u0007k\u0002\u0002\u008f\u0091\t\u0002",
    "\u0002\u0002\u0090\u0092\t\u0003\u0002\u0002\u0091\u0090\u0003\u0002",
    "\u0002\u0002\u0091\u0092\u0003\u0002\u0002\u0002\u0092\u0093\u0003\u0002",
    "\u0002\u0002\u0093\u012f\u0007\u0080\u0002\u0002\u0094\u0095\t\u0002",
    "\u0002\u0002\u0095\u012f\u0007^\u0002\u0002\u0096\u0098\u0007X\u0002",
    "\u0002\u0097\u0099\u0007Y\u0002\u0002\u0098\u0097\u0003\u0002\u0002",
    "\u0002\u0098\u0099\u0003\u0002\u0002\u0002\u0099\u009a\u0003\u0002\u0002",
    "\u0002\u009a\u012f\u0005b2\u0002\u009b\u009c\u0007X\u0002\u0002\u009c",
    "\u009d\u0007l\u0002\u0002\u009d\u012f\u0005`1\u0002\u009e\u009f\u0007",
    "X\u0002\u0002\u009f\u00a0\u0007\u007f\u0002\u0002\u00a0\u012f\u0005",
    "`1\u0002\u00a1\u00a4\u0007Z\u0002\u0002\u00a2\u00a5\u0005`1\u0002\u00a3",
    "\u00a5\u0007\u0096\u0002\u0002\u00a4\u00a2\u0003\u0002\u0002\u0002\u00a4",
    "\u00a3\u0003\u0002\u0002\u0002\u00a5\u00a6\u0003\u0002\u0002\u0002\u00a6",
    "\u012f\u0005\u0016\f\u0002\u00a7\u00a8\t\u0002\u0002\u0002\u00a8\u00aa",
    "\u0007e\u0002\u0002\u00a9\u00ab\u0007Y\u0002\u0002\u00aa\u00a9\u0003",
    "\u0002\u0002\u0002\u00aa\u00ab\u0003\u0002\u0002\u0002\u00ab\u012f\u0003",
    "\u0002\u0002\u0002\u00ac\u00ad\u0007f\u0002\u0002\u00ad\u012f\u0005",
    "`1\u0002\u00ae\u00af\u0007f\u0002\u0002\u00af\u012f\u0007\u000f\u0002",
    "\u0002\u00b0\u00b1\u0007r\u0002\u0002\u00b1\u00b2\u0007\u0096\u0002",
    "\u0002\u00b2\u00b3\u0007\u0088\u0002\u0002\u00b3\u012f\u0007\u0096\u0002",
    "\u0002\u00b4\u00b5\u0007z\u0002\u0002\u00b5\u012f\u0007\u0096\u0002",
    "\u0002\u00b6\u00b7\u0007P\u0002\u0002\u00b7\u00bb\u0007S\u0002\u0002",
    "\u00b8\u00b9\u0007\u0087\u0002\u0002\u00b9\u00ba\u0007\u001c\u0002\u0002",
    "\u00ba\u00bc\u0007\u001d\u0002\u0002\u00bb\u00b8\u0003\u0002\u0002\u0002",
    "\u00bb\u00bc\u0003\u0002\u0002\u0002\u00bc\u00bd\u0003\u0002\u0002\u0002",
    "\u00bd\u00bf\u0005b2\u0002\u00be\u00c0\u0005\u000e\b\u0002\u00bf\u00be",
    "\u0003\u0002\u0002\u0002\u00bf\u00c0\u0003\u0002\u0002\u0002\u00c0\u00c3",
    "\u0003\u0002\u0002\u0002\u00c1\u00c2\u0007N\u0002\u0002\u00c2\u00c4",
    "\u0005\u0012\n\u0002\u00c3\u00c1\u0003\u0002\u0002\u0002\u00c3\u00c4",
    "\u0003\u0002\u0002\u0002\u00c4\u012f\u0003\u0002\u0002\u0002\u00c5\u00c6",
    "\u0007P\u0002\u0002\u00c6\u00ca\u0007S\u0002\u0002\u00c7\u00c8\u0007",
    "\u0087\u0002\u0002\u00c8\u00c9\u0007\u001c\u0002\u0002\u00c9\u00cb\u0007",
    "\u001d\u0002\u0002\u00ca\u00c7\u0003\u0002\u0002\u0002\u00ca\u00cb\u0003",
    "\u0002\u0002\u0002\u00cb\u00cc\u0003\u0002\u0002\u0002\u00cc\u00cf\u0005",
    "b2\u0002\u00cd\u00ce\u0007N\u0002\u0002\u00ce\u00d0\u0005\u0012\n\u0002",
    "\u00cf\u00cd\u0003\u0002\u0002\u0002\u00cf\u00d0\u0003\u0002\u0002\u0002",
    "\u00d0\u00d1\u0003\u0002\u0002\u0002\u00d1\u00d2\u0007\u000e\u0002\u0002",
    "\u00d2\u00d3\u0005\n\u0006\u0002\u00d3\u012f\u0003\u0002\u0002\u0002",
    "\u00d4\u00d5\u0007P\u0002\u0002\u00d5\u00d9\u0007Q\u0002\u0002\u00d6",
    "\u00d7\u0007\u0087\u0002\u0002\u00d7\u00d8\u0007\u001c\u0002\u0002\u00d8",
    "\u00da\u0007\u001d\u0002\u0002\u00d9\u00d6\u0003\u0002\u0002\u0002\u00d9",
    "\u00da\u0003\u0002\u0002\u0002\u00da\u00db\u0003\u0002\u0002\u0002\u00db",
    "\u00dd\u0005b2\u0002\u00dc\u00de\u0005\u000e\b\u0002\u00dd\u00dc\u0003",
    "\u0002\u0002\u0002\u00dd\u00de\u0003\u0002\u0002\u0002\u00de\u00e1\u0003",
    "\u0002\u0002\u0002\u00df\u00e0\u0007N\u0002\u0002\u00e0\u00e2\u0005",
    "\u0012\n\u0002\u00e1\u00df\u0003\u0002\u0002\u0002\u00e1\u00e2\u0003",
    "\u0002\u0002\u0002\u00e2\u012f\u0003\u0002\u0002\u0002\u00e3\u00e4\u0007",
    "P\u0002\u0002\u00e4\u00e8\u0007Q\u0002\u0002\u00e5\u00e6\u0007\u0087",
    "\u0002\u0002\u00e6\u00e7\u0007\u001c\u0002\u0002\u00e7\u00e9\u0007\u001d",
    "\u0002\u0002\u00e8\u00e5\u0003\u0002\u0002\u0002\u00e8\u00e9\u0003\u0002",
    "\u0002\u0002\u00e9\u00ea\u0003\u0002\u0002\u0002\u00ea\u00ed\u0005b",
    "2\u0002\u00eb\u00ec\u0007N\u0002\u0002\u00ec\u00ee\u0005\u0012\n\u0002",
    "\u00ed\u00eb\u0003\u0002\u0002\u0002\u00ed\u00ee\u0003\u0002\u0002\u0002",
    "\u00ee\u00ef\u0003\u0002\u0002\u0002\u00ef\u00f0\u0007\u000e\u0002\u0002",
    "\u00f0\u00f1\u0005\n\u0006\u0002\u00f1\u012f\u0003\u0002\u0002\u0002",
    "\u00f2\u00f3\u0007P\u0002\u0002\u00f3\u00f4\t\u0003\u0002\u0002\u00f4",
    "\u00f5\u0007\u007f\u0002\u0002\u00f5\u00f6\u0005`1\u0002\u00f6\u00f7",
    "\u0007N\u0002\u0002\u00f7\u00f8\u0005\u0012\n\u0002\u00f8\u012f\u0003",
    "\u0002\u0002\u0002\u00f9\u00fa\u0007U\u0002\u0002\u00fa\u00fb\u0007",
    "W\u0002\u0002\u00fb\u00fc\u0005b2\u0002\u00fc\u00fd\u0005\n\u0006\u0002",
    "\u00fd\u012f\u0003\u0002\u0002\u0002\u00fe\u00ff\u0007U\u0002\u0002",
    "\u00ff\u0100\u0007W\u0002\u0002\u0100\u0102\u0005b2\u0002\u0101\u0103",
    "\u0005B\"\u0002\u0102\u0101\u0003\u0002\u0002\u0002\u0102\u0103\u0003",
    "\u0002\u0002\u0002\u0103\u0104\u0003\u0002\u0002\u0002\u0104\u0105\u0007",
    "O\u0002\u0002\u0105\u0106\u0005.\u0018\u0002\u0106\u012f\u0003\u0002",
    "\u0002\u0002\u0107\u0108\u0007m\u0002\u0002\u0108\u010b\u0007S\u0002",
    "\u0002\u0109\u010a\u0007\u0087\u0002\u0002\u010a\u010c\u0007\u001d\u0002",
    "\u0002\u010b\u0109\u0003\u0002\u0002\u0002\u010b\u010c\u0003\u0002\u0002",
    "\u0002\u010c\u010d\u0003\u0002\u0002\u0002\u010d\u0110\u0005b2\u0002",
    "\u010e\u010f\u0007V\u0002\u0002\u010f\u0111\u0007R\u0002\u0002\u0110",
    "\u010e\u0003\u0002\u0002\u0002\u0110\u0111\u0003\u0002\u0002\u0002\u0111",
    "\u012f\u0003\u0002\u0002\u0002\u0112\u0113\u0007m\u0002\u0002\u0113",
    "\u0116\u0007Q\u0002\u0002\u0114\u0115\u0007\u0087\u0002\u0002\u0115",
    "\u0117\u0007\u001d\u0002\u0002\u0116\u0114\u0003\u0002\u0002\u0002\u0116",
    "\u0117\u0003\u0002\u0002\u0002\u0117\u0118\u0003\u0002\u0002\u0002\u0118",
    "\u011b\u0005b2\u0002\u0119\u011a\u0007V\u0002\u0002\u011a\u011c\u0007",
    "R\u0002\u0002\u011b\u0119\u0003\u0002\u0002\u0002\u011b\u011c\u0003",
    "\u0002\u0002\u0002\u011c\u012f\u0003\u0002\u0002\u0002\u011d\u011e\u0007",
    "m\u0002\u0002\u011e\u011f\u0007\u007f\u0002\u0002\u011f\u012f\u0005",
    "`1\u0002\u0120\u0123\u0007[\u0002\u0002\u0121\u0124\u0005\b\u0005\u0002",
    "\u0122\u0124\u0005`1\u0002\u0123\u0121\u0003\u0002\u0002\u0002\u0123",
    "\u0122\u0003\u0002\u0002\u0002\u0124\u012f\u0003\u0002\u0002\u0002\u0125",
    "\u0126\u0007P\u0002\u0002\u0126\u0127\u0007]\u0002\u0002\u0127\u0128",
    "\u0005`1\u0002\u0128\u0129\u0007\u000e\u0002\u0002\u0129\u012a\u0005",
    "X-\u0002\u012a\u012f\u0003\u0002\u0002\u0002\u012b\u012c\u0007m\u0002",
    "\u0002\u012c\u012d\u0007]\u0002\u0002\u012d\u012f\u0005`1\u0002\u012e",
    "x\u0003\u0002\u0002\u0002\u012ey\u0003\u0002\u0002\u0002\u012e{\u0003",
    "\u0002\u0002\u0002\u012e\u0083\u0003\u0002\u0002\u0002\u012e\u0088\u0003",
    "\u0002\u0002\u0002\u012e\u008d\u0003\u0002\u0002\u0002\u012e\u008f\u0003",
    "\u0002\u0002\u0002\u012e\u0094\u0003\u0002\u0002\u0002\u012e\u0096\u0003",
    "\u0002\u0002\u0002\u012e\u009b\u0003\u0002\u0002\u0002\u012e\u009e\u0003",
    "\u0002\u0002\u0002\u012e\u00a1\u0003\u0002\u0002\u0002\u012e\u00a7\u0003",
    "\u0002\u0002\u0002\u012e\u00ac\u0003\u0002\u0002\u0002\u012e\u00ae\u0003",
    "\u0002\u0002\u0002\u012e\u00b0\u0003\u0002\u0002\u0002\u012e\u00b4\u0003",
    "\u0002\u0002\u0002\u012e\u00b6\u0003\u0002\u0002\u0002\u012e\u00c5\u0003",
    "\u0002\u0002\u0002\u012e\u00d4\u0003\u0002\u0002\u0002\u012e\u00e3\u0003",
    "\u0002\u0002\u0002\u012e\u00f2\u0003\u0002\u0002\u0002\u012e\u00f9\u0003",
    "\u0002\u0002\u0002\u012e\u00fe\u0003\u0002\u0002\u0002\u012e\u0107\u0003",
    "\u0002\u0002\u0002\u012e\u0112\u0003\u0002\u0002\u0002\u012e\u011d\u0003",
    "\u0002\u0002\u0002\u012e\u0120\u0003\u0002\u0002\u0002\u012e\u0125\u0003",
    "\u0002\u0002\u0002\u012e\u012b\u0003\u0002\u0002\u0002\u012f\t\u0003",
    "\u0002\u0002\u0002\u0130\u0131\u0007\f\u0002\u0002\u0131\u0136\u0005",
    "0\u0019\u0002\u0132\u0133\u0007\u0004\u0002\u0002\u0133\u0135\u0005",
    "0\u0019\u0002\u0134\u0132\u0003\u0002\u0002\u0002\u0135\u0138\u0003",
    "\u0002\u0002\u0002\u0136\u0134\u0003\u0002\u0002\u0002\u0136\u0137\u0003",
    "\u0002\u0002\u0002\u0137\u0139\u0003\u0002\u0002\u0002\u0138\u0136\u0003",
    "\u0002\u0002\u0002\u0139\u013a\u0007\r\u0002\u0002\u013a\u013d\u0005",
    "2\u001a\u0002\u013b\u013c\u0007\u0013\u0002\u0002\u013c\u013e\u0005",
    " \u0011\u0002\u013d\u013b\u0003\u0002\u0002\u0002\u013d\u013e\u0003",
    "\u0002\u0002\u0002\u013e\u0141\u0003\u0002\u0002\u0002\u013f\u0140\u0007",
    "\u0011\u0002\u0002\u0140\u0142\u0005H%\u0002\u0141\u013f\u0003\u0002",
    "\u0002\u0002\u0141\u0142\u0003\u0002\u0002\u0002\u0142\u0146\u0003\u0002",
    "\u0002\u0002\u0143\u0144\u0007\u0014\u0002\u0002\u0144\u0145\u0007\u0015",
    "\u0002\u0002\u0145\u0147\u0005,\u0017\u0002\u0146\u0143\u0003\u0002",
    "\u0002\u0002\u0146\u0147\u0003\u0002\u0002\u0002\u0147\u014b\u0003\u0002",
    "\u0002\u0002\u0148\u0149\u0007L\u0002\u0002\u0149\u014a\u0007\u0015",
    "\u0002\u0002\u014a\u014c\u0005*\u0016\u0002\u014b\u0148\u0003\u0002",
    "\u0002\u0002\u014b\u014c\u0003\u0002\u0002\u0002\u014c\u014f\u0003\u0002",
    "\u0002\u0002\u014d\u014e\u0007\u0016\u0002\u0002\u014e\u0150\u0005H",
    "%\u0002\u014f\u014d\u0003\u0002\u0002\u0002\u014f\u0150\u0003\u0002",
    "\u0002\u0002\u0150\u0153\u0003\u0002\u0002\u0002\u0151\u0152\u0007\n",
    "\u0002\u0002\u0152\u0154\u0005\f\u0007\u0002\u0153\u0151\u0003\u0002",
    "\u0002\u0002\u0153\u0154\u0003\u0002\u0002\u0002\u0154\u0156\u0003\u0002",
    "\u0002\u0002\u0155\u0157\u0005\u001a\u000e\u0002\u0156\u0155\u0003\u0002",
    "\u0002\u0002\u0156\u0157\u0003\u0002\u0002\u0002\u0157\u000b\u0003\u0002",
    "\u0002\u0002\u0158\u0159\u0007\u000b\u0002\u0002\u0159\r\u0003\u0002",
    "\u0002\u0002\u015a\u015b\u0007\u0005\u0002\u0002\u015b\u0160\u0005\u0010",
    "\t\u0002\u015c\u015d\u0007\u0004\u0002\u0002\u015d\u015f\u0005\u0010",
    "\t\u0002\u015e\u015c\u0003\u0002\u0002\u0002\u015f\u0162\u0003\u0002",
    "\u0002\u0002\u0160\u015e\u0003\u0002\u0002\u0002\u0160\u0161\u0003\u0002",
    "\u0002\u0002\u0161\u0163\u0003\u0002\u0002\u0002\u0162\u0160\u0003\u0002",
    "\u0002\u0002\u0163\u0164\u0007\u0006\u0002\u0002\u0164\u000f\u0003\u0002",
    "\u0002\u0002\u0165\u0166\u0005`1\u0002\u0166\u016b\u0005X-\u0002\u0167",
    "\u0169\u0007\u0086\u0002\u0002\u0168\u0167\u0003\u0002\u0002\u0002\u0168",
    "\u0169\u0003\u0002\u0002\u0002\u0169\u016a\u0003\u0002\u0002\u0002\u016a",
    "\u016c\u0007~\u0002\u0002\u016b\u0168\u0003\u0002\u0002\u0002\u016b",
    "\u016c\u0003\u0002\u0002\u0002\u016c\u0011\u0003\u0002\u0002\u0002\u016d",
    "\u016e\u0007\u0005\u0002\u0002\u016e\u0173\u0005\u0014\u000b\u0002\u016f",
    "\u0170\u0007\u0004\u0002\u0002\u0170\u0172\u0005\u0014\u000b\u0002\u0171",
    "\u016f\u0003\u0002\u0002\u0002\u0172\u0175\u0003\u0002\u0002\u0002\u0173",
    "\u0171\u0003\u0002\u0002\u0002\u0173\u0174\u0003\u0002\u0002\u0002\u0174",
    "\u0176\u0003\u0002\u0002\u0002\u0175\u0173\u0003\u0002\u0002\u0002\u0176",
    "\u0177\u0007\u0006\u0002\u0002\u0177\u0013\u0003\u0002\u0002\u0002\u0178",
    "\u017b\u0005`1\u0002\u0179\u017b\u0007\u0096\u0002\u0002\u017a\u0178",
    "\u0003\u0002\u0002\u0002\u017a\u0179\u0003\u0002\u0002\u0002\u017b\u017c",
    "\u0003\u0002\u0002\u0002\u017c\u017d\u0007\u0088\u0002\u0002\u017d\u017e",
    "\u0005f4\u0002\u017e\u0015\u0003\u0002\u0002\u0002\u017f\u0180\u0007",
    "\r\u0002\u0002\u0180\u0182\u0007y\u0002\u0002\u0181\u017f\u0003\u0002",
    "\u0002\u0002\u0181\u0182\u0003\u0002\u0002\u0002\u0182\u0184\u0003\u0002",
    "\u0002\u0002\u0183\u0185\u0005\u0018\r\u0002\u0184\u0183\u0003\u0002",
    "\u0002\u0002\u0184\u0185\u0003\u0002\u0002\u0002\u0185\u0187\u0003\u0002",
    "\u0002\u0002\u0186\u0188\u0005\u001a\u000e\u0002\u0187\u0186\u0003\u0002",
    "\u0002\u0002\u0187\u0188\u0003\u0002\u0002\u0002\u0188\u0017\u0003\u0002",
    "\u0002\u0002\u0189\u018a\t\u0004\u0002\u0002\u018a\u018b\u0005d3\u0002",
    "\u018b\u0019\u0003\u0002\u0002\u0002\u018c\u018d\u0007\u0017\u0002\u0002",
    "\u018d\u018e\u0005d3\u0002\u018e\u001b\u0003\u0002\u0002\u0002\u018f",
    "\u0190\u0007\u0004\u0002\u0002\u0190\u0191\u0007=\u0002\u0002\u0191",
    "\u0192\u0005d3\u0002\u0192\u0193\u0005(\u0015\u0002\u0193\u001d\u0003",
    "\u0002\u0002\u0002\u0194\u0195\u0007\u0004\u0002\u0002\u0195\u0196\u0007",
    ">\u0002\u0002\u0196\u0197\u0007?\u0002\u0002\u0197\u0198\u0005d3\u0002",
    "\u0198\u0199\u0005(\u0015\u0002\u0199\u001f\u0003\u0002\u0002\u0002",
    "\u019a\u019c\u0007\u009a\u0002\u0002\u019b\u019a\u0003\u0002\u0002\u0002",
    "\u019b\u019c\u0003\u0002\u0002\u0002\u019c\u01a0\u0003\u0002\u0002\u0002",
    "\u019d\u01a1\u0005\"\u0012\u0002\u019e\u01a1\u0005$\u0013\u0002\u019f",
    "\u01a1\u0005&\u0014\u0002\u01a0\u019d\u0003\u0002\u0002\u0002\u01a0",
    "\u019e\u0003\u0002\u0002\u0002\u01a0\u019f\u0003\u0002\u0002\u0002\u01a1",
    "!\u0003\u0002\u0002\u0002\u01a2\u01a3\u00079\u0002\u0002\u01a3\u01a4",
    "\u0007\u0005\u0002\u0002\u01a4\u01a5\u0007;\u0002\u0002\u01a5\u01a6",
    "\u0005d3\u0002\u01a6\u01a8\u0005(\u0015\u0002\u01a7\u01a9\u0005\u001c",
    "\u000f\u0002\u01a8\u01a7\u0003\u0002\u0002\u0002\u01a8\u01a9\u0003\u0002",
    "\u0002\u0002\u01a9\u01ab\u0003\u0002\u0002\u0002\u01aa\u01ac\u0005\u001e",
    "\u0010\u0002\u01ab\u01aa\u0003\u0002\u0002\u0002\u01ab\u01ac\u0003\u0002",
    "\u0002\u0002\u01ac\u01ad\u0003\u0002\u0002\u0002\u01ad\u01ae\u0007\u0006",
    "\u0002\u0002\u01ae#\u0003\u0002\u0002\u0002\u01af\u01b0\u0007:\u0002",
    "\u0002\u01b0\u01b1\u0007\u0005\u0002\u0002\u01b1\u01b2\u0007;\u0002",
    "\u0002\u01b2\u01b3\u0005d3\u0002\u01b3\u01b4\u0005(\u0015\u0002\u01b4",
    "\u01b5\u0007\u0004\u0002\u0002\u01b5\u01b6\u0007<\u0002\u0002\u01b6",
    "\u01b7\u0007\u0015\u0002\u0002\u01b7\u01b8\u0005d3\u0002\u01b8\u01ba",
    "\u0005(\u0015\u0002\u01b9\u01bb\u0005\u001c\u000f\u0002\u01ba\u01b9",
    "\u0003\u0002\u0002\u0002\u01ba\u01bb\u0003\u0002\u0002\u0002\u01bb\u01bd",
    "\u0003\u0002\u0002\u0002\u01bc\u01be\u0005\u001e\u0010\u0002\u01bd\u01bc",
    "\u0003\u0002\u0002\u0002\u01bd\u01be\u0003\u0002\u0002\u0002\u01be\u01bf",
    "\u0003\u0002\u0002\u0002\u01bf\u01c0\u0007\u0006\u0002\u0002\u01c0%",
    "\u0003\u0002\u0002\u0002\u01c1\u01c2\u0007t\u0002\u0002\u01c2\u01c3",
    "\u0007\u0005\u0002\u0002\u01c3\u01c4\u0005d3\u0002\u01c4\u01c6\u0005",
    "(\u0015\u0002\u01c5\u01c7\u0005\u001c\u000f\u0002\u01c6\u01c5\u0003",
    "\u0002\u0002\u0002\u01c6\u01c7\u0003\u0002\u0002\u0002\u01c7\u01c9\u0003",
    "\u0002\u0002\u0002\u01c8\u01ca\u0005\u001e\u0010\u0002\u01c9\u01c8\u0003",
    "\u0002\u0002\u0002\u01c9\u01ca\u0003\u0002\u0002\u0002\u01ca\u01cb\u0003",
    "\u0002\u0002\u0002\u01cb\u01cc\u0007\u0006\u0002\u0002\u01cc\'\u0003",
    "\u0002\u0002\u0002\u01cd\u01ce\t\u0005\u0002\u0002\u01ce)\u0003\u0002",
    "\u0002\u0002\u01cf\u01d4\u0005N(\u0002\u01d0\u01d2\u0007\u000e\u0002",
    "\u0002\u01d1\u01d0\u0003\u0002\u0002\u0002\u01d1\u01d2\u0003\u0002\u0002",
    "\u0002\u01d2\u01d3\u0003\u0002\u0002\u0002\u01d3\u01d5\u0005`1\u0002",
    "\u01d4\u01d1\u0003\u0002\u0002\u0002\u01d4\u01d5\u0003\u0002\u0002\u0002",
    "\u01d5+\u0003\u0002\u0002\u0002\u01d6\u01db\u0005N(\u0002\u01d7\u01d9",
    "\u0007\u000e\u0002\u0002\u01d8\u01d7\u0003\u0002\u0002\u0002\u01d8\u01d9",
    "\u0003\u0002\u0002\u0002\u01d9\u01da\u0003\u0002\u0002\u0002\u01da\u01dc",
    "\u0005`1\u0002\u01db\u01d8\u0003\u0002\u0002\u0002\u01db\u01dc\u0003",
    "\u0002\u0002\u0002\u01dc\u01f8\u0003\u0002\u0002\u0002\u01dd\u01e2\u0005",
    "N(\u0002\u01de\u01df\u0007\u0004\u0002\u0002\u01df\u01e1\u0005N(\u0002",
    "\u01e0\u01de\u0003\u0002\u0002\u0002\u01e1\u01e4\u0003\u0002\u0002\u0002",
    "\u01e2\u01e0\u0003\u0002\u0002\u0002\u01e2\u01e3\u0003\u0002\u0002\u0002",
    "\u01e3\u01f8\u0003\u0002\u0002\u0002\u01e4\u01e2\u0003\u0002\u0002\u0002",
    "\u01e5\u01ee\u0007\u0005\u0002\u0002\u01e6\u01eb\u0005N(\u0002\u01e7",
    "\u01e8\u0007\u0004\u0002\u0002\u01e8\u01ea\u0005N(\u0002\u01e9\u01e7",
    "\u0003\u0002\u0002\u0002\u01ea\u01ed\u0003\u0002\u0002\u0002\u01eb\u01e9",
    "\u0003\u0002\u0002\u0002\u01eb\u01ec\u0003\u0002\u0002\u0002\u01ec\u01ef",
    "\u0003\u0002\u0002\u0002\u01ed\u01eb\u0003\u0002\u0002\u0002\u01ee\u01e6",
    "\u0003\u0002\u0002\u0002\u01ee\u01ef\u0003\u0002\u0002\u0002\u01ef\u01f0",
    "\u0003\u0002\u0002\u0002\u01f0\u01f5\u0007\u0006\u0002\u0002\u01f1\u01f3",
    "\u0007\u000e\u0002\u0002\u01f2\u01f1\u0003\u0002\u0002\u0002\u01f2\u01f3",
    "\u0003\u0002\u0002\u0002\u01f3\u01f4\u0003\u0002\u0002\u0002\u01f4\u01f6",
    "\u0005`1\u0002\u01f5\u01f2\u0003\u0002\u0002\u0002\u01f5\u01f6\u0003",
    "\u0002\u0002\u0002\u01f6\u01f8\u0003\u0002\u0002\u0002\u01f7\u01d6\u0003",
    "\u0002\u0002\u0002\u01f7\u01dd\u0003\u0002\u0002\u0002\u01f7\u01e5\u0003",
    "\u0002\u0002\u0002\u01f8-\u0003\u0002\u0002\u0002\u01f9\u0202\u0007",
    "\u0005\u0002\u0002\u01fa\u01ff\u0005N(\u0002\u01fb\u01fc\u0007\u0004",
    "\u0002\u0002\u01fc\u01fe\u0005N(\u0002\u01fd\u01fb\u0003\u0002\u0002",
    "\u0002\u01fe\u0201\u0003\u0002\u0002\u0002\u01ff\u01fd\u0003\u0002\u0002",
    "\u0002\u01ff\u0200\u0003\u0002\u0002\u0002\u0200\u0203\u0003\u0002\u0002",
    "\u0002\u0201\u01ff\u0003\u0002\u0002\u0002\u0202\u01fa\u0003\u0002\u0002",
    "\u0002\u0202\u0203\u0003\u0002\u0002\u0002\u0203\u0204\u0003\u0002\u0002",
    "\u0002\u0204\u0205\u0007\u0006\u0002\u0002\u0205/\u0003\u0002\u0002",
    "\u0002\u0206\u020b\u0005F$\u0002\u0207\u0209\u0007\u000e\u0002\u0002",
    "\u0208\u0207\u0003\u0002\u0002\u0002\u0208\u0209\u0003\u0002\u0002\u0002",
    "\u0209\u020a\u0003\u0002\u0002\u0002\u020a\u020c\u0005`1\u0002\u020b",
    "\u0208\u0003\u0002\u0002\u0002\u020b\u020c\u0003\u0002\u0002\u0002\u020c",
    "\u0213\u0003\u0002\u0002\u0002\u020d\u020e\u0005`1\u0002\u020e\u020f",
    "\u0007\u0007\u0002\u0002\u020f\u0210\u0007\u0090\u0002\u0002\u0210\u0213",
    "\u0003\u0002\u0002\u0002\u0211\u0213\u0007\u0090\u0002\u0002\u0212\u0206",
    "\u0003\u0002\u0002\u0002\u0212\u020d\u0003\u0002\u0002\u0002\u0212\u0211",
    "\u0003\u0002\u0002\u0002\u02131\u0003\u0002\u0002\u0002\u0214\u0216",
    "\u0005@!\u0002\u0215\u0217\u00054\u001b\u0002\u0216\u0215\u0003\u0002",
    "\u0002\u0002\u0217\u0218\u0003\u0002\u0002\u0002\u0218\u0216\u0003\u0002",
    "\u0002\u0002\u0218\u0219\u0003\u0002\u0002\u0002\u0219\u021c\u0003\u0002",
    "\u0002\u0002\u021a\u021c\u0005@!\u0002\u021b\u0214\u0003\u0002\u0002",
    "\u0002\u021b\u021a\u0003\u0002\u0002\u0002\u021c3\u0003\u0002\u0002",
    "\u0002\u021d\u021e\u00056\u001c\u0002\u021e\u021f\u0007E\u0002\u0002",
    "\u021f\u0221\u0005@!\u0002\u0220\u0222\u00058\u001d\u0002\u0221\u0220",
    "\u0003\u0002\u0002\u0002\u0221\u0222\u0003\u0002\u0002\u0002\u0222\u0223",
    "\u0003\u0002\u0002\u0002\u0223\u0224\u0005> \u0002\u02245\u0003\u0002",
    "\u0002\u0002\u0225\u0227\u0007H\u0002\u0002\u0226\u0225\u0003\u0002",
    "\u0002\u0002\u0226\u0227\u0003\u0002\u0002\u0002\u0227\u0231\u0003\u0002",
    "\u0002\u0002\u0228\u022a\u0007F\u0002\u0002\u0229\u022b\u0007G\u0002",
    "\u0002\u022a\u0229\u0003\u0002\u0002\u0002\u022a\u022b\u0003\u0002\u0002",
    "\u0002\u022b\u0231\u0003\u0002\u0002\u0002\u022c\u022e\u0007I\u0002",
    "\u0002\u022d\u022f\u0007G\u0002\u0002\u022e\u022d\u0003\u0002\u0002",
    "\u0002\u022e\u022f\u0003\u0002\u0002\u0002\u022f\u0231\u0003\u0002\u0002",
    "\u0002\u0230\u0226\u0003\u0002\u0002\u0002\u0230\u0228\u0003\u0002\u0002",
    "\u0002\u0230\u022c\u0003\u0002\u0002\u0002\u02317\u0003\u0002\u0002",
    "\u0002\u0232\u0233\u0007\u0012\u0002\u0002\u0233\u0234\u0005:\u001e",
    "\u0002\u02349\u0003\u0002\u0002\u0002\u0235\u0236\u0007\u0005\u0002",
    "\u0002\u0236\u0237\u0005<\u001f\u0002\u0237\u0238\u0007\u0004\u0002",
    "\u0002\u0238\u0239\u0005<\u001f\u0002\u0239\u023a\u0007\u0006\u0002",
    "\u0002\u023a\u023d\u0003\u0002\u0002\u0002\u023b\u023d\u0005<\u001f",
    "\u0002\u023c\u0235\u0003\u0002\u0002\u0002\u023c\u023b\u0003\u0002\u0002",
    "\u0002\u023d;\u0003\u0002\u0002\u0002\u023e\u023f\u0005d3\u0002\u023f",
    "\u0240\u0005(\u0015\u0002\u0240=\u0003\u0002\u0002\u0002\u0241\u0242",
    "\u0007K\u0002\u0002\u0242\u0243\u0005H%\u0002\u0243?\u0003\u0002\u0002",
    "\u0002\u0244\u0249\u0005D#\u0002\u0245\u0247\u0007\u000e\u0002\u0002",
    "\u0246\u0245\u0003\u0002\u0002\u0002\u0246\u0247\u0003\u0002\u0002\u0002",
    "\u0247\u0248\u0003\u0002\u0002\u0002\u0248\u024a\u0005b2\u0002\u0249",
    "\u0246\u0003\u0002\u0002\u0002\u0249\u024a\u0003\u0002\u0002\u0002\u024a",
    "A\u0003\u0002\u0002\u0002\u024b\u024c\u0007\u0005\u0002\u0002\u024c",
    "\u0251\u0005`1\u0002\u024d\u024e\u0007\u0004\u0002\u0002\u024e\u0250",
    "\u0005`1\u0002\u024f\u024d\u0003\u0002\u0002\u0002\u0250\u0253\u0003",
    "\u0002\u0002\u0002\u0251\u024f\u0003\u0002\u0002\u0002\u0251\u0252\u0003",
    "\u0002\u0002\u0002\u0252\u0254\u0003\u0002\u0002\u0002\u0253\u0251\u0003",
    "\u0002\u0002\u0002\u0254\u0255\u0007\u0006\u0002\u0002\u0255C\u0003",
    "\u0002\u0002\u0002\u0256\u0257\u0005b2\u0002\u0257E\u0003\u0002\u0002",
    "\u0002\u0258\u0259\u0005H%\u0002\u0259G\u0003\u0002\u0002\u0002\u025a",
    "\u025b\b%\u0001\u0002\u025b\u025f\u0005J&\u0002\u025c\u025d\u0007\u001c",
    "\u0002\u0002\u025d\u025f\u0005H%\u0005\u025e\u025a\u0003\u0002\u0002",
    "\u0002\u025e\u025c\u0003\u0002\u0002\u0002\u025f\u0268\u0003\u0002\u0002",
    "\u0002\u0260\u0261\f\u0004\u0002\u0002\u0261\u0262\u0007\u001a\u0002",
    "\u0002\u0262\u0267\u0005H%\u0005\u0263\u0264\f\u0003\u0002\u0002\u0264",
    "\u0265\u0007\u0019\u0002\u0002\u0265\u0267\u0005H%\u0004\u0266\u0260",
    "\u0003\u0002\u0002\u0002\u0266\u0263\u0003\u0002\u0002\u0002\u0267\u026a",
    "\u0003\u0002\u0002\u0002\u0268\u0266\u0003\u0002\u0002\u0002\u0268\u0269",
    "\u0003\u0002\u0002\u0002\u0269I\u0003\u0002\u0002\u0002\u026a\u0268",
    "\u0003\u0002\u0002\u0002\u026b\u026d\u0005N(\u0002\u026c\u026e\u0005",
    "L\'\u0002\u026d\u026c\u0003\u0002\u0002\u0002\u026d\u026e\u0003\u0002",
    "\u0002\u0002\u026eK\u0003\u0002\u0002\u0002\u026f\u0270\u0005T+\u0002",
    "\u0270\u0271\u0005N(\u0002\u0271\u029f\u0003\u0002\u0002\u0002\u0272",
    "\u0274\u0007\u001c\u0002\u0002\u0273\u0272\u0003\u0002\u0002\u0002\u0273",
    "\u0274\u0003\u0002\u0002\u0002\u0274\u0275\u0003\u0002\u0002\u0002\u0275",
    "\u0276\u0007\u001e\u0002\u0002\u0276\u0277\u0005N(\u0002\u0277\u0278",
    "\u0007\u001a\u0002\u0002\u0278\u0279\u0005N(\u0002\u0279\u029f\u0003",
    "\u0002\u0002\u0002\u027a\u027c\u0007\u001c\u0002\u0002\u027b\u027a\u0003",
    "\u0002\u0002\u0002\u027b\u027c\u0003\u0002\u0002\u0002\u027c\u027d\u0003",
    "\u0002\u0002\u0002\u027d\u027e\u0007\u001b\u0002\u0002\u027e\u027f\u0007",
    "\u0005\u0002\u0002\u027f\u0284\u0005F$\u0002\u0280\u0281\u0007\u0004",
    "\u0002\u0002\u0281\u0283\u0005F$\u0002\u0282\u0280\u0003\u0002\u0002",
    "\u0002\u0283\u0286\u0003\u0002\u0002\u0002\u0284\u0282\u0003\u0002\u0002",
    "\u0002\u0284\u0285\u0003\u0002\u0002\u0002\u0285\u0287\u0003\u0002\u0002",
    "\u0002\u0286\u0284\u0003\u0002\u0002\u0002\u0287\u0288\u0007\u0006\u0002",
    "\u0002\u0288\u029f\u0003\u0002\u0002\u0002\u0289\u028b\u0007\u001c\u0002",
    "\u0002\u028a\u0289\u0003\u0002\u0002\u0002\u028a\u028b\u0003\u0002\u0002",
    "\u0002\u028b\u028c\u0003\u0002\u0002\u0002\u028c\u028d\u0007\u001f\u0002",
    "\u0002\u028d\u0290\u0005N(\u0002\u028e\u028f\u0007 \u0002\u0002\u028f",
    "\u0291\u0007\u0096\u0002\u0002\u0290\u028e\u0003\u0002\u0002\u0002\u0290",
    "\u0291\u0003\u0002\u0002\u0002\u0291\u029f\u0003\u0002\u0002\u0002\u0292",
    "\u0294\u0007!\u0002\u0002\u0293\u0295\u0007\u001c\u0002\u0002\u0294",
    "\u0293\u0003\u0002\u0002\u0002\u0294\u0295\u0003\u0002\u0002\u0002\u0295",
    "\u0296\u0003\u0002\u0002\u0002\u0296\u029f\u0007\"\u0002\u0002\u0297",
    "\u0299\u0007!\u0002\u0002\u0298\u029a\u0007\u001c\u0002\u0002\u0299",
    "\u0298\u0003\u0002\u0002\u0002\u0299\u029a\u0003\u0002\u0002\u0002\u029a",
    "\u029b\u0003\u0002\u0002\u0002\u029b\u029c\u0007\u0010\u0002\u0002\u029c",
    "\u029d\u0007\r\u0002\u0002\u029d\u029f\u0005N(\u0002\u029e\u026f\u0003",
    "\u0002\u0002\u0002\u029e\u0273\u0003\u0002\u0002\u0002\u029e\u027b\u0003",
    "\u0002\u0002\u0002\u029e\u028a\u0003\u0002\u0002\u0002\u029e\u0292\u0003",
    "\u0002\u0002\u0002\u029e\u0297\u0003\u0002\u0002\u0002\u029fM\u0003",
    "\u0002\u0002\u0002\u02a0\u02a1\b(\u0001\u0002\u02a1\u02a5\u0005P)\u0002",
    "\u02a2\u02a3\t\u0006\u0002\u0002\u02a3\u02a5\u0005N(\u0006\u02a4\u02a0",
    "\u0003\u0002\u0002\u0002\u02a4\u02a2\u0003\u0002\u0002\u0002\u02a5\u02b4",
    "\u0003\u0002\u0002\u0002\u02a6\u02a7\f\u0005\u0002\u0002\u02a7\u02a8",
    "\t\u0007\u0002\u0002\u02a8\u02b3\u0005N(\u0006\u02a9\u02aa\f\u0004\u0002",
    "\u0002\u02aa\u02ab\t\u0006\u0002\u0002\u02ab\u02b3\u0005N(\u0005\u02ac",
    "\u02ad\f\u0003\u0002\u0002\u02ad\u02ae\u0007\u0093\u0002\u0002\u02ae",
    "\u02b3\u0005N(\u0004\u02af\u02b0\f\u0007\u0002\u0002\u02b0\u02b1\u0007",
    "\u0018\u0002\u0002\u02b1\u02b3\u0005R*\u0002\u02b2\u02a6\u0003\u0002",
    "\u0002\u0002\u02b2\u02a9\u0003\u0002\u0002\u0002\u02b2\u02ac\u0003\u0002",
    "\u0002\u0002\u02b2\u02af\u0003\u0002\u0002\u0002\u02b3\u02b6\u0003\u0002",
    "\u0002\u0002\u02b4\u02b2\u0003\u0002\u0002\u0002\u02b4\u02b5\u0003\u0002",
    "\u0002\u0002\u02b5O\u0003\u0002\u0002\u0002\u02b6\u02b4\u0003\u0002",
    "\u0002\u0002\u02b7\u02b8\b)\u0001\u0002\u02b8\u032a\u0005f4\u0002\u02b9",
    "\u02ba\u0005`1\u0002\u02ba\u02bb\u0007\u0096\u0002\u0002\u02bb\u032a",
    "\u0003\u0002\u0002\u0002\u02bc\u02bd\u0007@\u0002\u0002\u02bd\u02bf",
    "\u0005N(\u0002\u02be\u02c0\u0005^0\u0002\u02bf\u02be\u0003\u0002\u0002",
    "\u0002\u02c0\u02c1\u0003\u0002\u0002\u0002\u02c1\u02bf\u0003\u0002\u0002",
    "\u0002\u02c1\u02c2\u0003\u0002\u0002\u0002\u02c2\u02c5\u0003\u0002\u0002",
    "\u0002\u02c3\u02c4\u0007C\u0002\u0002\u02c4\u02c6\u0005F$\u0002\u02c5",
    "\u02c3\u0003\u0002\u0002\u0002\u02c5\u02c6\u0003\u0002\u0002\u0002\u02c6",
    "\u02c7\u0003\u0002\u0002\u0002\u02c7\u02c8\u0007D\u0002\u0002\u02c8",
    "\u032a\u0003\u0002\u0002\u0002\u02c9\u02cb\u0007@\u0002\u0002\u02ca",
    "\u02cc\u0005^0\u0002\u02cb\u02ca\u0003\u0002\u0002\u0002\u02cc\u02cd",
    "\u0003\u0002\u0002\u0002\u02cd\u02cb\u0003\u0002\u0002\u0002\u02cd\u02ce",
    "\u0003\u0002\u0002\u0002\u02ce\u02d1\u0003\u0002\u0002\u0002\u02cf\u02d0",
    "\u0007C\u0002\u0002\u02d0\u02d2\u0005F$\u0002\u02d1\u02cf\u0003\u0002",
    "\u0002\u0002\u02d1\u02d2\u0003\u0002\u0002\u0002\u02d2\u02d3\u0003\u0002",
    "\u0002\u0002\u02d3\u02d4\u0007D\u0002\u0002\u02d4\u032a\u0003\u0002",
    "\u0002\u0002\u02d5\u02d6\u0007_\u0002\u0002\u02d6\u02d7\u0007\u0005",
    "\u0002\u0002\u02d7\u02d8\u0005F$\u0002\u02d8\u02d9\u0007\u000e\u0002",
    "\u0002\u02d9\u02da\u0005X-\u0002\u02da\u02db\u0007\u0006\u0002\u0002",
    "\u02db\u032a\u0003\u0002\u0002\u0002\u02dc\u02dd\u0007p\u0002\u0002",
    "\u02dd\u02e6\u0007\b\u0002\u0002\u02de\u02e3\u0005F$\u0002\u02df\u02e0",
    "\u0007\u0004\u0002\u0002\u02e0\u02e2\u0005F$\u0002\u02e1\u02df\u0003",
    "\u0002\u0002\u0002\u02e2\u02e5\u0003\u0002\u0002\u0002\u02e3\u02e1\u0003",
    "\u0002\u0002\u0002\u02e3\u02e4\u0003\u0002\u0002\u0002\u02e4\u02e7\u0003",
    "\u0002\u0002\u0002\u02e5\u02e3\u0003\u0002\u0002\u0002\u02e6\u02de\u0003",
    "\u0002\u0002\u0002\u02e6\u02e7\u0003\u0002\u0002\u0002\u02e7\u02e8\u0003",
    "\u0002\u0002\u0002\u02e8\u032a\u0007\t\u0002\u0002\u02e9\u02ea\u0007",
    "q\u0002\u0002\u02ea\u02f8\u0007\u0005\u0002\u0002\u02eb\u02ec\u0005",
    "F$\u0002\u02ec\u02ed\u0007\u0094\u0002\u0002\u02ed\u02f5\u0005F$\u0002",
    "\u02ee\u02ef\u0007\u0004\u0002\u0002\u02ef\u02f0\u0005F$\u0002\u02f0",
    "\u02f1\u0007\u0094\u0002\u0002\u02f1\u02f2\u0005F$\u0002\u02f2\u02f4",
    "\u0003\u0002\u0002\u0002\u02f3\u02ee\u0003\u0002\u0002\u0002\u02f4\u02f7",
    "\u0003\u0002\u0002\u0002\u02f5\u02f3\u0003\u0002\u0002\u0002\u02f5\u02f6",
    "\u0003\u0002\u0002\u0002\u02f6\u02f9\u0003\u0002\u0002\u0002\u02f7\u02f5",
    "\u0003\u0002\u0002\u0002\u02f8\u02eb\u0003\u0002\u0002\u0002\u02f8\u02f9",
    "\u0003\u0002\u0002\u0002\u02f9\u02fa\u0003\u0002\u0002\u0002\u02fa\u032a",
    "\u0007\u0006\u0002\u0002\u02fb\u02fc\u0007M\u0002\u0002\u02fc\u030a",
    "\u0007\u0005\u0002\u0002\u02fd\u02fe\u0005`1\u0002\u02fe\u02ff\u0007",
    "\u0094\u0002\u0002\u02ff\u0307\u0005F$\u0002\u0300\u0301\u0007\u0004",
    "\u0002\u0002\u0301\u0302\u0005`1\u0002\u0302\u0303\u0007\u0094\u0002",
    "\u0002\u0303\u0304\u0005F$\u0002\u0304\u0306\u0003\u0002\u0002\u0002",
    "\u0305\u0300\u0003\u0002\u0002\u0002\u0306\u0309\u0003\u0002\u0002\u0002",
    "\u0307\u0305\u0003\u0002\u0002\u0002\u0307\u0308\u0003\u0002\u0002\u0002",
    "\u0308\u030b\u0003\u0002\u0002\u0002\u0309\u0307\u0003\u0002\u0002\u0002",
    "\u030a\u02fd\u0003\u0002\u0002\u0002\u030a\u030b\u0003\u0002\u0002\u0002",
    "\u030b\u030c\u0003\u0002\u0002\u0002\u030c\u032a\u0007\u0006\u0002\u0002",
    "\u030d\u030e\u0005`1\u0002\u030e\u030f\u0007\u0005\u0002\u0002\u030f",
    "\u0310\u0007\u0090\u0002\u0002\u0310\u0311\u0007\u0006\u0002\u0002\u0311",
    "\u032a\u0003\u0002\u0002\u0002\u0312\u0313\u0005`1\u0002\u0313\u031c",
    "\u0007\u0005\u0002\u0002\u0314\u0319\u0005F$\u0002\u0315\u0316\u0007",
    "\u0004\u0002\u0002\u0316\u0318\u0005F$\u0002\u0317\u0315\u0003\u0002",
    "\u0002\u0002\u0318\u031b\u0003\u0002\u0002\u0002\u0319\u0317\u0003\u0002",
    "\u0002\u0002\u0319\u031a\u0003\u0002\u0002\u0002\u031a\u031d\u0003\u0002",
    "\u0002\u0002\u031b\u0319\u0003\u0002\u0002\u0002\u031c\u0314\u0003\u0002",
    "\u0002\u0002\u031c\u031d\u0003\u0002\u0002\u0002\u031d\u031e\u0003\u0002",
    "\u0002\u0002\u031e\u031f\u0007\u0006\u0002\u0002\u031f\u032a\u0003\u0002",
    "\u0002\u0002\u0320\u032a\u0005`1\u0002\u0321\u0322\u0005`1\u0002\u0322",
    "\u0323\u0007\u0007\u0002\u0002\u0323\u0324\u0005`1\u0002\u0324\u032a",
    "\u0003\u0002\u0002\u0002\u0325\u0326\u0007\u0005\u0002\u0002\u0326\u0327",
    "\u0005F$\u0002\u0327\u0328\u0007\u0006\u0002\u0002\u0328\u032a\u0003",
    "\u0002\u0002\u0002\u0329\u02b7\u0003\u0002\u0002\u0002\u0329\u02b9\u0003",
    "\u0002\u0002\u0002\u0329\u02bc\u0003\u0002\u0002\u0002\u0329\u02c9\u0003",
    "\u0002\u0002\u0002\u0329\u02d5\u0003\u0002\u0002\u0002\u0329\u02dc\u0003",
    "\u0002\u0002\u0002\u0329\u02e9\u0003\u0002\u0002\u0002\u0329\u02fb\u0003",
    "\u0002\u0002\u0002\u0329\u030d\u0003\u0002\u0002\u0002\u0329\u0312\u0003",
    "\u0002\u0002\u0002\u0329\u0320\u0003\u0002\u0002\u0002\u0329\u0321\u0003",
    "\u0002\u0002\u0002\u0329\u0325\u0003\u0002\u0002\u0002\u032a\u0335\u0003",
    "\u0002\u0002\u0002\u032b\u032c\f\u0007\u0002\u0002\u032c\u032d\u0007",
    "\b\u0002\u0002\u032d\u032e\u0005N(\u0002\u032e\u032f\u0007\t\u0002\u0002",
    "\u032f\u0334\u0003\u0002\u0002\u0002\u0330\u0331\f\u0004\u0002\u0002",
    "\u0331\u0332\u0007\u0095\u0002\u0002\u0332\u0334\u0005`1\u0002\u0333",
    "\u032b\u0003\u0002\u0002\u0002\u0333\u0330\u0003\u0002\u0002\u0002\u0334",
    "\u0337\u0003\u0002\u0002\u0002\u0335\u0333\u0003\u0002\u0002\u0002\u0335",
    "\u0336\u0003\u0002\u0002\u0002\u0336Q\u0003\u0002\u0002\u0002\u0337",
    "\u0335\u0003\u0002\u0002\u0002\u0338\u0339\u0007\'\u0002\u0002\u0339",
    "\u033a\u00078\u0002\u0002\u033a\u033b\u0007\u0096\u0002\u0002\u033b",
    "S\u0003\u0002\u0002\u0002\u033c\u033d\t\b\u0002\u0002\u033dU\u0003\u0002",
    "\u0002\u0002\u033e\u033f\t\t\u0002\u0002\u033fW\u0003\u0002\u0002\u0002",
    "\u0340\u0341\b-\u0001\u0002\u0341\u0342\u0007p\u0002\u0002\u0342\u0343",
    "\u0007\u008a\u0002\u0002\u0343\u0344\u0005X-\u0002\u0344\u0345\u0007",
    "\u008c\u0002\u0002\u0345\u0373\u0003\u0002\u0002\u0002\u0346\u0347\u0007",
    "q\u0002\u0002\u0347\u0348\u0007\u008a\u0002\u0002\u0348\u0349\u0005",
    "X-\u0002\u0349\u034a\u0007\u0004\u0002\u0002\u034a\u034b\u0005X-\u0002",
    "\u034b\u034c\u0007\u008c\u0002\u0002\u034c\u0373\u0003\u0002\u0002\u0002",
    "\u034d\u034e\u0007M\u0002\u0002\u034e\u035a\u0007\u008a\u0002\u0002",
    "\u034f\u0350\u0005`1\u0002\u0350\u0357\u0005X-\u0002\u0351\u0352\u0007",
    "\u0004\u0002\u0002\u0352\u0353\u0005`1\u0002\u0353\u0354\u0005X-\u0002",
    "\u0354\u0356\u0003\u0002\u0002\u0002\u0355\u0351\u0003\u0002\u0002\u0002",
    "\u0356\u0359\u0003\u0002\u0002\u0002\u0357\u0355\u0003\u0002\u0002\u0002",
    "\u0357\u0358\u0003\u0002\u0002\u0002\u0358\u035b\u0003\u0002\u0002\u0002",
    "\u0359\u0357\u0003\u0002\u0002\u0002\u035a\u034f\u0003\u0002\u0002\u0002",
    "\u035a\u035b\u0003\u0002\u0002\u0002\u035b\u035c\u0003\u0002\u0002\u0002",
    "\u035c\u0373\u0007\u008c\u0002\u0002\u035d\u035e\u0007}\u0002\u0002",
    "\u035e\u035f\u0007\u0005\u0002\u0002\u035f\u0360\u0005d3\u0002\u0360",
    "\u0361\u0007\u0004\u0002\u0002\u0361\u0362\u0005d3\u0002\u0362\u0363",
    "\u0007\u0006\u0002\u0002\u0363\u0373\u0003\u0002\u0002\u0002\u0364\u0370",
    "\u0005\\/\u0002\u0365\u0366\u0007\u0005\u0002\u0002\u0366\u036b\u0005",
    "Z.\u0002\u0367\u0368\u0007\u0004\u0002\u0002\u0368\u036a\u0005Z.\u0002",
    "\u0369\u0367\u0003\u0002\u0002\u0002\u036a\u036d\u0003\u0002\u0002\u0002",
    "\u036b\u0369\u0003\u0002\u0002\u0002\u036b\u036c\u0003\u0002\u0002\u0002",
    "\u036c\u036e\u0003\u0002\u0002\u0002\u036d\u036b\u0003\u0002\u0002\u0002",
    "\u036e\u036f\u0007\u0006\u0002\u0002\u036f\u0371\u0003\u0002\u0002\u0002",
    "\u0370\u0365\u0003\u0002\u0002\u0002\u0370\u0371\u0003\u0002\u0002\u0002",
    "\u0371\u0373\u0003\u0002\u0002\u0002\u0372\u0340\u0003\u0002\u0002\u0002",
    "\u0372\u0346\u0003\u0002\u0002\u0002\u0372\u034d\u0003\u0002\u0002\u0002",
    "\u0372\u035d\u0003\u0002\u0002\u0002\u0372\u0364\u0003\u0002\u0002\u0002",
    "\u0373\u0378\u0003\u0002\u0002\u0002\u0374\u0375\f\b\u0002\u0002\u0375",
    "\u0377\u0007p\u0002\u0002\u0376\u0374\u0003\u0002\u0002\u0002\u0377",
    "\u037a\u0003\u0002\u0002\u0002\u0378\u0376\u0003\u0002\u0002\u0002\u0378",
    "\u0379\u0003\u0002\u0002\u0002\u0379Y\u0003\u0002\u0002\u0002\u037a",
    "\u0378\u0003\u0002\u0002\u0002\u037b\u037e\u0007\u0097\u0002\u0002\u037c",
    "\u037e\u0005X-\u0002\u037d\u037b\u0003\u0002\u0002\u0002\u037d\u037c",
    "\u0003\u0002\u0002\u0002\u037e[\u0003\u0002\u0002\u0002\u037f\u0380",
    "\u0005`1\u0002\u0380]\u0003\u0002\u0002\u0002\u0381\u0382\u0007A\u0002",
    "\u0002\u0382\u0383\u0005F$\u0002\u0383\u0384\u0007B\u0002\u0002\u0384",
    "\u0385\u0005F$\u0002\u0385_\u0003\u0002\u0002\u0002\u0386\u038c\u0007",
    "\u009a\u0002\u0002\u0387\u038c\u0007\u009c\u0002\u0002\u0388\u038c\u0005",
    "h5\u0002\u0389\u038c\u0007\u009d\u0002\u0002\u038a\u038c\u0007\u009b",
    "\u0002\u0002\u038b\u0386\u0003\u0002\u0002\u0002\u038b\u0387\u0003\u0002",
    "\u0002\u0002\u038b\u0388\u0003\u0002\u0002\u0002\u038b\u0389\u0003\u0002",
    "\u0002\u0002\u038b\u038a\u0003\u0002\u0002\u0002\u038ca\u0003\u0002",
    "\u0002\u0002\u038d\u038e\u0005`1\u0002\u038ec\u0003\u0002\u0002\u0002",
    "\u038f\u0393\u0007\u0098\u0002\u0002\u0390\u0393\u0007\u0099\u0002\u0002",
    "\u0391\u0393\u0007\u0097\u0002\u0002\u0392\u038f\u0003\u0002\u0002\u0002",
    "\u0392\u0390\u0003\u0002\u0002\u0002\u0392\u0391\u0003\u0002\u0002\u0002",
    "\u0393e\u0003\u0002\u0002\u0002\u0394\u0399\u0007\"\u0002\u0002\u0395",
    "\u0399\u0005d3\u0002\u0396\u0399\u0005V,\u0002\u0397\u0399\u0007\u0096",
    "\u0002\u0002\u0398\u0394\u0003\u0002\u0002\u0002\u0398\u0395\u0003\u0002",
    "\u0002\u0002\u0398\u0396\u0003\u0002\u0002\u0002\u0398\u0397\u0003\u0002",
    "\u0002\u0002\u0399g\u0003\u0002\u0002\u0002\u039a\u039b\t\n\u0002\u0002",
    "\u039bi\u0003\u0002\u0002\u0002vm}\u0081\u0086\u008b\u0091\u0098\u00a4",
    "\u00aa\u00bb\u00bf\u00c3\u00ca\u00cf\u00d9\u00dd\u00e1\u00e8\u00ed\u0102",
    "\u010b\u0110\u0116\u011b\u0123\u012e\u0136\u013d\u0141\u0146\u014b\u014f",
    "\u0153\u0156\u0160\u0168\u016b\u0173\u017a\u0181\u0184\u0187\u019b\u01a0",
    "\u01a8\u01ab\u01ba\u01bd\u01c6\u01c9\u01d1\u01d4\u01d8\u01db\u01e2\u01eb",
    "\u01ee\u01f2\u01f5\u01f7\u01ff\u0202\u0208\u020b\u0212\u0218\u021b\u0221",
    "\u0226\u022a\u022e\u0230\u023c\u0246\u0249\u0251\u025e\u0266\u0268\u026d",
    "\u0273\u027b\u0284\u028a\u0290\u0294\u0299\u029e\u02a4\u02b2\u02b4\u02c1",
    "\u02c5\u02cd\u02d1\u02e3\u02e6\u02f5\u02f8\u0307\u030a\u0319\u031c\u0329",
    "\u0333\u0335\u0357\u035a\u036b\u0370\u0372\u0378\u037d\u038b\u0392\u0398"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "';'", "','", "'('", "')'", "'.'", "'['", "']'", 
                     "'EMIT'", "'CHANGES'", "'SELECT'", "'FROM'", "'AS'", 
                     "'ALL'", "'DISTINCT'", "'WHERE'", "'WITHIN'", "'WINDOW'", 
                     "'GROUP'", "'BY'", "'HAVING'", "'LIMIT'", "'AT'", "'OR'", 
                     "'AND'", "'IN'", "'NOT'", "'EXISTS'", "'BETWEEN'", 
                     "'LIKE'", "'ESCAPE'", "'IS'", "'NULL'", "'TRUE'", "'FALSE'", 
                     "'INTEGER'", "'DATE'", "'TIME'", "'TIMESTAMP'", "'INTERVAL'", 
                     "'YEAR'", "'MONTH'", "'DAY'", "'HOUR'", "'MINUTE'", 
                     "'SECOND'", "'MILLISECOND'", "'YEARS'", "'MONTHS'", 
                     "'DAYS'", "'HOURS'", "'MINUTES'", "'SECONDS'", "'MILLISECONDS'", 
                     "'ZONE'", "'TUMBLING'", "'HOPPING'", "'SIZE'", "'ADVANCE'", 
                     "'RETENTION'", "'GRACE'", "'PERIOD'", "'CASE'", "'WHEN'", 
                     "'THEN'", "'ELSE'", "'END'", "'JOIN'", "'FULL'", "'OUTER'", 
                     "'INNER'", "'LEFT'", "'RIGHT'", "'ON'", "'PARTITION'", 
                     "'STRUCT'", "'WITH'", "'VALUES'", "'CREATE'", "'TABLE'", 
                     "'TOPIC'", "'STREAM'", "'STREAMS'", "'INSERT'", "'DELETE'", 
                     "'INTO'", "'DESCRIBE'", "'EXTENDED'", "'PRINT'", "'EXPLAIN'", 
                     "'ANALYZE'", "'TYPE'", "'TYPES'", "'CAST'", "'SHOW'", 
                     "'LIST'", "'TABLES'", "'TOPICS'", "'QUERY'", "'QUERIES'", 
                     "'TERMINATE'", "'LOAD'", "'COLUMNS'", "'COLUMN'", "'PARTITIONS'", 
                     "'FUNCTIONS'", "'FUNCTION'", "'DROP'", "'TO'", "'RENAME'", 
                     "'ARRAY'", "'MAP'", "'SET'", "'RESET'", "'SESSION'", 
                     "'SAMPLE'", "'EXPORT'", "'CATALOG'", "'PROPERTIES'", 
                     "'BEGINNING'", "'UNSET'", "'RUN'", "'SCRIPT'", "'DECIMAL'", 
                     "'KEY'", "'CONNECTOR'", "'CONNECTORS'", "'SINK'", "'SOURCE'", 
                     "'NAMESPACE'", "'MATERIALIZED'", "'VIEW'", "'PRIMARY'", 
                     "'IF'", "'='", null, "'<'", "'<='", "'>'", "'>='", 
                     "'+'", "'-'", "'*'", "'/'", "'%'", "'||'", "':='", 
                     "'->'" ];

var symbolicNames = [ null, null, null, null, null, null, null, null, "EMIT", 
                      "CHANGES", "SELECT", "FROM", "AS", "ALL", "DISTINCT", 
                      "WHERE", "WITHIN", "WINDOW", "GROUP", "BY", "HAVING", 
                      "LIMIT", "AT", "OR", "AND", "IN", "NOT", "EXISTS", 
                      "BETWEEN", "LIKE", "ESCAPE", "IS", "NULL", "TRUE", 
                      "FALSE", "INTEGER", "DATE", "TIME", "TIMESTAMP", "INTERVAL", 
                      "YEAR", "MONTH", "DAY", "HOUR", "MINUTE", "SECOND", 
                      "MILLISECOND", "YEARS", "MONTHS", "DAYS", "HOURS", 
                      "MINUTES", "SECONDS", "MILLISECONDS", "ZONE", "TUMBLING", 
                      "HOPPING", "SIZE", "ADVANCE", "RETENTION", "GRACE", 
                      "PERIOD", "CASE", "WHEN", "THEN", "ELSE", "END", "JOIN", 
                      "FULL", "OUTER", "INNER", "LEFT", "RIGHT", "ON", "PARTITION", 
                      "STRUCT", "WITH", "VALUES", "CREATE", "TABLE", "TOPIC", 
                      "STREAM", "STREAMS", "INSERT", "DELETE", "INTO", "DESCRIBE", 
                      "EXTENDED", "PRINT", "EXPLAIN", "ANALYZE", "TYPE", 
                      "TYPES", "CAST", "SHOW", "LIST", "TABLES", "TOPICS", 
                      "QUERY", "QUERIES", "TERMINATE", "LOAD", "COLUMNS", 
                      "COLUMN", "PARTITIONS", "FUNCTIONS", "FUNCTION", "DROP", 
                      "TO", "RENAME", "ARRAY", "MAP", "SET", "RESET", "SESSION", 
                      "SAMPLE", "EXPORT", "CATALOG", "PROPERTIES", "BEGINNING", 
                      "UNSET", "RUN", "SCRIPT", "DECIMAL", "KEY", "CONNECTOR", 
                      "CONNECTORS", "SINK", "SOURCE", "NAMESPACE", "MATERIALIZED", 
                      "VIEW", "PRIMARY", "IF", "EQ", "NEQ", "LT", "LTE", 
                      "GT", "GTE", "PLUS", "MINUS", "ASTERISK", "SLASH", 
                      "PERCENT", "CONCAT", "ASSIGN", "STRUCT_FIELD_REF", 
                      "STRING", "INTEGER_VALUE", "DECIMAL_VALUE", "FLOATING_POINT_VALUE", 
                      "IDENTIFIER", "DIGIT_IDENTIFIER", "QUOTED_IDENTIFIER", 
                      "BACKQUOTED_IDENTIFIER", "TIME_WITH_TIME_ZONE", "TIMESTAMP_WITH_TIME_ZONE", 
                      "SIMPLE_COMMENT", "BRACKETED_COMMENT", "WS", "UNRECOGNIZED", 
                      "DELIMITER" ];

var ruleNames =  [ "statements", "singleStatement", "singleExpression", 
                   "statement", "query", "resultMaterialization", "tableElements", 
                   "tableElement", "tableProperties", "tableProperty", "printClause", 
                   "intervalClause", "limitClause", "retentionClause", "gracePeriodClause", 
                   "windowExpression", "tumblingWindowExpression", "hoppingWindowExpression", 
                   "sessionWindowExpression", "windowUnit", "partitionBy", 
                   "groupBy", "values", "selectItem", "relation", "joinedSource", 
                   "joinType", "joinWindow", "withinExpression", "joinWindowSize", 
                   "joinCriteria", "aliasedRelation", "columns", "relationPrimary", 
                   "expression", "booleanExpression", "predicated", "predicate", 
                   "valueExpression", "primaryExpression", "timeZoneSpecifier", 
                   "comparisonOperator", "booleanValue", "type", "typeParameter", 
                   "baseType", "whenClause", "identifier", "sourceName", 
                   "number", "literal", "nonReserved" ];

function SqlBaseParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

SqlBaseParser.prototype = Object.create(antlr4.Parser.prototype);
SqlBaseParser.prototype.constructor = SqlBaseParser;

Object.defineProperty(SqlBaseParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

SqlBaseParser.EOF = antlr4.Token.EOF;
SqlBaseParser.T__0 = 1;
SqlBaseParser.T__1 = 2;
SqlBaseParser.T__2 = 3;
SqlBaseParser.T__3 = 4;
SqlBaseParser.T__4 = 5;
SqlBaseParser.T__5 = 6;
SqlBaseParser.T__6 = 7;
SqlBaseParser.EMIT = 8;
SqlBaseParser.CHANGES = 9;
SqlBaseParser.SELECT = 10;
SqlBaseParser.FROM = 11;
SqlBaseParser.AS = 12;
SqlBaseParser.ALL = 13;
SqlBaseParser.DISTINCT = 14;
SqlBaseParser.WHERE = 15;
SqlBaseParser.WITHIN = 16;
SqlBaseParser.WINDOW = 17;
SqlBaseParser.GROUP = 18;
SqlBaseParser.BY = 19;
SqlBaseParser.HAVING = 20;
SqlBaseParser.LIMIT = 21;
SqlBaseParser.AT = 22;
SqlBaseParser.OR = 23;
SqlBaseParser.AND = 24;
SqlBaseParser.IN = 25;
SqlBaseParser.NOT = 26;
SqlBaseParser.EXISTS = 27;
SqlBaseParser.BETWEEN = 28;
SqlBaseParser.LIKE = 29;
SqlBaseParser.ESCAPE = 30;
SqlBaseParser.IS = 31;
SqlBaseParser.NULL = 32;
SqlBaseParser.TRUE = 33;
SqlBaseParser.FALSE = 34;
SqlBaseParser.INTEGER = 35;
SqlBaseParser.DATE = 36;
SqlBaseParser.TIME = 37;
SqlBaseParser.TIMESTAMP = 38;
SqlBaseParser.INTERVAL = 39;
SqlBaseParser.YEAR = 40;
SqlBaseParser.MONTH = 41;
SqlBaseParser.DAY = 42;
SqlBaseParser.HOUR = 43;
SqlBaseParser.MINUTE = 44;
SqlBaseParser.SECOND = 45;
SqlBaseParser.MILLISECOND = 46;
SqlBaseParser.YEARS = 47;
SqlBaseParser.MONTHS = 48;
SqlBaseParser.DAYS = 49;
SqlBaseParser.HOURS = 50;
SqlBaseParser.MINUTES = 51;
SqlBaseParser.SECONDS = 52;
SqlBaseParser.MILLISECONDS = 53;
SqlBaseParser.ZONE = 54;
SqlBaseParser.TUMBLING = 55;
SqlBaseParser.HOPPING = 56;
SqlBaseParser.SIZE = 57;
SqlBaseParser.ADVANCE = 58;
SqlBaseParser.RETENTION = 59;
SqlBaseParser.GRACE = 60;
SqlBaseParser.PERIOD = 61;
SqlBaseParser.CASE = 62;
SqlBaseParser.WHEN = 63;
SqlBaseParser.THEN = 64;
SqlBaseParser.ELSE = 65;
SqlBaseParser.END = 66;
SqlBaseParser.JOIN = 67;
SqlBaseParser.FULL = 68;
SqlBaseParser.OUTER = 69;
SqlBaseParser.INNER = 70;
SqlBaseParser.LEFT = 71;
SqlBaseParser.RIGHT = 72;
SqlBaseParser.ON = 73;
SqlBaseParser.PARTITION = 74;
SqlBaseParser.STRUCT = 75;
SqlBaseParser.WITH = 76;
SqlBaseParser.VALUES = 77;
SqlBaseParser.CREATE = 78;
SqlBaseParser.TABLE = 79;
SqlBaseParser.TOPIC = 80;
SqlBaseParser.STREAM = 81;
SqlBaseParser.STREAMS = 82;
SqlBaseParser.INSERT = 83;
SqlBaseParser.DELETE = 84;
SqlBaseParser.INTO = 85;
SqlBaseParser.DESCRIBE = 86;
SqlBaseParser.EXTENDED = 87;
SqlBaseParser.PRINT = 88;
SqlBaseParser.EXPLAIN = 89;
SqlBaseParser.ANALYZE = 90;
SqlBaseParser.TYPE = 91;
SqlBaseParser.TYPES = 92;
SqlBaseParser.CAST = 93;
SqlBaseParser.SHOW = 94;
SqlBaseParser.LIST = 95;
SqlBaseParser.TABLES = 96;
SqlBaseParser.TOPICS = 97;
SqlBaseParser.QUERY = 98;
SqlBaseParser.QUERIES = 99;
SqlBaseParser.TERMINATE = 100;
SqlBaseParser.LOAD = 101;
SqlBaseParser.COLUMNS = 102;
SqlBaseParser.COLUMN = 103;
SqlBaseParser.PARTITIONS = 104;
SqlBaseParser.FUNCTIONS = 105;
SqlBaseParser.FUNCTION = 106;
SqlBaseParser.DROP = 107;
SqlBaseParser.TO = 108;
SqlBaseParser.RENAME = 109;
SqlBaseParser.ARRAY = 110;
SqlBaseParser.MAP = 111;
SqlBaseParser.SET = 112;
SqlBaseParser.RESET = 113;
SqlBaseParser.SESSION = 114;
SqlBaseParser.SAMPLE = 115;
SqlBaseParser.EXPORT = 116;
SqlBaseParser.CATALOG = 117;
SqlBaseParser.PROPERTIES = 118;
SqlBaseParser.BEGINNING = 119;
SqlBaseParser.UNSET = 120;
SqlBaseParser.RUN = 121;
SqlBaseParser.SCRIPT = 122;
SqlBaseParser.DECIMAL = 123;
SqlBaseParser.KEY = 124;
SqlBaseParser.CONNECTOR = 125;
SqlBaseParser.CONNECTORS = 126;
SqlBaseParser.SINK = 127;
SqlBaseParser.SOURCE = 128;
SqlBaseParser.NAMESPACE = 129;
SqlBaseParser.MATERIALIZED = 130;
SqlBaseParser.VIEW = 131;
SqlBaseParser.PRIMARY = 132;
SqlBaseParser.IF = 133;
SqlBaseParser.EQ = 134;
SqlBaseParser.NEQ = 135;
SqlBaseParser.LT = 136;
SqlBaseParser.LTE = 137;
SqlBaseParser.GT = 138;
SqlBaseParser.GTE = 139;
SqlBaseParser.PLUS = 140;
SqlBaseParser.MINUS = 141;
SqlBaseParser.ASTERISK = 142;
SqlBaseParser.SLASH = 143;
SqlBaseParser.PERCENT = 144;
SqlBaseParser.CONCAT = 145;
SqlBaseParser.ASSIGN = 146;
SqlBaseParser.STRUCT_FIELD_REF = 147;
SqlBaseParser.STRING = 148;
SqlBaseParser.INTEGER_VALUE = 149;
SqlBaseParser.DECIMAL_VALUE = 150;
SqlBaseParser.FLOATING_POINT_VALUE = 151;
SqlBaseParser.IDENTIFIER = 152;
SqlBaseParser.DIGIT_IDENTIFIER = 153;
SqlBaseParser.QUOTED_IDENTIFIER = 154;
SqlBaseParser.BACKQUOTED_IDENTIFIER = 155;
SqlBaseParser.TIME_WITH_TIME_ZONE = 156;
SqlBaseParser.TIMESTAMP_WITH_TIME_ZONE = 157;
SqlBaseParser.SIMPLE_COMMENT = 158;
SqlBaseParser.BRACKETED_COMMENT = 159;
SqlBaseParser.WS = 160;
SqlBaseParser.UNRECOGNIZED = 161;
SqlBaseParser.DELIMITER = 162;

SqlBaseParser.RULE_statements = 0;
SqlBaseParser.RULE_singleStatement = 1;
SqlBaseParser.RULE_singleExpression = 2;
SqlBaseParser.RULE_statement = 3;
SqlBaseParser.RULE_query = 4;
SqlBaseParser.RULE_resultMaterialization = 5;
SqlBaseParser.RULE_tableElements = 6;
SqlBaseParser.RULE_tableElement = 7;
SqlBaseParser.RULE_tableProperties = 8;
SqlBaseParser.RULE_tableProperty = 9;
SqlBaseParser.RULE_printClause = 10;
SqlBaseParser.RULE_intervalClause = 11;
SqlBaseParser.RULE_limitClause = 12;
SqlBaseParser.RULE_retentionClause = 13;
SqlBaseParser.RULE_gracePeriodClause = 14;
SqlBaseParser.RULE_windowExpression = 15;
SqlBaseParser.RULE_tumblingWindowExpression = 16;
SqlBaseParser.RULE_hoppingWindowExpression = 17;
SqlBaseParser.RULE_sessionWindowExpression = 18;
SqlBaseParser.RULE_windowUnit = 19;
SqlBaseParser.RULE_partitionBy = 20;
SqlBaseParser.RULE_groupBy = 21;
SqlBaseParser.RULE_values = 22;
SqlBaseParser.RULE_selectItem = 23;
SqlBaseParser.RULE_relation = 24;
SqlBaseParser.RULE_joinedSource = 25;
SqlBaseParser.RULE_joinType = 26;
SqlBaseParser.RULE_joinWindow = 27;
SqlBaseParser.RULE_withinExpression = 28;
SqlBaseParser.RULE_joinWindowSize = 29;
SqlBaseParser.RULE_joinCriteria = 30;
SqlBaseParser.RULE_aliasedRelation = 31;
SqlBaseParser.RULE_columns = 32;
SqlBaseParser.RULE_relationPrimary = 33;
SqlBaseParser.RULE_expression = 34;
SqlBaseParser.RULE_booleanExpression = 35;
SqlBaseParser.RULE_predicated = 36;
SqlBaseParser.RULE_predicate = 37;
SqlBaseParser.RULE_valueExpression = 38;
SqlBaseParser.RULE_primaryExpression = 39;
SqlBaseParser.RULE_timeZoneSpecifier = 40;
SqlBaseParser.RULE_comparisonOperator = 41;
SqlBaseParser.RULE_booleanValue = 42;
SqlBaseParser.RULE_type = 43;
SqlBaseParser.RULE_typeParameter = 44;
SqlBaseParser.RULE_baseType = 45;
SqlBaseParser.RULE_whenClause = 46;
SqlBaseParser.RULE_identifier = 47;
SqlBaseParser.RULE_sourceName = 48;
SqlBaseParser.RULE_number = 49;
SqlBaseParser.RULE_literal = 50;
SqlBaseParser.RULE_nonReserved = 51;


function StatementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_statements;
    return this;
}

StatementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementsContext.prototype.constructor = StatementsContext;

StatementsContext.prototype.EOF = function() {
    return this.getToken(SqlBaseParser.EOF, 0);
};

StatementsContext.prototype.singleStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleStatementContext);
    } else {
        return this.getTypedRuleContext(SingleStatementContext,i);
    }
};

StatementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterStatements(this);
	}
};

StatementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitStatements(this);
	}
};




SqlBaseParser.StatementsContext = StatementsContext;

SqlBaseParser.prototype.statements = function() {

    var localctx = new StatementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, SqlBaseParser.RULE_statements);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 107;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SqlBaseParser.SELECT || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (SqlBaseParser.CREATE - 78)) | (1 << (SqlBaseParser.INSERT - 78)) | (1 << (SqlBaseParser.DESCRIBE - 78)) | (1 << (SqlBaseParser.PRINT - 78)) | (1 << (SqlBaseParser.EXPLAIN - 78)) | (1 << (SqlBaseParser.SHOW - 78)) | (1 << (SqlBaseParser.LIST - 78)) | (1 << (SqlBaseParser.TERMINATE - 78)) | (1 << (SqlBaseParser.DROP - 78)))) !== 0) || _la===SqlBaseParser.SET || _la===SqlBaseParser.UNSET) {
            this.state = 104;
            this.singleStatement();
            this.state = 109;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 110;
        this.match(SqlBaseParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SingleStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_singleStatement;
    return this;
}

SingleStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SingleStatementContext.prototype.constructor = SingleStatementContext;

SingleStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

SingleStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterSingleStatement(this);
	}
};

SingleStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitSingleStatement(this);
	}
};




SqlBaseParser.SingleStatementContext = SingleStatementContext;

SqlBaseParser.prototype.singleStatement = function() {

    var localctx = new SingleStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, SqlBaseParser.RULE_singleStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 112;
        this.statement();
        this.state = 113;
        this.match(SqlBaseParser.T__0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SingleExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_singleExpression;
    return this;
}

SingleExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SingleExpressionContext.prototype.constructor = SingleExpressionContext;

SingleExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SingleExpressionContext.prototype.EOF = function() {
    return this.getToken(SqlBaseParser.EOF, 0);
};

SingleExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterSingleExpression(this);
	}
};

SingleExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitSingleExpression(this);
	}
};




SqlBaseParser.SingleExpressionContext = SingleExpressionContext;

SqlBaseParser.prototype.singleExpression = function() {

    var localctx = new SingleExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, SqlBaseParser.RULE_singleExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 115;
        this.expression();
        this.state = 116;
        this.match(SqlBaseParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;


 
StatementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ListTablesContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ListTablesContext.prototype = Object.create(StatementContext.prototype);
ListTablesContext.prototype.constructor = ListTablesContext;

SqlBaseParser.ListTablesContext = ListTablesContext;

ListTablesContext.prototype.TABLES = function() {
    return this.getToken(SqlBaseParser.TABLES, 0);
};

ListTablesContext.prototype.LIST = function() {
    return this.getToken(SqlBaseParser.LIST, 0);
};

ListTablesContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};

ListTablesContext.prototype.EXTENDED = function() {
    return this.getToken(SqlBaseParser.EXTENDED, 0);
};
ListTablesContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterListTables(this);
	}
};

ListTablesContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitListTables(this);
	}
};


function ExplainContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExplainContext.prototype = Object.create(StatementContext.prototype);
ExplainContext.prototype.constructor = ExplainContext;

SqlBaseParser.ExplainContext = ExplainContext;

ExplainContext.prototype.EXPLAIN = function() {
    return this.getToken(SqlBaseParser.EXPLAIN, 0);
};

ExplainContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

ExplainContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
ExplainContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterExplain(this);
	}
};

ExplainContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitExplain(this);
	}
};


function CreateTableContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CreateTableContext.prototype = Object.create(StatementContext.prototype);
CreateTableContext.prototype.constructor = CreateTableContext;

SqlBaseParser.CreateTableContext = CreateTableContext;

CreateTableContext.prototype.CREATE = function() {
    return this.getToken(SqlBaseParser.CREATE, 0);
};

CreateTableContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

CreateTableContext.prototype.sourceName = function() {
    return this.getTypedRuleContext(SourceNameContext,0);
};

CreateTableContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

CreateTableContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};

CreateTableContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};

CreateTableContext.prototype.tableElements = function() {
    return this.getTypedRuleContext(TableElementsContext,0);
};

CreateTableContext.prototype.WITH = function() {
    return this.getToken(SqlBaseParser.WITH, 0);
};

CreateTableContext.prototype.tableProperties = function() {
    return this.getTypedRuleContext(TablePropertiesContext,0);
};
CreateTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterCreateTable(this);
	}
};

CreateTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitCreateTable(this);
	}
};


function UnsetPropertyContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnsetPropertyContext.prototype = Object.create(StatementContext.prototype);
UnsetPropertyContext.prototype.constructor = UnsetPropertyContext;

SqlBaseParser.UnsetPropertyContext = UnsetPropertyContext;

UnsetPropertyContext.prototype.UNSET = function() {
    return this.getToken(SqlBaseParser.UNSET, 0);
};

UnsetPropertyContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};
UnsetPropertyContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterUnsetProperty(this);
	}
};

UnsetPropertyContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitUnsetProperty(this);
	}
};


function ListTypesContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ListTypesContext.prototype = Object.create(StatementContext.prototype);
ListTypesContext.prototype.constructor = ListTypesContext;

SqlBaseParser.ListTypesContext = ListTypesContext;

ListTypesContext.prototype.TYPES = function() {
    return this.getToken(SqlBaseParser.TYPES, 0);
};

ListTypesContext.prototype.LIST = function() {
    return this.getToken(SqlBaseParser.LIST, 0);
};

ListTypesContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};
ListTypesContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterListTypes(this);
	}
};

ListTypesContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitListTypes(this);
	}
};


function DescribeFunctionContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DescribeFunctionContext.prototype = Object.create(StatementContext.prototype);
DescribeFunctionContext.prototype.constructor = DescribeFunctionContext;

SqlBaseParser.DescribeFunctionContext = DescribeFunctionContext;

DescribeFunctionContext.prototype.DESCRIBE = function() {
    return this.getToken(SqlBaseParser.DESCRIBE, 0);
};

DescribeFunctionContext.prototype.FUNCTION = function() {
    return this.getToken(SqlBaseParser.FUNCTION, 0);
};

DescribeFunctionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
DescribeFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterDescribeFunction(this);
	}
};

DescribeFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitDescribeFunction(this);
	}
};


function RegisterTypeContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RegisterTypeContext.prototype = Object.create(StatementContext.prototype);
RegisterTypeContext.prototype.constructor = RegisterTypeContext;

SqlBaseParser.RegisterTypeContext = RegisterTypeContext;

RegisterTypeContext.prototype.CREATE = function() {
    return this.getToken(SqlBaseParser.CREATE, 0);
};

RegisterTypeContext.prototype.TYPE = function() {
    return this.getToken(SqlBaseParser.TYPE, 0);
};

RegisterTypeContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

RegisterTypeContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};

RegisterTypeContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};
RegisterTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterRegisterType(this);
	}
};

RegisterTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitRegisterType(this);
	}
};


function ListTopicsContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ListTopicsContext.prototype = Object.create(StatementContext.prototype);
ListTopicsContext.prototype.constructor = ListTopicsContext;

SqlBaseParser.ListTopicsContext = ListTopicsContext;

ListTopicsContext.prototype.TOPICS = function() {
    return this.getToken(SqlBaseParser.TOPICS, 0);
};

ListTopicsContext.prototype.LIST = function() {
    return this.getToken(SqlBaseParser.LIST, 0);
};

ListTopicsContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};

ListTopicsContext.prototype.ALL = function() {
    return this.getToken(SqlBaseParser.ALL, 0);
};

ListTopicsContext.prototype.EXTENDED = function() {
    return this.getToken(SqlBaseParser.EXTENDED, 0);
};
ListTopicsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterListTopics(this);
	}
};

ListTopicsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitListTopics(this);
	}
};


function ListQueriesContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ListQueriesContext.prototype = Object.create(StatementContext.prototype);
ListQueriesContext.prototype.constructor = ListQueriesContext;

SqlBaseParser.ListQueriesContext = ListQueriesContext;

ListQueriesContext.prototype.QUERIES = function() {
    return this.getToken(SqlBaseParser.QUERIES, 0);
};

ListQueriesContext.prototype.LIST = function() {
    return this.getToken(SqlBaseParser.LIST, 0);
};

ListQueriesContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};

ListQueriesContext.prototype.EXTENDED = function() {
    return this.getToken(SqlBaseParser.EXTENDED, 0);
};
ListQueriesContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterListQueries(this);
	}
};

ListQueriesContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitListQueries(this);
	}
};


function DropStreamContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DropStreamContext.prototype = Object.create(StatementContext.prototype);
DropStreamContext.prototype.constructor = DropStreamContext;

SqlBaseParser.DropStreamContext = DropStreamContext;

DropStreamContext.prototype.DROP = function() {
    return this.getToken(SqlBaseParser.DROP, 0);
};

DropStreamContext.prototype.STREAM = function() {
    return this.getToken(SqlBaseParser.STREAM, 0);
};

DropStreamContext.prototype.sourceName = function() {
    return this.getTypedRuleContext(SourceNameContext,0);
};

DropStreamContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

DropStreamContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};

DropStreamContext.prototype.DELETE = function() {
    return this.getToken(SqlBaseParser.DELETE, 0);
};

DropStreamContext.prototype.TOPIC = function() {
    return this.getToken(SqlBaseParser.TOPIC, 0);
};
DropStreamContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterDropStream(this);
	}
};

DropStreamContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitDropStream(this);
	}
};


function QueryStatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

QueryStatementContext.prototype = Object.create(StatementContext.prototype);
QueryStatementContext.prototype.constructor = QueryStatementContext;

SqlBaseParser.QueryStatementContext = QueryStatementContext;

QueryStatementContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};
QueryStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterQueryStatement(this);
	}
};

QueryStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitQueryStatement(this);
	}
};


function CreateStreamAsContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CreateStreamAsContext.prototype = Object.create(StatementContext.prototype);
CreateStreamAsContext.prototype.constructor = CreateStreamAsContext;

SqlBaseParser.CreateStreamAsContext = CreateStreamAsContext;

CreateStreamAsContext.prototype.CREATE = function() {
    return this.getToken(SqlBaseParser.CREATE, 0);
};

CreateStreamAsContext.prototype.STREAM = function() {
    return this.getToken(SqlBaseParser.STREAM, 0);
};

CreateStreamAsContext.prototype.sourceName = function() {
    return this.getTypedRuleContext(SourceNameContext,0);
};

CreateStreamAsContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};

CreateStreamAsContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};

CreateStreamAsContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

CreateStreamAsContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};

CreateStreamAsContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};

CreateStreamAsContext.prototype.WITH = function() {
    return this.getToken(SqlBaseParser.WITH, 0);
};

CreateStreamAsContext.prototype.tableProperties = function() {
    return this.getTypedRuleContext(TablePropertiesContext,0);
};
CreateStreamAsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterCreateStreamAs(this);
	}
};

CreateStreamAsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitCreateStreamAs(this);
	}
};


function CreateTableAsContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CreateTableAsContext.prototype = Object.create(StatementContext.prototype);
CreateTableAsContext.prototype.constructor = CreateTableAsContext;

SqlBaseParser.CreateTableAsContext = CreateTableAsContext;

CreateTableAsContext.prototype.CREATE = function() {
    return this.getToken(SqlBaseParser.CREATE, 0);
};

CreateTableAsContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

CreateTableAsContext.prototype.sourceName = function() {
    return this.getTypedRuleContext(SourceNameContext,0);
};

CreateTableAsContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};

CreateTableAsContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};

CreateTableAsContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

CreateTableAsContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};

CreateTableAsContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};

CreateTableAsContext.prototype.WITH = function() {
    return this.getToken(SqlBaseParser.WITH, 0);
};

CreateTableAsContext.prototype.tableProperties = function() {
    return this.getTypedRuleContext(TablePropertiesContext,0);
};
CreateTableAsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterCreateTableAs(this);
	}
};

CreateTableAsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitCreateTableAs(this);
	}
};


function CreateConnectorContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CreateConnectorContext.prototype = Object.create(StatementContext.prototype);
CreateConnectorContext.prototype.constructor = CreateConnectorContext;

SqlBaseParser.CreateConnectorContext = CreateConnectorContext;

CreateConnectorContext.prototype.CREATE = function() {
    return this.getToken(SqlBaseParser.CREATE, 0);
};

CreateConnectorContext.prototype.CONNECTOR = function() {
    return this.getToken(SqlBaseParser.CONNECTOR, 0);
};

CreateConnectorContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

CreateConnectorContext.prototype.WITH = function() {
    return this.getToken(SqlBaseParser.WITH, 0);
};

CreateConnectorContext.prototype.tableProperties = function() {
    return this.getTypedRuleContext(TablePropertiesContext,0);
};

CreateConnectorContext.prototype.SINK = function() {
    return this.getToken(SqlBaseParser.SINK, 0);
};

CreateConnectorContext.prototype.SOURCE = function() {
    return this.getToken(SqlBaseParser.SOURCE, 0);
};
CreateConnectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterCreateConnector(this);
	}
};

CreateConnectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitCreateConnector(this);
	}
};


function CreateStreamContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CreateStreamContext.prototype = Object.create(StatementContext.prototype);
CreateStreamContext.prototype.constructor = CreateStreamContext;

SqlBaseParser.CreateStreamContext = CreateStreamContext;

CreateStreamContext.prototype.CREATE = function() {
    return this.getToken(SqlBaseParser.CREATE, 0);
};

CreateStreamContext.prototype.STREAM = function() {
    return this.getToken(SqlBaseParser.STREAM, 0);
};

CreateStreamContext.prototype.sourceName = function() {
    return this.getTypedRuleContext(SourceNameContext,0);
};

CreateStreamContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

CreateStreamContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};

CreateStreamContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};

CreateStreamContext.prototype.tableElements = function() {
    return this.getTypedRuleContext(TableElementsContext,0);
};

CreateStreamContext.prototype.WITH = function() {
    return this.getToken(SqlBaseParser.WITH, 0);
};

CreateStreamContext.prototype.tableProperties = function() {
    return this.getTypedRuleContext(TablePropertiesContext,0);
};
CreateStreamContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterCreateStream(this);
	}
};

CreateStreamContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitCreateStream(this);
	}
};


function ListConnectorsContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ListConnectorsContext.prototype = Object.create(StatementContext.prototype);
ListConnectorsContext.prototype.constructor = ListConnectorsContext;

SqlBaseParser.ListConnectorsContext = ListConnectorsContext;

ListConnectorsContext.prototype.CONNECTORS = function() {
    return this.getToken(SqlBaseParser.CONNECTORS, 0);
};

ListConnectorsContext.prototype.LIST = function() {
    return this.getToken(SqlBaseParser.LIST, 0);
};

ListConnectorsContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};

ListConnectorsContext.prototype.SOURCE = function() {
    return this.getToken(SqlBaseParser.SOURCE, 0);
};

ListConnectorsContext.prototype.SINK = function() {
    return this.getToken(SqlBaseParser.SINK, 0);
};
ListConnectorsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterListConnectors(this);
	}
};

ListConnectorsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitListConnectors(this);
	}
};


function ListStreamsContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ListStreamsContext.prototype = Object.create(StatementContext.prototype);
ListStreamsContext.prototype.constructor = ListStreamsContext;

SqlBaseParser.ListStreamsContext = ListStreamsContext;

ListStreamsContext.prototype.STREAMS = function() {
    return this.getToken(SqlBaseParser.STREAMS, 0);
};

ListStreamsContext.prototype.LIST = function() {
    return this.getToken(SqlBaseParser.LIST, 0);
};

ListStreamsContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};

ListStreamsContext.prototype.EXTENDED = function() {
    return this.getToken(SqlBaseParser.EXTENDED, 0);
};
ListStreamsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterListStreams(this);
	}
};

ListStreamsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitListStreams(this);
	}
};


function ShowColumnsContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShowColumnsContext.prototype = Object.create(StatementContext.prototype);
ShowColumnsContext.prototype.constructor = ShowColumnsContext;

SqlBaseParser.ShowColumnsContext = ShowColumnsContext;

ShowColumnsContext.prototype.DESCRIBE = function() {
    return this.getToken(SqlBaseParser.DESCRIBE, 0);
};

ShowColumnsContext.prototype.sourceName = function() {
    return this.getTypedRuleContext(SourceNameContext,0);
};

ShowColumnsContext.prototype.EXTENDED = function() {
    return this.getToken(SqlBaseParser.EXTENDED, 0);
};
ShowColumnsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterShowColumns(this);
	}
};

ShowColumnsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitShowColumns(this);
	}
};


function DropTableContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DropTableContext.prototype = Object.create(StatementContext.prototype);
DropTableContext.prototype.constructor = DropTableContext;

SqlBaseParser.DropTableContext = DropTableContext;

DropTableContext.prototype.DROP = function() {
    return this.getToken(SqlBaseParser.DROP, 0);
};

DropTableContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

DropTableContext.prototype.sourceName = function() {
    return this.getTypedRuleContext(SourceNameContext,0);
};

DropTableContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

DropTableContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};

DropTableContext.prototype.DELETE = function() {
    return this.getToken(SqlBaseParser.DELETE, 0);
};

DropTableContext.prototype.TOPIC = function() {
    return this.getToken(SqlBaseParser.TOPIC, 0);
};
DropTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterDropTable(this);
	}
};

DropTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitDropTable(this);
	}
};


function DropConnectorContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DropConnectorContext.prototype = Object.create(StatementContext.prototype);
DropConnectorContext.prototype.constructor = DropConnectorContext;

SqlBaseParser.DropConnectorContext = DropConnectorContext;

DropConnectorContext.prototype.DROP = function() {
    return this.getToken(SqlBaseParser.DROP, 0);
};

DropConnectorContext.prototype.CONNECTOR = function() {
    return this.getToken(SqlBaseParser.CONNECTOR, 0);
};

DropConnectorContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
DropConnectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterDropConnector(this);
	}
};

DropConnectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitDropConnector(this);
	}
};


function ListFunctionsContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ListFunctionsContext.prototype = Object.create(StatementContext.prototype);
ListFunctionsContext.prototype.constructor = ListFunctionsContext;

SqlBaseParser.ListFunctionsContext = ListFunctionsContext;

ListFunctionsContext.prototype.FUNCTIONS = function() {
    return this.getToken(SqlBaseParser.FUNCTIONS, 0);
};

ListFunctionsContext.prototype.LIST = function() {
    return this.getToken(SqlBaseParser.LIST, 0);
};

ListFunctionsContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};
ListFunctionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterListFunctions(this);
	}
};

ListFunctionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitListFunctions(this);
	}
};


function DescribeConnectorContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DescribeConnectorContext.prototype = Object.create(StatementContext.prototype);
DescribeConnectorContext.prototype.constructor = DescribeConnectorContext;

SqlBaseParser.DescribeConnectorContext = DescribeConnectorContext;

DescribeConnectorContext.prototype.DESCRIBE = function() {
    return this.getToken(SqlBaseParser.DESCRIBE, 0);
};

DescribeConnectorContext.prototype.CONNECTOR = function() {
    return this.getToken(SqlBaseParser.CONNECTOR, 0);
};

DescribeConnectorContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
DescribeConnectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterDescribeConnector(this);
	}
};

DescribeConnectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitDescribeConnector(this);
	}
};


function InsertIntoContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InsertIntoContext.prototype = Object.create(StatementContext.prototype);
InsertIntoContext.prototype.constructor = InsertIntoContext;

SqlBaseParser.InsertIntoContext = InsertIntoContext;

InsertIntoContext.prototype.INSERT = function() {
    return this.getToken(SqlBaseParser.INSERT, 0);
};

InsertIntoContext.prototype.INTO = function() {
    return this.getToken(SqlBaseParser.INTO, 0);
};

InsertIntoContext.prototype.sourceName = function() {
    return this.getTypedRuleContext(SourceNameContext,0);
};

InsertIntoContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};
InsertIntoContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterInsertInto(this);
	}
};

InsertIntoContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitInsertInto(this);
	}
};


function PrintTopicContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PrintTopicContext.prototype = Object.create(StatementContext.prototype);
PrintTopicContext.prototype.constructor = PrintTopicContext;

SqlBaseParser.PrintTopicContext = PrintTopicContext;

PrintTopicContext.prototype.PRINT = function() {
    return this.getToken(SqlBaseParser.PRINT, 0);
};

PrintTopicContext.prototype.printClause = function() {
    return this.getTypedRuleContext(PrintClauseContext,0);
};

PrintTopicContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

PrintTopicContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};
PrintTopicContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterPrintTopic(this);
	}
};

PrintTopicContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitPrintTopic(this);
	}
};


function ListPropertiesContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ListPropertiesContext.prototype = Object.create(StatementContext.prototype);
ListPropertiesContext.prototype.constructor = ListPropertiesContext;

SqlBaseParser.ListPropertiesContext = ListPropertiesContext;

ListPropertiesContext.prototype.PROPERTIES = function() {
    return this.getToken(SqlBaseParser.PROPERTIES, 0);
};

ListPropertiesContext.prototype.LIST = function() {
    return this.getToken(SqlBaseParser.LIST, 0);
};

ListPropertiesContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};
ListPropertiesContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterListProperties(this);
	}
};

ListPropertiesContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitListProperties(this);
	}
};


function DropTypeContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DropTypeContext.prototype = Object.create(StatementContext.prototype);
DropTypeContext.prototype.constructor = DropTypeContext;

SqlBaseParser.DropTypeContext = DropTypeContext;

DropTypeContext.prototype.DROP = function() {
    return this.getToken(SqlBaseParser.DROP, 0);
};

DropTypeContext.prototype.TYPE = function() {
    return this.getToken(SqlBaseParser.TYPE, 0);
};

DropTypeContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
DropTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterDropType(this);
	}
};

DropTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitDropType(this);
	}
};


function SetPropertyContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SetPropertyContext.prototype = Object.create(StatementContext.prototype);
SetPropertyContext.prototype.constructor = SetPropertyContext;

SqlBaseParser.SetPropertyContext = SetPropertyContext;

SetPropertyContext.prototype.SET = function() {
    return this.getToken(SqlBaseParser.SET, 0);
};

SetPropertyContext.prototype.STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.STRING);
    } else {
        return this.getToken(SqlBaseParser.STRING, i);
    }
};


SetPropertyContext.prototype.EQ = function() {
    return this.getToken(SqlBaseParser.EQ, 0);
};
SetPropertyContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterSetProperty(this);
	}
};

SetPropertyContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitSetProperty(this);
	}
};


function TerminateQueryContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TerminateQueryContext.prototype = Object.create(StatementContext.prototype);
TerminateQueryContext.prototype.constructor = TerminateQueryContext;

SqlBaseParser.TerminateQueryContext = TerminateQueryContext;

TerminateQueryContext.prototype.TERMINATE = function() {
    return this.getToken(SqlBaseParser.TERMINATE, 0);
};

TerminateQueryContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

TerminateQueryContext.prototype.ALL = function() {
    return this.getToken(SqlBaseParser.ALL, 0);
};
TerminateQueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterTerminateQuery(this);
	}
};

TerminateQueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitTerminateQuery(this);
	}
};


function InsertValuesContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InsertValuesContext.prototype = Object.create(StatementContext.prototype);
InsertValuesContext.prototype.constructor = InsertValuesContext;

SqlBaseParser.InsertValuesContext = InsertValuesContext;

InsertValuesContext.prototype.INSERT = function() {
    return this.getToken(SqlBaseParser.INSERT, 0);
};

InsertValuesContext.prototype.INTO = function() {
    return this.getToken(SqlBaseParser.INTO, 0);
};

InsertValuesContext.prototype.sourceName = function() {
    return this.getTypedRuleContext(SourceNameContext,0);
};

InsertValuesContext.prototype.VALUES = function() {
    return this.getToken(SqlBaseParser.VALUES, 0);
};

InsertValuesContext.prototype.values = function() {
    return this.getTypedRuleContext(ValuesContext,0);
};

InsertValuesContext.prototype.columns = function() {
    return this.getTypedRuleContext(ColumnsContext,0);
};
InsertValuesContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterInsertValues(this);
	}
};

InsertValuesContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitInsertValues(this);
	}
};



SqlBaseParser.StatementContext = StatementContext;

SqlBaseParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, SqlBaseParser.RULE_statement);
    var _la = 0; // Token type
    try {
        this.state = 300;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
        switch(la_) {
        case 1:
            localctx = new QueryStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 118;
            this.query();
            break;

        case 2:
            localctx = new ListPropertiesContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 119;
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.SHOW || _la===SqlBaseParser.LIST)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 120;
            this.match(SqlBaseParser.PROPERTIES);
            break;

        case 3:
            localctx = new ListTopicsContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 121;
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.SHOW || _la===SqlBaseParser.LIST)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 123;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.ALL) {
                this.state = 122;
                this.match(SqlBaseParser.ALL);
            }

            this.state = 125;
            this.match(SqlBaseParser.TOPICS);
            this.state = 127;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.EXTENDED) {
                this.state = 126;
                this.match(SqlBaseParser.EXTENDED);
            }

            break;

        case 4:
            localctx = new ListStreamsContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 129;
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.SHOW || _la===SqlBaseParser.LIST)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 130;
            this.match(SqlBaseParser.STREAMS);
            this.state = 132;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.EXTENDED) {
                this.state = 131;
                this.match(SqlBaseParser.EXTENDED);
            }

            break;

        case 5:
            localctx = new ListTablesContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 134;
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.SHOW || _la===SqlBaseParser.LIST)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 135;
            this.match(SqlBaseParser.TABLES);
            this.state = 137;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.EXTENDED) {
                this.state = 136;
                this.match(SqlBaseParser.EXTENDED);
            }

            break;

        case 6:
            localctx = new ListFunctionsContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 139;
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.SHOW || _la===SqlBaseParser.LIST)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 140;
            this.match(SqlBaseParser.FUNCTIONS);
            break;

        case 7:
            localctx = new ListConnectorsContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 141;
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.SHOW || _la===SqlBaseParser.LIST)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 143;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.SINK || _la===SqlBaseParser.SOURCE) {
                this.state = 142;
                _la = this._input.LA(1);
                if(!(_la===SqlBaseParser.SINK || _la===SqlBaseParser.SOURCE)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 145;
            this.match(SqlBaseParser.CONNECTORS);
            break;

        case 8:
            localctx = new ListTypesContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 146;
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.SHOW || _la===SqlBaseParser.LIST)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 147;
            this.match(SqlBaseParser.TYPES);
            break;

        case 9:
            localctx = new ShowColumnsContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 148;
            this.match(SqlBaseParser.DESCRIBE);
            this.state = 150;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.EXTENDED) {
                this.state = 149;
                this.match(SqlBaseParser.EXTENDED);
            }

            this.state = 152;
            this.sourceName();
            break;

        case 10:
            localctx = new DescribeFunctionContext(this, localctx);
            this.enterOuterAlt(localctx, 10);
            this.state = 153;
            this.match(SqlBaseParser.DESCRIBE);
            this.state = 154;
            this.match(SqlBaseParser.FUNCTION);
            this.state = 155;
            this.identifier();
            break;

        case 11:
            localctx = new DescribeConnectorContext(this, localctx);
            this.enterOuterAlt(localctx, 11);
            this.state = 156;
            this.match(SqlBaseParser.DESCRIBE);
            this.state = 157;
            this.match(SqlBaseParser.CONNECTOR);
            this.state = 158;
            this.identifier();
            break;

        case 12:
            localctx = new PrintTopicContext(this, localctx);
            this.enterOuterAlt(localctx, 12);
            this.state = 159;
            this.match(SqlBaseParser.PRINT);
            this.state = 162;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case SqlBaseParser.EMIT:
            case SqlBaseParser.CHANGES:
            case SqlBaseParser.ESCAPE:
            case SqlBaseParser.INTEGER:
            case SqlBaseParser.DATE:
            case SqlBaseParser.TIME:
            case SqlBaseParser.TIMESTAMP:
            case SqlBaseParser.INTERVAL:
            case SqlBaseParser.YEAR:
            case SqlBaseParser.MONTH:
            case SqlBaseParser.DAY:
            case SqlBaseParser.HOUR:
            case SqlBaseParser.MINUTE:
            case SqlBaseParser.SECOND:
            case SqlBaseParser.ZONE:
            case SqlBaseParser.PARTITION:
            case SqlBaseParser.STRUCT:
            case SqlBaseParser.EXPLAIN:
            case SqlBaseParser.ANALYZE:
            case SqlBaseParser.TYPE:
            case SqlBaseParser.TYPES:
            case SqlBaseParser.SHOW:
            case SqlBaseParser.TABLES:
            case SqlBaseParser.COLUMNS:
            case SqlBaseParser.COLUMN:
            case SqlBaseParser.PARTITIONS:
            case SqlBaseParser.FUNCTIONS:
            case SqlBaseParser.FUNCTION:
            case SqlBaseParser.ARRAY:
            case SqlBaseParser.MAP:
            case SqlBaseParser.SET:
            case SqlBaseParser.RESET:
            case SqlBaseParser.SESSION:
            case SqlBaseParser.KEY:
            case SqlBaseParser.SINK:
            case SqlBaseParser.SOURCE:
            case SqlBaseParser.PRIMARY:
            case SqlBaseParser.IF:
            case SqlBaseParser.IDENTIFIER:
            case SqlBaseParser.DIGIT_IDENTIFIER:
            case SqlBaseParser.QUOTED_IDENTIFIER:
            case SqlBaseParser.BACKQUOTED_IDENTIFIER:
                this.state = 160;
                this.identifier();
                break;
            case SqlBaseParser.STRING:
                this.state = 161;
                this.match(SqlBaseParser.STRING);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 164;
            this.printClause();
            break;

        case 13:
            localctx = new ListQueriesContext(this, localctx);
            this.enterOuterAlt(localctx, 13);
            this.state = 165;
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.SHOW || _la===SqlBaseParser.LIST)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 166;
            this.match(SqlBaseParser.QUERIES);
            this.state = 168;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.EXTENDED) {
                this.state = 167;
                this.match(SqlBaseParser.EXTENDED);
            }

            break;

        case 14:
            localctx = new TerminateQueryContext(this, localctx);
            this.enterOuterAlt(localctx, 14);
            this.state = 170;
            this.match(SqlBaseParser.TERMINATE);
            this.state = 171;
            this.identifier();
            break;

        case 15:
            localctx = new TerminateQueryContext(this, localctx);
            this.enterOuterAlt(localctx, 15);
            this.state = 172;
            this.match(SqlBaseParser.TERMINATE);
            this.state = 173;
            this.match(SqlBaseParser.ALL);
            break;

        case 16:
            localctx = new SetPropertyContext(this, localctx);
            this.enterOuterAlt(localctx, 16);
            this.state = 174;
            this.match(SqlBaseParser.SET);
            this.state = 175;
            this.match(SqlBaseParser.STRING);
            this.state = 176;
            this.match(SqlBaseParser.EQ);
            this.state = 177;
            this.match(SqlBaseParser.STRING);
            break;

        case 17:
            localctx = new UnsetPropertyContext(this, localctx);
            this.enterOuterAlt(localctx, 17);
            this.state = 178;
            this.match(SqlBaseParser.UNSET);
            this.state = 179;
            this.match(SqlBaseParser.STRING);
            break;

        case 18:
            localctx = new CreateStreamContext(this, localctx);
            this.enterOuterAlt(localctx, 18);
            this.state = 180;
            this.match(SqlBaseParser.CREATE);
            this.state = 181;
            this.match(SqlBaseParser.STREAM);
            this.state = 185;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
            if(la_===1) {
                this.state = 182;
                this.match(SqlBaseParser.IF);
                this.state = 183;
                this.match(SqlBaseParser.NOT);
                this.state = 184;
                this.match(SqlBaseParser.EXISTS);

            }
            this.state = 187;
            this.sourceName();
            this.state = 189;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.T__2) {
                this.state = 188;
                this.tableElements();
            }

            this.state = 193;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.WITH) {
                this.state = 191;
                this.match(SqlBaseParser.WITH);
                this.state = 192;
                this.tableProperties();
            }

            break;

        case 19:
            localctx = new CreateStreamAsContext(this, localctx);
            this.enterOuterAlt(localctx, 19);
            this.state = 195;
            this.match(SqlBaseParser.CREATE);
            this.state = 196;
            this.match(SqlBaseParser.STREAM);
            this.state = 200;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
            if(la_===1) {
                this.state = 197;
                this.match(SqlBaseParser.IF);
                this.state = 198;
                this.match(SqlBaseParser.NOT);
                this.state = 199;
                this.match(SqlBaseParser.EXISTS);

            }
            this.state = 202;
            this.sourceName();
            this.state = 205;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.WITH) {
                this.state = 203;
                this.match(SqlBaseParser.WITH);
                this.state = 204;
                this.tableProperties();
            }

            this.state = 207;
            this.match(SqlBaseParser.AS);
            this.state = 208;
            this.query();
            break;

        case 20:
            localctx = new CreateTableContext(this, localctx);
            this.enterOuterAlt(localctx, 20);
            this.state = 210;
            this.match(SqlBaseParser.CREATE);
            this.state = 211;
            this.match(SqlBaseParser.TABLE);
            this.state = 215;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
            if(la_===1) {
                this.state = 212;
                this.match(SqlBaseParser.IF);
                this.state = 213;
                this.match(SqlBaseParser.NOT);
                this.state = 214;
                this.match(SqlBaseParser.EXISTS);

            }
            this.state = 217;
            this.sourceName();
            this.state = 219;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.T__2) {
                this.state = 218;
                this.tableElements();
            }

            this.state = 223;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.WITH) {
                this.state = 221;
                this.match(SqlBaseParser.WITH);
                this.state = 222;
                this.tableProperties();
            }

            break;

        case 21:
            localctx = new CreateTableAsContext(this, localctx);
            this.enterOuterAlt(localctx, 21);
            this.state = 225;
            this.match(SqlBaseParser.CREATE);
            this.state = 226;
            this.match(SqlBaseParser.TABLE);
            this.state = 230;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
            if(la_===1) {
                this.state = 227;
                this.match(SqlBaseParser.IF);
                this.state = 228;
                this.match(SqlBaseParser.NOT);
                this.state = 229;
                this.match(SqlBaseParser.EXISTS);

            }
            this.state = 232;
            this.sourceName();
            this.state = 235;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.WITH) {
                this.state = 233;
                this.match(SqlBaseParser.WITH);
                this.state = 234;
                this.tableProperties();
            }

            this.state = 237;
            this.match(SqlBaseParser.AS);
            this.state = 238;
            this.query();
            break;

        case 22:
            localctx = new CreateConnectorContext(this, localctx);
            this.enterOuterAlt(localctx, 22);
            this.state = 240;
            this.match(SqlBaseParser.CREATE);
            this.state = 241;
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.SINK || _la===SqlBaseParser.SOURCE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 242;
            this.match(SqlBaseParser.CONNECTOR);
            this.state = 243;
            this.identifier();
            this.state = 244;
            this.match(SqlBaseParser.WITH);
            this.state = 245;
            this.tableProperties();
            break;

        case 23:
            localctx = new InsertIntoContext(this, localctx);
            this.enterOuterAlt(localctx, 23);
            this.state = 247;
            this.match(SqlBaseParser.INSERT);
            this.state = 248;
            this.match(SqlBaseParser.INTO);
            this.state = 249;
            this.sourceName();
            this.state = 250;
            this.query();
            break;

        case 24:
            localctx = new InsertValuesContext(this, localctx);
            this.enterOuterAlt(localctx, 24);
            this.state = 252;
            this.match(SqlBaseParser.INSERT);
            this.state = 253;
            this.match(SqlBaseParser.INTO);
            this.state = 254;
            this.sourceName();
            this.state = 256;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.T__2) {
                this.state = 255;
                this.columns();
            }

            this.state = 258;
            this.match(SqlBaseParser.VALUES);
            this.state = 259;
            this.values();
            break;

        case 25:
            localctx = new DropStreamContext(this, localctx);
            this.enterOuterAlt(localctx, 25);
            this.state = 261;
            this.match(SqlBaseParser.DROP);
            this.state = 262;
            this.match(SqlBaseParser.STREAM);
            this.state = 265;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
            if(la_===1) {
                this.state = 263;
                this.match(SqlBaseParser.IF);
                this.state = 264;
                this.match(SqlBaseParser.EXISTS);

            }
            this.state = 267;
            this.sourceName();
            this.state = 270;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.DELETE) {
                this.state = 268;
                this.match(SqlBaseParser.DELETE);
                this.state = 269;
                this.match(SqlBaseParser.TOPIC);
            }

            break;

        case 26:
            localctx = new DropTableContext(this, localctx);
            this.enterOuterAlt(localctx, 26);
            this.state = 272;
            this.match(SqlBaseParser.DROP);
            this.state = 273;
            this.match(SqlBaseParser.TABLE);
            this.state = 276;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
            if(la_===1) {
                this.state = 274;
                this.match(SqlBaseParser.IF);
                this.state = 275;
                this.match(SqlBaseParser.EXISTS);

            }
            this.state = 278;
            this.sourceName();
            this.state = 281;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.DELETE) {
                this.state = 279;
                this.match(SqlBaseParser.DELETE);
                this.state = 280;
                this.match(SqlBaseParser.TOPIC);
            }

            break;

        case 27:
            localctx = new DropConnectorContext(this, localctx);
            this.enterOuterAlt(localctx, 27);
            this.state = 283;
            this.match(SqlBaseParser.DROP);
            this.state = 284;
            this.match(SqlBaseParser.CONNECTOR);
            this.state = 285;
            this.identifier();
            break;

        case 28:
            localctx = new ExplainContext(this, localctx);
            this.enterOuterAlt(localctx, 28);
            this.state = 286;
            this.match(SqlBaseParser.EXPLAIN);
            this.state = 289;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
            switch(la_) {
            case 1:
                this.state = 287;
                this.statement();
                break;

            case 2:
                this.state = 288;
                this.identifier();
                break;

            }
            break;

        case 29:
            localctx = new RegisterTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 29);
            this.state = 291;
            this.match(SqlBaseParser.CREATE);
            this.state = 292;
            this.match(SqlBaseParser.TYPE);
            this.state = 293;
            this.identifier();
            this.state = 294;
            this.match(SqlBaseParser.AS);
            this.state = 295;
            this.type(0);
            break;

        case 30:
            localctx = new DropTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 30);
            this.state = 297;
            this.match(SqlBaseParser.DROP);
            this.state = 298;
            this.match(SqlBaseParser.TYPE);
            this.state = 299;
            this.identifier();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_query;
    this.from = null; // RelationContext
    this.where = null; // BooleanExpressionContext
    this.having = null; // BooleanExpressionContext
    return this;
}

QueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryContext.prototype.constructor = QueryContext;

QueryContext.prototype.SELECT = function() {
    return this.getToken(SqlBaseParser.SELECT, 0);
};

QueryContext.prototype.selectItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SelectItemContext);
    } else {
        return this.getTypedRuleContext(SelectItemContext,i);
    }
};

QueryContext.prototype.FROM = function() {
    return this.getToken(SqlBaseParser.FROM, 0);
};

QueryContext.prototype.relation = function() {
    return this.getTypedRuleContext(RelationContext,0);
};

QueryContext.prototype.WINDOW = function() {
    return this.getToken(SqlBaseParser.WINDOW, 0);
};

QueryContext.prototype.windowExpression = function() {
    return this.getTypedRuleContext(WindowExpressionContext,0);
};

QueryContext.prototype.WHERE = function() {
    return this.getToken(SqlBaseParser.WHERE, 0);
};

QueryContext.prototype.GROUP = function() {
    return this.getToken(SqlBaseParser.GROUP, 0);
};

QueryContext.prototype.BY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.BY);
    } else {
        return this.getToken(SqlBaseParser.BY, i);
    }
};


QueryContext.prototype.groupBy = function() {
    return this.getTypedRuleContext(GroupByContext,0);
};

QueryContext.prototype.PARTITION = function() {
    return this.getToken(SqlBaseParser.PARTITION, 0);
};

QueryContext.prototype.partitionBy = function() {
    return this.getTypedRuleContext(PartitionByContext,0);
};

QueryContext.prototype.HAVING = function() {
    return this.getToken(SqlBaseParser.HAVING, 0);
};

QueryContext.prototype.EMIT = function() {
    return this.getToken(SqlBaseParser.EMIT, 0);
};

QueryContext.prototype.resultMaterialization = function() {
    return this.getTypedRuleContext(ResultMaterializationContext,0);
};

QueryContext.prototype.limitClause = function() {
    return this.getTypedRuleContext(LimitClauseContext,0);
};

QueryContext.prototype.booleanExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BooleanExpressionContext);
    } else {
        return this.getTypedRuleContext(BooleanExpressionContext,i);
    }
};

QueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterQuery(this);
	}
};

QueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitQuery(this);
	}
};




SqlBaseParser.QueryContext = QueryContext;

SqlBaseParser.prototype.query = function() {

    var localctx = new QueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, SqlBaseParser.RULE_query);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 302;
        this.match(SqlBaseParser.SELECT);
        this.state = 303;
        this.selectItem();
        this.state = 308;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SqlBaseParser.T__1) {
            this.state = 304;
            this.match(SqlBaseParser.T__1);
            this.state = 305;
            this.selectItem();
            this.state = 310;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 311;
        this.match(SqlBaseParser.FROM);
        this.state = 312;
        localctx.from = this.relation();
        this.state = 315;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.WINDOW) {
            this.state = 313;
            this.match(SqlBaseParser.WINDOW);
            this.state = 314;
            this.windowExpression();
        }

        this.state = 319;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.WHERE) {
            this.state = 317;
            this.match(SqlBaseParser.WHERE);
            this.state = 318;
            localctx.where = this.booleanExpression(0);
        }

        this.state = 324;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.GROUP) {
            this.state = 321;
            this.match(SqlBaseParser.GROUP);
            this.state = 322;
            this.match(SqlBaseParser.BY);
            this.state = 323;
            this.groupBy();
        }

        this.state = 329;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.PARTITION) {
            this.state = 326;
            this.match(SqlBaseParser.PARTITION);
            this.state = 327;
            this.match(SqlBaseParser.BY);
            this.state = 328;
            this.partitionBy();
        }

        this.state = 333;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.HAVING) {
            this.state = 331;
            this.match(SqlBaseParser.HAVING);
            this.state = 332;
            localctx.having = this.booleanExpression(0);
        }

        this.state = 337;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.EMIT) {
            this.state = 335;
            this.match(SqlBaseParser.EMIT);
            this.state = 336;
            this.resultMaterialization();
        }

        this.state = 340;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.LIMIT) {
            this.state = 339;
            this.limitClause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ResultMaterializationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_resultMaterialization;
    return this;
}

ResultMaterializationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ResultMaterializationContext.prototype.constructor = ResultMaterializationContext;

ResultMaterializationContext.prototype.CHANGES = function() {
    return this.getToken(SqlBaseParser.CHANGES, 0);
};

ResultMaterializationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterResultMaterialization(this);
	}
};

ResultMaterializationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitResultMaterialization(this);
	}
};




SqlBaseParser.ResultMaterializationContext = ResultMaterializationContext;

SqlBaseParser.prototype.resultMaterialization = function() {

    var localctx = new ResultMaterializationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, SqlBaseParser.RULE_resultMaterialization);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 342;
        this.match(SqlBaseParser.CHANGES);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableElementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_tableElements;
    return this;
}

TableElementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableElementsContext.prototype.constructor = TableElementsContext;

TableElementsContext.prototype.tableElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TableElementContext);
    } else {
        return this.getTypedRuleContext(TableElementContext,i);
    }
};

TableElementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterTableElements(this);
	}
};

TableElementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitTableElements(this);
	}
};




SqlBaseParser.TableElementsContext = TableElementsContext;

SqlBaseParser.prototype.tableElements = function() {

    var localctx = new TableElementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, SqlBaseParser.RULE_tableElements);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 344;
        this.match(SqlBaseParser.T__2);
        this.state = 345;
        this.tableElement();
        this.state = 350;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SqlBaseParser.T__1) {
            this.state = 346;
            this.match(SqlBaseParser.T__1);
            this.state = 347;
            this.tableElement();
            this.state = 352;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 353;
        this.match(SqlBaseParser.T__3);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_tableElement;
    return this;
}

TableElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableElementContext.prototype.constructor = TableElementContext;

TableElementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

TableElementContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

TableElementContext.prototype.KEY = function() {
    return this.getToken(SqlBaseParser.KEY, 0);
};

TableElementContext.prototype.PRIMARY = function() {
    return this.getToken(SqlBaseParser.PRIMARY, 0);
};

TableElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterTableElement(this);
	}
};

TableElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitTableElement(this);
	}
};




SqlBaseParser.TableElementContext = TableElementContext;

SqlBaseParser.prototype.tableElement = function() {

    var localctx = new TableElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, SqlBaseParser.RULE_tableElement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 355;
        this.identifier();
        this.state = 356;
        this.type(0);
        this.state = 361;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.KEY || _la===SqlBaseParser.PRIMARY) {
            this.state = 358;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.PRIMARY) {
                this.state = 357;
                this.match(SqlBaseParser.PRIMARY);
            }

            this.state = 360;
            this.match(SqlBaseParser.KEY);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TablePropertiesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_tableProperties;
    return this;
}

TablePropertiesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TablePropertiesContext.prototype.constructor = TablePropertiesContext;

TablePropertiesContext.prototype.tableProperty = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TablePropertyContext);
    } else {
        return this.getTypedRuleContext(TablePropertyContext,i);
    }
};

TablePropertiesContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterTableProperties(this);
	}
};

TablePropertiesContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitTableProperties(this);
	}
};




SqlBaseParser.TablePropertiesContext = TablePropertiesContext;

SqlBaseParser.prototype.tableProperties = function() {

    var localctx = new TablePropertiesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, SqlBaseParser.RULE_tableProperties);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 363;
        this.match(SqlBaseParser.T__2);
        this.state = 364;
        this.tableProperty();
        this.state = 369;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SqlBaseParser.T__1) {
            this.state = 365;
            this.match(SqlBaseParser.T__1);
            this.state = 366;
            this.tableProperty();
            this.state = 371;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 372;
        this.match(SqlBaseParser.T__3);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TablePropertyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_tableProperty;
    return this;
}

TablePropertyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TablePropertyContext.prototype.constructor = TablePropertyContext;

TablePropertyContext.prototype.EQ = function() {
    return this.getToken(SqlBaseParser.EQ, 0);
};

TablePropertyContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

TablePropertyContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

TablePropertyContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};

TablePropertyContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterTableProperty(this);
	}
};

TablePropertyContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitTableProperty(this);
	}
};




SqlBaseParser.TablePropertyContext = TablePropertyContext;

SqlBaseParser.prototype.tableProperty = function() {

    var localctx = new TablePropertyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, SqlBaseParser.RULE_tableProperty);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 376;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.EMIT:
        case SqlBaseParser.CHANGES:
        case SqlBaseParser.ESCAPE:
        case SqlBaseParser.INTEGER:
        case SqlBaseParser.DATE:
        case SqlBaseParser.TIME:
        case SqlBaseParser.TIMESTAMP:
        case SqlBaseParser.INTERVAL:
        case SqlBaseParser.YEAR:
        case SqlBaseParser.MONTH:
        case SqlBaseParser.DAY:
        case SqlBaseParser.HOUR:
        case SqlBaseParser.MINUTE:
        case SqlBaseParser.SECOND:
        case SqlBaseParser.ZONE:
        case SqlBaseParser.PARTITION:
        case SqlBaseParser.STRUCT:
        case SqlBaseParser.EXPLAIN:
        case SqlBaseParser.ANALYZE:
        case SqlBaseParser.TYPE:
        case SqlBaseParser.TYPES:
        case SqlBaseParser.SHOW:
        case SqlBaseParser.TABLES:
        case SqlBaseParser.COLUMNS:
        case SqlBaseParser.COLUMN:
        case SqlBaseParser.PARTITIONS:
        case SqlBaseParser.FUNCTIONS:
        case SqlBaseParser.FUNCTION:
        case SqlBaseParser.ARRAY:
        case SqlBaseParser.MAP:
        case SqlBaseParser.SET:
        case SqlBaseParser.RESET:
        case SqlBaseParser.SESSION:
        case SqlBaseParser.KEY:
        case SqlBaseParser.SINK:
        case SqlBaseParser.SOURCE:
        case SqlBaseParser.PRIMARY:
        case SqlBaseParser.IF:
        case SqlBaseParser.IDENTIFIER:
        case SqlBaseParser.DIGIT_IDENTIFIER:
        case SqlBaseParser.QUOTED_IDENTIFIER:
        case SqlBaseParser.BACKQUOTED_IDENTIFIER:
            this.state = 374;
            this.identifier();
            break;
        case SqlBaseParser.STRING:
            this.state = 375;
            this.match(SqlBaseParser.STRING);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 378;
        this.match(SqlBaseParser.EQ);
        this.state = 379;
        this.literal();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PrintClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_printClause;
    return this;
}

PrintClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrintClauseContext.prototype.constructor = PrintClauseContext;

PrintClauseContext.prototype.FROM = function() {
    return this.getToken(SqlBaseParser.FROM, 0);
};

PrintClauseContext.prototype.BEGINNING = function() {
    return this.getToken(SqlBaseParser.BEGINNING, 0);
};

PrintClauseContext.prototype.intervalClause = function() {
    return this.getTypedRuleContext(IntervalClauseContext,0);
};

PrintClauseContext.prototype.limitClause = function() {
    return this.getTypedRuleContext(LimitClauseContext,0);
};

PrintClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterPrintClause(this);
	}
};

PrintClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitPrintClause(this);
	}
};




SqlBaseParser.PrintClauseContext = PrintClauseContext;

SqlBaseParser.prototype.printClause = function() {

    var localctx = new PrintClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, SqlBaseParser.RULE_printClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 383;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.FROM) {
            this.state = 381;
            this.match(SqlBaseParser.FROM);
            this.state = 382;
            this.match(SqlBaseParser.BEGINNING);
        }

        this.state = 386;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.INTERVAL || _la===SqlBaseParser.SAMPLE) {
            this.state = 385;
            this.intervalClause();
        }

        this.state = 389;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.LIMIT) {
            this.state = 388;
            this.limitClause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IntervalClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_intervalClause;
    return this;
}

IntervalClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntervalClauseContext.prototype.constructor = IntervalClauseContext;

IntervalClauseContext.prototype.number = function() {
    return this.getTypedRuleContext(NumberContext,0);
};

IntervalClauseContext.prototype.INTERVAL = function() {
    return this.getToken(SqlBaseParser.INTERVAL, 0);
};

IntervalClauseContext.prototype.SAMPLE = function() {
    return this.getToken(SqlBaseParser.SAMPLE, 0);
};

IntervalClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterIntervalClause(this);
	}
};

IntervalClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitIntervalClause(this);
	}
};




SqlBaseParser.IntervalClauseContext = IntervalClauseContext;

SqlBaseParser.prototype.intervalClause = function() {

    var localctx = new IntervalClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, SqlBaseParser.RULE_intervalClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 391;
        _la = this._input.LA(1);
        if(!(_la===SqlBaseParser.INTERVAL || _la===SqlBaseParser.SAMPLE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 392;
        this.number();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LimitClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_limitClause;
    return this;
}

LimitClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LimitClauseContext.prototype.constructor = LimitClauseContext;

LimitClauseContext.prototype.LIMIT = function() {
    return this.getToken(SqlBaseParser.LIMIT, 0);
};

LimitClauseContext.prototype.number = function() {
    return this.getTypedRuleContext(NumberContext,0);
};

LimitClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterLimitClause(this);
	}
};

LimitClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitLimitClause(this);
	}
};




SqlBaseParser.LimitClauseContext = LimitClauseContext;

SqlBaseParser.prototype.limitClause = function() {

    var localctx = new LimitClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, SqlBaseParser.RULE_limitClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 394;
        this.match(SqlBaseParser.LIMIT);
        this.state = 395;
        this.number();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RetentionClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_retentionClause;
    return this;
}

RetentionClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RetentionClauseContext.prototype.constructor = RetentionClauseContext;

RetentionClauseContext.prototype.RETENTION = function() {
    return this.getToken(SqlBaseParser.RETENTION, 0);
};

RetentionClauseContext.prototype.number = function() {
    return this.getTypedRuleContext(NumberContext,0);
};

RetentionClauseContext.prototype.windowUnit = function() {
    return this.getTypedRuleContext(WindowUnitContext,0);
};

RetentionClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterRetentionClause(this);
	}
};

RetentionClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitRetentionClause(this);
	}
};




SqlBaseParser.RetentionClauseContext = RetentionClauseContext;

SqlBaseParser.prototype.retentionClause = function() {

    var localctx = new RetentionClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, SqlBaseParser.RULE_retentionClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 397;
        this.match(SqlBaseParser.T__1);
        this.state = 398;
        this.match(SqlBaseParser.RETENTION);
        this.state = 399;
        this.number();
        this.state = 400;
        this.windowUnit();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GracePeriodClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_gracePeriodClause;
    return this;
}

GracePeriodClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GracePeriodClauseContext.prototype.constructor = GracePeriodClauseContext;

GracePeriodClauseContext.prototype.GRACE = function() {
    return this.getToken(SqlBaseParser.GRACE, 0);
};

GracePeriodClauseContext.prototype.PERIOD = function() {
    return this.getToken(SqlBaseParser.PERIOD, 0);
};

GracePeriodClauseContext.prototype.number = function() {
    return this.getTypedRuleContext(NumberContext,0);
};

GracePeriodClauseContext.prototype.windowUnit = function() {
    return this.getTypedRuleContext(WindowUnitContext,0);
};

GracePeriodClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterGracePeriodClause(this);
	}
};

GracePeriodClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitGracePeriodClause(this);
	}
};




SqlBaseParser.GracePeriodClauseContext = GracePeriodClauseContext;

SqlBaseParser.prototype.gracePeriodClause = function() {

    var localctx = new GracePeriodClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, SqlBaseParser.RULE_gracePeriodClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 402;
        this.match(SqlBaseParser.T__1);
        this.state = 403;
        this.match(SqlBaseParser.GRACE);
        this.state = 404;
        this.match(SqlBaseParser.PERIOD);
        this.state = 405;
        this.number();
        this.state = 406;
        this.windowUnit();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WindowExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_windowExpression;
    return this;
}

WindowExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WindowExpressionContext.prototype.constructor = WindowExpressionContext;

WindowExpressionContext.prototype.tumblingWindowExpression = function() {
    return this.getTypedRuleContext(TumblingWindowExpressionContext,0);
};

WindowExpressionContext.prototype.hoppingWindowExpression = function() {
    return this.getTypedRuleContext(HoppingWindowExpressionContext,0);
};

WindowExpressionContext.prototype.sessionWindowExpression = function() {
    return this.getTypedRuleContext(SessionWindowExpressionContext,0);
};

WindowExpressionContext.prototype.IDENTIFIER = function() {
    return this.getToken(SqlBaseParser.IDENTIFIER, 0);
};

WindowExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterWindowExpression(this);
	}
};

WindowExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitWindowExpression(this);
	}
};




SqlBaseParser.WindowExpressionContext = WindowExpressionContext;

SqlBaseParser.prototype.windowExpression = function() {

    var localctx = new WindowExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, SqlBaseParser.RULE_windowExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 409;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.IDENTIFIER) {
            this.state = 408;
            this.match(SqlBaseParser.IDENTIFIER);
        }

        this.state = 414;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.TUMBLING:
            this.state = 411;
            this.tumblingWindowExpression();
            break;
        case SqlBaseParser.HOPPING:
            this.state = 412;
            this.hoppingWindowExpression();
            break;
        case SqlBaseParser.SESSION:
            this.state = 413;
            this.sessionWindowExpression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TumblingWindowExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_tumblingWindowExpression;
    return this;
}

TumblingWindowExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TumblingWindowExpressionContext.prototype.constructor = TumblingWindowExpressionContext;

TumblingWindowExpressionContext.prototype.TUMBLING = function() {
    return this.getToken(SqlBaseParser.TUMBLING, 0);
};

TumblingWindowExpressionContext.prototype.SIZE = function() {
    return this.getToken(SqlBaseParser.SIZE, 0);
};

TumblingWindowExpressionContext.prototype.number = function() {
    return this.getTypedRuleContext(NumberContext,0);
};

TumblingWindowExpressionContext.prototype.windowUnit = function() {
    return this.getTypedRuleContext(WindowUnitContext,0);
};

TumblingWindowExpressionContext.prototype.retentionClause = function() {
    return this.getTypedRuleContext(RetentionClauseContext,0);
};

TumblingWindowExpressionContext.prototype.gracePeriodClause = function() {
    return this.getTypedRuleContext(GracePeriodClauseContext,0);
};

TumblingWindowExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterTumblingWindowExpression(this);
	}
};

TumblingWindowExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitTumblingWindowExpression(this);
	}
};




SqlBaseParser.TumblingWindowExpressionContext = TumblingWindowExpressionContext;

SqlBaseParser.prototype.tumblingWindowExpression = function() {

    var localctx = new TumblingWindowExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, SqlBaseParser.RULE_tumblingWindowExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 416;
        this.match(SqlBaseParser.TUMBLING);
        this.state = 417;
        this.match(SqlBaseParser.T__2);
        this.state = 418;
        this.match(SqlBaseParser.SIZE);
        this.state = 419;
        this.number();
        this.state = 420;
        this.windowUnit();
        this.state = 422;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
        if(la_===1) {
            this.state = 421;
            this.retentionClause();

        }
        this.state = 425;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.T__1) {
            this.state = 424;
            this.gracePeriodClause();
        }

        this.state = 427;
        this.match(SqlBaseParser.T__3);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function HoppingWindowExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_hoppingWindowExpression;
    return this;
}

HoppingWindowExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HoppingWindowExpressionContext.prototype.constructor = HoppingWindowExpressionContext;

HoppingWindowExpressionContext.prototype.HOPPING = function() {
    return this.getToken(SqlBaseParser.HOPPING, 0);
};

HoppingWindowExpressionContext.prototype.SIZE = function() {
    return this.getToken(SqlBaseParser.SIZE, 0);
};

HoppingWindowExpressionContext.prototype.number = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NumberContext);
    } else {
        return this.getTypedRuleContext(NumberContext,i);
    }
};

HoppingWindowExpressionContext.prototype.windowUnit = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WindowUnitContext);
    } else {
        return this.getTypedRuleContext(WindowUnitContext,i);
    }
};

HoppingWindowExpressionContext.prototype.ADVANCE = function() {
    return this.getToken(SqlBaseParser.ADVANCE, 0);
};

HoppingWindowExpressionContext.prototype.BY = function() {
    return this.getToken(SqlBaseParser.BY, 0);
};

HoppingWindowExpressionContext.prototype.retentionClause = function() {
    return this.getTypedRuleContext(RetentionClauseContext,0);
};

HoppingWindowExpressionContext.prototype.gracePeriodClause = function() {
    return this.getTypedRuleContext(GracePeriodClauseContext,0);
};

HoppingWindowExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterHoppingWindowExpression(this);
	}
};

HoppingWindowExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitHoppingWindowExpression(this);
	}
};




SqlBaseParser.HoppingWindowExpressionContext = HoppingWindowExpressionContext;

SqlBaseParser.prototype.hoppingWindowExpression = function() {

    var localctx = new HoppingWindowExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, SqlBaseParser.RULE_hoppingWindowExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 429;
        this.match(SqlBaseParser.HOPPING);
        this.state = 430;
        this.match(SqlBaseParser.T__2);
        this.state = 431;
        this.match(SqlBaseParser.SIZE);
        this.state = 432;
        this.number();
        this.state = 433;
        this.windowUnit();
        this.state = 434;
        this.match(SqlBaseParser.T__1);
        this.state = 435;
        this.match(SqlBaseParser.ADVANCE);
        this.state = 436;
        this.match(SqlBaseParser.BY);
        this.state = 437;
        this.number();
        this.state = 438;
        this.windowUnit();
        this.state = 440;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
        if(la_===1) {
            this.state = 439;
            this.retentionClause();

        }
        this.state = 443;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.T__1) {
            this.state = 442;
            this.gracePeriodClause();
        }

        this.state = 445;
        this.match(SqlBaseParser.T__3);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SessionWindowExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_sessionWindowExpression;
    return this;
}

SessionWindowExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SessionWindowExpressionContext.prototype.constructor = SessionWindowExpressionContext;

SessionWindowExpressionContext.prototype.SESSION = function() {
    return this.getToken(SqlBaseParser.SESSION, 0);
};

SessionWindowExpressionContext.prototype.number = function() {
    return this.getTypedRuleContext(NumberContext,0);
};

SessionWindowExpressionContext.prototype.windowUnit = function() {
    return this.getTypedRuleContext(WindowUnitContext,0);
};

SessionWindowExpressionContext.prototype.retentionClause = function() {
    return this.getTypedRuleContext(RetentionClauseContext,0);
};

SessionWindowExpressionContext.prototype.gracePeriodClause = function() {
    return this.getTypedRuleContext(GracePeriodClauseContext,0);
};

SessionWindowExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterSessionWindowExpression(this);
	}
};

SessionWindowExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitSessionWindowExpression(this);
	}
};




SqlBaseParser.SessionWindowExpressionContext = SessionWindowExpressionContext;

SqlBaseParser.prototype.sessionWindowExpression = function() {

    var localctx = new SessionWindowExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, SqlBaseParser.RULE_sessionWindowExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 447;
        this.match(SqlBaseParser.SESSION);
        this.state = 448;
        this.match(SqlBaseParser.T__2);
        this.state = 449;
        this.number();
        this.state = 450;
        this.windowUnit();
        this.state = 452;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
        if(la_===1) {
            this.state = 451;
            this.retentionClause();

        }
        this.state = 455;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.T__1) {
            this.state = 454;
            this.gracePeriodClause();
        }

        this.state = 457;
        this.match(SqlBaseParser.T__3);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WindowUnitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_windowUnit;
    return this;
}

WindowUnitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WindowUnitContext.prototype.constructor = WindowUnitContext;

WindowUnitContext.prototype.DAY = function() {
    return this.getToken(SqlBaseParser.DAY, 0);
};

WindowUnitContext.prototype.HOUR = function() {
    return this.getToken(SqlBaseParser.HOUR, 0);
};

WindowUnitContext.prototype.MINUTE = function() {
    return this.getToken(SqlBaseParser.MINUTE, 0);
};

WindowUnitContext.prototype.SECOND = function() {
    return this.getToken(SqlBaseParser.SECOND, 0);
};

WindowUnitContext.prototype.MILLISECOND = function() {
    return this.getToken(SqlBaseParser.MILLISECOND, 0);
};

WindowUnitContext.prototype.DAYS = function() {
    return this.getToken(SqlBaseParser.DAYS, 0);
};

WindowUnitContext.prototype.HOURS = function() {
    return this.getToken(SqlBaseParser.HOURS, 0);
};

WindowUnitContext.prototype.MINUTES = function() {
    return this.getToken(SqlBaseParser.MINUTES, 0);
};

WindowUnitContext.prototype.SECONDS = function() {
    return this.getToken(SqlBaseParser.SECONDS, 0);
};

WindowUnitContext.prototype.MILLISECONDS = function() {
    return this.getToken(SqlBaseParser.MILLISECONDS, 0);
};

WindowUnitContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterWindowUnit(this);
	}
};

WindowUnitContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitWindowUnit(this);
	}
};




SqlBaseParser.WindowUnitContext = WindowUnitContext;

SqlBaseParser.prototype.windowUnit = function() {

    var localctx = new WindowUnitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, SqlBaseParser.RULE_windowUnit);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 459;
        _la = this._input.LA(1);
        if(!(((((_la - 42)) & ~0x1f) == 0 && ((1 << (_la - 42)) & ((1 << (SqlBaseParser.DAY - 42)) | (1 << (SqlBaseParser.HOUR - 42)) | (1 << (SqlBaseParser.MINUTE - 42)) | (1 << (SqlBaseParser.SECOND - 42)) | (1 << (SqlBaseParser.MILLISECOND - 42)) | (1 << (SqlBaseParser.DAYS - 42)) | (1 << (SqlBaseParser.HOURS - 42)) | (1 << (SqlBaseParser.MINUTES - 42)) | (1 << (SqlBaseParser.SECONDS - 42)) | (1 << (SqlBaseParser.MILLISECONDS - 42)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PartitionByContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_partitionBy;
    return this;
}

PartitionByContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartitionByContext.prototype.constructor = PartitionByContext;

PartitionByContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};

PartitionByContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

PartitionByContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};

PartitionByContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterPartitionBy(this);
	}
};

PartitionByContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitPartitionBy(this);
	}
};




SqlBaseParser.PartitionByContext = PartitionByContext;

SqlBaseParser.prototype.partitionBy = function() {

    var localctx = new PartitionByContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, SqlBaseParser.RULE_partitionBy);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 461;
        this.valueExpression(0);
        this.state = 466;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,51,this._ctx);
        if(la_===1) {
            this.state = 463;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.AS) {
                this.state = 462;
                this.match(SqlBaseParser.AS);
            }

            this.state = 465;
            this.identifier();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GroupByContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_groupBy;
    return this;
}

GroupByContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GroupByContext.prototype.constructor = GroupByContext;

GroupByContext.prototype.valueExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueExpressionContext);
    } else {
        return this.getTypedRuleContext(ValueExpressionContext,i);
    }
};

GroupByContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

GroupByContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};

GroupByContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterGroupBy(this);
	}
};

GroupByContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitGroupBy(this);
	}
};




SqlBaseParser.GroupByContext = GroupByContext;

SqlBaseParser.prototype.groupBy = function() {

    var localctx = new GroupByContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, SqlBaseParser.RULE_groupBy);
    var _la = 0; // Token type
    try {
        this.state = 501;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 468;
            this.valueExpression(0);
            this.state = 473;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,53,this._ctx);
            if(la_===1) {
                this.state = 470;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SqlBaseParser.AS) {
                    this.state = 469;
                    this.match(SqlBaseParser.AS);
                }

                this.state = 472;
                this.identifier();

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 475;
            this.valueExpression(0);
            this.state = 480;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__1) {
                this.state = 476;
                this.match(SqlBaseParser.T__1);
                this.state = 477;
                this.valueExpression(0);
                this.state = 482;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 483;
            this.match(SqlBaseParser.T__2);
            this.state = 492;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlBaseParser.T__2) | (1 << SqlBaseParser.EMIT) | (1 << SqlBaseParser.CHANGES) | (1 << SqlBaseParser.ESCAPE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SqlBaseParser.NULL - 32)) | (1 << (SqlBaseParser.TRUE - 32)) | (1 << (SqlBaseParser.FALSE - 32)) | (1 << (SqlBaseParser.INTEGER - 32)) | (1 << (SqlBaseParser.DATE - 32)) | (1 << (SqlBaseParser.TIME - 32)) | (1 << (SqlBaseParser.TIMESTAMP - 32)) | (1 << (SqlBaseParser.INTERVAL - 32)) | (1 << (SqlBaseParser.YEAR - 32)) | (1 << (SqlBaseParser.MONTH - 32)) | (1 << (SqlBaseParser.DAY - 32)) | (1 << (SqlBaseParser.HOUR - 32)) | (1 << (SqlBaseParser.MINUTE - 32)) | (1 << (SqlBaseParser.SECOND - 32)) | (1 << (SqlBaseParser.ZONE - 32)) | (1 << (SqlBaseParser.CASE - 32)))) !== 0) || ((((_la - 74)) & ~0x1f) == 0 && ((1 << (_la - 74)) & ((1 << (SqlBaseParser.PARTITION - 74)) | (1 << (SqlBaseParser.STRUCT - 74)) | (1 << (SqlBaseParser.EXPLAIN - 74)) | (1 << (SqlBaseParser.ANALYZE - 74)) | (1 << (SqlBaseParser.TYPE - 74)) | (1 << (SqlBaseParser.TYPES - 74)) | (1 << (SqlBaseParser.CAST - 74)) | (1 << (SqlBaseParser.SHOW - 74)) | (1 << (SqlBaseParser.TABLES - 74)) | (1 << (SqlBaseParser.COLUMNS - 74)) | (1 << (SqlBaseParser.COLUMN - 74)) | (1 << (SqlBaseParser.PARTITIONS - 74)) | (1 << (SqlBaseParser.FUNCTIONS - 74)))) !== 0) || ((((_la - 106)) & ~0x1f) == 0 && ((1 << (_la - 106)) & ((1 << (SqlBaseParser.FUNCTION - 106)) | (1 << (SqlBaseParser.ARRAY - 106)) | (1 << (SqlBaseParser.MAP - 106)) | (1 << (SqlBaseParser.SET - 106)) | (1 << (SqlBaseParser.RESET - 106)) | (1 << (SqlBaseParser.SESSION - 106)) | (1 << (SqlBaseParser.KEY - 106)) | (1 << (SqlBaseParser.SINK - 106)) | (1 << (SqlBaseParser.SOURCE - 106)) | (1 << (SqlBaseParser.PRIMARY - 106)) | (1 << (SqlBaseParser.IF - 106)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (SqlBaseParser.PLUS - 140)) | (1 << (SqlBaseParser.MINUS - 140)) | (1 << (SqlBaseParser.STRING - 140)) | (1 << (SqlBaseParser.INTEGER_VALUE - 140)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 140)) | (1 << (SqlBaseParser.FLOATING_POINT_VALUE - 140)) | (1 << (SqlBaseParser.IDENTIFIER - 140)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 140)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 140)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 140)))) !== 0)) {
                this.state = 484;
                this.valueExpression(0);
                this.state = 489;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__1) {
                    this.state = 485;
                    this.match(SqlBaseParser.T__1);
                    this.state = 486;
                    this.valueExpression(0);
                    this.state = 491;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 494;
            this.match(SqlBaseParser.T__3);
            this.state = 499;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
            if(la_===1) {
                this.state = 496;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SqlBaseParser.AS) {
                    this.state = 495;
                    this.match(SqlBaseParser.AS);
                }

                this.state = 498;
                this.identifier();

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ValuesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_values;
    return this;
}

ValuesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValuesContext.prototype.constructor = ValuesContext;

ValuesContext.prototype.valueExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueExpressionContext);
    } else {
        return this.getTypedRuleContext(ValueExpressionContext,i);
    }
};

ValuesContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterValues(this);
	}
};

ValuesContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitValues(this);
	}
};




SqlBaseParser.ValuesContext = ValuesContext;

SqlBaseParser.prototype.values = function() {

    var localctx = new ValuesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, SqlBaseParser.RULE_values);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 503;
        this.match(SqlBaseParser.T__2);
        this.state = 512;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlBaseParser.T__2) | (1 << SqlBaseParser.EMIT) | (1 << SqlBaseParser.CHANGES) | (1 << SqlBaseParser.ESCAPE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SqlBaseParser.NULL - 32)) | (1 << (SqlBaseParser.TRUE - 32)) | (1 << (SqlBaseParser.FALSE - 32)) | (1 << (SqlBaseParser.INTEGER - 32)) | (1 << (SqlBaseParser.DATE - 32)) | (1 << (SqlBaseParser.TIME - 32)) | (1 << (SqlBaseParser.TIMESTAMP - 32)) | (1 << (SqlBaseParser.INTERVAL - 32)) | (1 << (SqlBaseParser.YEAR - 32)) | (1 << (SqlBaseParser.MONTH - 32)) | (1 << (SqlBaseParser.DAY - 32)) | (1 << (SqlBaseParser.HOUR - 32)) | (1 << (SqlBaseParser.MINUTE - 32)) | (1 << (SqlBaseParser.SECOND - 32)) | (1 << (SqlBaseParser.ZONE - 32)) | (1 << (SqlBaseParser.CASE - 32)))) !== 0) || ((((_la - 74)) & ~0x1f) == 0 && ((1 << (_la - 74)) & ((1 << (SqlBaseParser.PARTITION - 74)) | (1 << (SqlBaseParser.STRUCT - 74)) | (1 << (SqlBaseParser.EXPLAIN - 74)) | (1 << (SqlBaseParser.ANALYZE - 74)) | (1 << (SqlBaseParser.TYPE - 74)) | (1 << (SqlBaseParser.TYPES - 74)) | (1 << (SqlBaseParser.CAST - 74)) | (1 << (SqlBaseParser.SHOW - 74)) | (1 << (SqlBaseParser.TABLES - 74)) | (1 << (SqlBaseParser.COLUMNS - 74)) | (1 << (SqlBaseParser.COLUMN - 74)) | (1 << (SqlBaseParser.PARTITIONS - 74)) | (1 << (SqlBaseParser.FUNCTIONS - 74)))) !== 0) || ((((_la - 106)) & ~0x1f) == 0 && ((1 << (_la - 106)) & ((1 << (SqlBaseParser.FUNCTION - 106)) | (1 << (SqlBaseParser.ARRAY - 106)) | (1 << (SqlBaseParser.MAP - 106)) | (1 << (SqlBaseParser.SET - 106)) | (1 << (SqlBaseParser.RESET - 106)) | (1 << (SqlBaseParser.SESSION - 106)) | (1 << (SqlBaseParser.KEY - 106)) | (1 << (SqlBaseParser.SINK - 106)) | (1 << (SqlBaseParser.SOURCE - 106)) | (1 << (SqlBaseParser.PRIMARY - 106)) | (1 << (SqlBaseParser.IF - 106)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (SqlBaseParser.PLUS - 140)) | (1 << (SqlBaseParser.MINUS - 140)) | (1 << (SqlBaseParser.STRING - 140)) | (1 << (SqlBaseParser.INTEGER_VALUE - 140)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 140)) | (1 << (SqlBaseParser.FLOATING_POINT_VALUE - 140)) | (1 << (SqlBaseParser.IDENTIFIER - 140)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 140)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 140)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 140)))) !== 0)) {
            this.state = 504;
            this.valueExpression(0);
            this.state = 509;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__1) {
                this.state = 505;
                this.match(SqlBaseParser.T__1);
                this.state = 506;
                this.valueExpression(0);
                this.state = 511;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 514;
        this.match(SqlBaseParser.T__3);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SelectItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_selectItem;
    return this;
}

SelectItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectItemContext.prototype.constructor = SelectItemContext;


 
SelectItemContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function SelectAllContext(parser, ctx) {
	SelectItemContext.call(this, parser);
    SelectItemContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SelectAllContext.prototype = Object.create(SelectItemContext.prototype);
SelectAllContext.prototype.constructor = SelectAllContext;

SqlBaseParser.SelectAllContext = SelectAllContext;

SelectAllContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

SelectAllContext.prototype.ASTERISK = function() {
    return this.getToken(SqlBaseParser.ASTERISK, 0);
};
SelectAllContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterSelectAll(this);
	}
};

SelectAllContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitSelectAll(this);
	}
};


function SelectSingleContext(parser, ctx) {
	SelectItemContext.call(this, parser);
    SelectItemContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SelectSingleContext.prototype = Object.create(SelectItemContext.prototype);
SelectSingleContext.prototype.constructor = SelectSingleContext;

SqlBaseParser.SelectSingleContext = SelectSingleContext;

SelectSingleContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SelectSingleContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

SelectSingleContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};
SelectSingleContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterSelectSingle(this);
	}
};

SelectSingleContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitSelectSingle(this);
	}
};



SqlBaseParser.SelectItemContext = SelectItemContext;

SqlBaseParser.prototype.selectItem = function() {

    var localctx = new SelectItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, SqlBaseParser.RULE_selectItem);
    var _la = 0; // Token type
    try {
        this.state = 528;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
        switch(la_) {
        case 1:
            localctx = new SelectSingleContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 516;
            this.expression();
            this.state = 521;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlBaseParser.EMIT) | (1 << SqlBaseParser.CHANGES) | (1 << SqlBaseParser.AS) | (1 << SqlBaseParser.ESCAPE))) !== 0) || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (SqlBaseParser.INTEGER - 35)) | (1 << (SqlBaseParser.DATE - 35)) | (1 << (SqlBaseParser.TIME - 35)) | (1 << (SqlBaseParser.TIMESTAMP - 35)) | (1 << (SqlBaseParser.INTERVAL - 35)) | (1 << (SqlBaseParser.YEAR - 35)) | (1 << (SqlBaseParser.MONTH - 35)) | (1 << (SqlBaseParser.DAY - 35)) | (1 << (SqlBaseParser.HOUR - 35)) | (1 << (SqlBaseParser.MINUTE - 35)) | (1 << (SqlBaseParser.SECOND - 35)) | (1 << (SqlBaseParser.ZONE - 35)))) !== 0) || ((((_la - 74)) & ~0x1f) == 0 && ((1 << (_la - 74)) & ((1 << (SqlBaseParser.PARTITION - 74)) | (1 << (SqlBaseParser.STRUCT - 74)) | (1 << (SqlBaseParser.EXPLAIN - 74)) | (1 << (SqlBaseParser.ANALYZE - 74)) | (1 << (SqlBaseParser.TYPE - 74)) | (1 << (SqlBaseParser.TYPES - 74)) | (1 << (SqlBaseParser.SHOW - 74)) | (1 << (SqlBaseParser.TABLES - 74)) | (1 << (SqlBaseParser.COLUMNS - 74)) | (1 << (SqlBaseParser.COLUMN - 74)) | (1 << (SqlBaseParser.PARTITIONS - 74)) | (1 << (SqlBaseParser.FUNCTIONS - 74)))) !== 0) || ((((_la - 106)) & ~0x1f) == 0 && ((1 << (_la - 106)) & ((1 << (SqlBaseParser.FUNCTION - 106)) | (1 << (SqlBaseParser.ARRAY - 106)) | (1 << (SqlBaseParser.MAP - 106)) | (1 << (SqlBaseParser.SET - 106)) | (1 << (SqlBaseParser.RESET - 106)) | (1 << (SqlBaseParser.SESSION - 106)) | (1 << (SqlBaseParser.KEY - 106)) | (1 << (SqlBaseParser.SINK - 106)) | (1 << (SqlBaseParser.SOURCE - 106)) | (1 << (SqlBaseParser.PRIMARY - 106)) | (1 << (SqlBaseParser.IF - 106)))) !== 0) || ((((_la - 152)) & ~0x1f) == 0 && ((1 << (_la - 152)) & ((1 << (SqlBaseParser.IDENTIFIER - 152)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 152)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 152)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 152)))) !== 0)) {
                this.state = 518;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SqlBaseParser.AS) {
                    this.state = 517;
                    this.match(SqlBaseParser.AS);
                }

                this.state = 520;
                this.identifier();
            }

            break;

        case 2:
            localctx = new SelectAllContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 523;
            this.identifier();
            this.state = 524;
            this.match(SqlBaseParser.T__4);
            this.state = 525;
            this.match(SqlBaseParser.ASTERISK);
            break;

        case 3:
            localctx = new SelectAllContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 527;
            this.match(SqlBaseParser.ASTERISK);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RelationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_relation;
    return this;
}

RelationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationContext.prototype.constructor = RelationContext;


 
RelationContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function RelationDefaultContext(parser, ctx) {
	RelationContext.call(this, parser);
    RelationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RelationDefaultContext.prototype = Object.create(RelationContext.prototype);
RelationDefaultContext.prototype.constructor = RelationDefaultContext;

SqlBaseParser.RelationDefaultContext = RelationDefaultContext;

RelationDefaultContext.prototype.aliasedRelation = function() {
    return this.getTypedRuleContext(AliasedRelationContext,0);
};
RelationDefaultContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterRelationDefault(this);
	}
};

RelationDefaultContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitRelationDefault(this);
	}
};


function JoinRelationContext(parser, ctx) {
	RelationContext.call(this, parser);
    this.left = null; // AliasedRelationContext;
    RelationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JoinRelationContext.prototype = Object.create(RelationContext.prototype);
JoinRelationContext.prototype.constructor = JoinRelationContext;

SqlBaseParser.JoinRelationContext = JoinRelationContext;

JoinRelationContext.prototype.aliasedRelation = function() {
    return this.getTypedRuleContext(AliasedRelationContext,0);
};

JoinRelationContext.prototype.joinedSource = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(JoinedSourceContext);
    } else {
        return this.getTypedRuleContext(JoinedSourceContext,i);
    }
};
JoinRelationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterJoinRelation(this);
	}
};

JoinRelationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitJoinRelation(this);
	}
};



SqlBaseParser.RelationContext = RelationContext;

SqlBaseParser.prototype.relation = function() {

    var localctx = new RelationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, SqlBaseParser.RULE_relation);
    var _la = 0; // Token type
    try {
        this.state = 537;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
        switch(la_) {
        case 1:
            localctx = new JoinRelationContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 530;
            localctx.left = this.aliasedRelation();
            this.state = 532; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 531;
                this.joinedSource();
                this.state = 534; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (SqlBaseParser.JOIN - 67)) | (1 << (SqlBaseParser.FULL - 67)) | (1 << (SqlBaseParser.INNER - 67)) | (1 << (SqlBaseParser.LEFT - 67)))) !== 0));
            break;

        case 2:
            localctx = new RelationDefaultContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 536;
            this.aliasedRelation();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function JoinedSourceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_joinedSource;
    return this;
}

JoinedSourceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JoinedSourceContext.prototype.constructor = JoinedSourceContext;

JoinedSourceContext.prototype.joinType = function() {
    return this.getTypedRuleContext(JoinTypeContext,0);
};

JoinedSourceContext.prototype.JOIN = function() {
    return this.getToken(SqlBaseParser.JOIN, 0);
};

JoinedSourceContext.prototype.aliasedRelation = function() {
    return this.getTypedRuleContext(AliasedRelationContext,0);
};

JoinedSourceContext.prototype.joinCriteria = function() {
    return this.getTypedRuleContext(JoinCriteriaContext,0);
};

JoinedSourceContext.prototype.joinWindow = function() {
    return this.getTypedRuleContext(JoinWindowContext,0);
};

JoinedSourceContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterJoinedSource(this);
	}
};

JoinedSourceContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitJoinedSource(this);
	}
};




SqlBaseParser.JoinedSourceContext = JoinedSourceContext;

SqlBaseParser.prototype.joinedSource = function() {

    var localctx = new JoinedSourceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, SqlBaseParser.RULE_joinedSource);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 539;
        this.joinType();
        this.state = 540;
        this.match(SqlBaseParser.JOIN);
        this.state = 541;
        this.aliasedRelation();
        this.state = 543;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.WITHIN) {
            this.state = 542;
            this.joinWindow();
        }

        this.state = 545;
        this.joinCriteria();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function JoinTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_joinType;
    return this;
}

JoinTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JoinTypeContext.prototype.constructor = JoinTypeContext;


 
JoinTypeContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function InnerJoinContext(parser, ctx) {
	JoinTypeContext.call(this, parser);
    JoinTypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InnerJoinContext.prototype = Object.create(JoinTypeContext.prototype);
InnerJoinContext.prototype.constructor = InnerJoinContext;

SqlBaseParser.InnerJoinContext = InnerJoinContext;

InnerJoinContext.prototype.INNER = function() {
    return this.getToken(SqlBaseParser.INNER, 0);
};
InnerJoinContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterInnerJoin(this);
	}
};

InnerJoinContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitInnerJoin(this);
	}
};


function LeftJoinContext(parser, ctx) {
	JoinTypeContext.call(this, parser);
    JoinTypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LeftJoinContext.prototype = Object.create(JoinTypeContext.prototype);
LeftJoinContext.prototype.constructor = LeftJoinContext;

SqlBaseParser.LeftJoinContext = LeftJoinContext;

LeftJoinContext.prototype.LEFT = function() {
    return this.getToken(SqlBaseParser.LEFT, 0);
};

LeftJoinContext.prototype.OUTER = function() {
    return this.getToken(SqlBaseParser.OUTER, 0);
};
LeftJoinContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterLeftJoin(this);
	}
};

LeftJoinContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitLeftJoin(this);
	}
};


function OuterJoinContext(parser, ctx) {
	JoinTypeContext.call(this, parser);
    JoinTypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

OuterJoinContext.prototype = Object.create(JoinTypeContext.prototype);
OuterJoinContext.prototype.constructor = OuterJoinContext;

SqlBaseParser.OuterJoinContext = OuterJoinContext;

OuterJoinContext.prototype.FULL = function() {
    return this.getToken(SqlBaseParser.FULL, 0);
};

OuterJoinContext.prototype.OUTER = function() {
    return this.getToken(SqlBaseParser.OUTER, 0);
};
OuterJoinContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterOuterJoin(this);
	}
};

OuterJoinContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitOuterJoin(this);
	}
};



SqlBaseParser.JoinTypeContext = JoinTypeContext;

SqlBaseParser.prototype.joinType = function() {

    var localctx = new JoinTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, SqlBaseParser.RULE_joinType);
    var _la = 0; // Token type
    try {
        this.state = 558;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.JOIN:
        case SqlBaseParser.INNER:
            localctx = new InnerJoinContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 548;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.INNER) {
                this.state = 547;
                this.match(SqlBaseParser.INNER);
            }

            break;
        case SqlBaseParser.FULL:
            localctx = new OuterJoinContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 550;
            this.match(SqlBaseParser.FULL);
            this.state = 552;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.OUTER) {
                this.state = 551;
                this.match(SqlBaseParser.OUTER);
            }

            break;
        case SqlBaseParser.LEFT:
            localctx = new LeftJoinContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 554;
            this.match(SqlBaseParser.LEFT);
            this.state = 556;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.OUTER) {
                this.state = 555;
                this.match(SqlBaseParser.OUTER);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function JoinWindowContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_joinWindow;
    return this;
}

JoinWindowContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JoinWindowContext.prototype.constructor = JoinWindowContext;

JoinWindowContext.prototype.WITHIN = function() {
    return this.getToken(SqlBaseParser.WITHIN, 0);
};

JoinWindowContext.prototype.withinExpression = function() {
    return this.getTypedRuleContext(WithinExpressionContext,0);
};

JoinWindowContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterJoinWindow(this);
	}
};

JoinWindowContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitJoinWindow(this);
	}
};




SqlBaseParser.JoinWindowContext = JoinWindowContext;

SqlBaseParser.prototype.joinWindow = function() {

    var localctx = new JoinWindowContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, SqlBaseParser.RULE_joinWindow);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 560;
        this.match(SqlBaseParser.WITHIN);
        this.state = 561;
        this.withinExpression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WithinExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_withinExpression;
    return this;
}

WithinExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WithinExpressionContext.prototype.constructor = WithinExpressionContext;


 
WithinExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function SingleJoinWindowContext(parser, ctx) {
	WithinExpressionContext.call(this, parser);
    WithinExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SingleJoinWindowContext.prototype = Object.create(WithinExpressionContext.prototype);
SingleJoinWindowContext.prototype.constructor = SingleJoinWindowContext;

SqlBaseParser.SingleJoinWindowContext = SingleJoinWindowContext;

SingleJoinWindowContext.prototype.joinWindowSize = function() {
    return this.getTypedRuleContext(JoinWindowSizeContext,0);
};
SingleJoinWindowContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterSingleJoinWindow(this);
	}
};

SingleJoinWindowContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitSingleJoinWindow(this);
	}
};


function JoinWindowWithBeforeAndAfterContext(parser, ctx) {
	WithinExpressionContext.call(this, parser);
    WithinExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JoinWindowWithBeforeAndAfterContext.prototype = Object.create(WithinExpressionContext.prototype);
JoinWindowWithBeforeAndAfterContext.prototype.constructor = JoinWindowWithBeforeAndAfterContext;

SqlBaseParser.JoinWindowWithBeforeAndAfterContext = JoinWindowWithBeforeAndAfterContext;

JoinWindowWithBeforeAndAfterContext.prototype.joinWindowSize = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(JoinWindowSizeContext);
    } else {
        return this.getTypedRuleContext(JoinWindowSizeContext,i);
    }
};
JoinWindowWithBeforeAndAfterContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterJoinWindowWithBeforeAndAfter(this);
	}
};

JoinWindowWithBeforeAndAfterContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitJoinWindowWithBeforeAndAfter(this);
	}
};



SqlBaseParser.WithinExpressionContext = WithinExpressionContext;

SqlBaseParser.prototype.withinExpression = function() {

    var localctx = new WithinExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, SqlBaseParser.RULE_withinExpression);
    try {
        this.state = 570;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.T__2:
            localctx = new JoinWindowWithBeforeAndAfterContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 563;
            this.match(SqlBaseParser.T__2);
            this.state = 564;
            this.joinWindowSize();
            this.state = 565;
            this.match(SqlBaseParser.T__1);
            this.state = 566;
            this.joinWindowSize();
            this.state = 567;
            this.match(SqlBaseParser.T__3);
            break;
        case SqlBaseParser.INTEGER_VALUE:
        case SqlBaseParser.DECIMAL_VALUE:
        case SqlBaseParser.FLOATING_POINT_VALUE:
            localctx = new SingleJoinWindowContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 569;
            this.joinWindowSize();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function JoinWindowSizeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_joinWindowSize;
    return this;
}

JoinWindowSizeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JoinWindowSizeContext.prototype.constructor = JoinWindowSizeContext;

JoinWindowSizeContext.prototype.number = function() {
    return this.getTypedRuleContext(NumberContext,0);
};

JoinWindowSizeContext.prototype.windowUnit = function() {
    return this.getTypedRuleContext(WindowUnitContext,0);
};

JoinWindowSizeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterJoinWindowSize(this);
	}
};

JoinWindowSizeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitJoinWindowSize(this);
	}
};




SqlBaseParser.JoinWindowSizeContext = JoinWindowSizeContext;

SqlBaseParser.prototype.joinWindowSize = function() {

    var localctx = new JoinWindowSizeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, SqlBaseParser.RULE_joinWindowSize);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 572;
        this.number();
        this.state = 573;
        this.windowUnit();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function JoinCriteriaContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_joinCriteria;
    return this;
}

JoinCriteriaContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JoinCriteriaContext.prototype.constructor = JoinCriteriaContext;

JoinCriteriaContext.prototype.ON = function() {
    return this.getToken(SqlBaseParser.ON, 0);
};

JoinCriteriaContext.prototype.booleanExpression = function() {
    return this.getTypedRuleContext(BooleanExpressionContext,0);
};

JoinCriteriaContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterJoinCriteria(this);
	}
};

JoinCriteriaContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitJoinCriteria(this);
	}
};




SqlBaseParser.JoinCriteriaContext = JoinCriteriaContext;

SqlBaseParser.prototype.joinCriteria = function() {

    var localctx = new JoinCriteriaContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, SqlBaseParser.RULE_joinCriteria);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 575;
        this.match(SqlBaseParser.ON);
        this.state = 576;
        this.booleanExpression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AliasedRelationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_aliasedRelation;
    return this;
}

AliasedRelationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AliasedRelationContext.prototype.constructor = AliasedRelationContext;

AliasedRelationContext.prototype.relationPrimary = function() {
    return this.getTypedRuleContext(RelationPrimaryContext,0);
};

AliasedRelationContext.prototype.sourceName = function() {
    return this.getTypedRuleContext(SourceNameContext,0);
};

AliasedRelationContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};

AliasedRelationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterAliasedRelation(this);
	}
};

AliasedRelationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitAliasedRelation(this);
	}
};




SqlBaseParser.AliasedRelationContext = AliasedRelationContext;

SqlBaseParser.prototype.aliasedRelation = function() {

    var localctx = new AliasedRelationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, SqlBaseParser.RULE_aliasedRelation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 578;
        this.relationPrimary();
        this.state = 583;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
        if(la_===1) {
            this.state = 580;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.AS) {
                this.state = 579;
                this.match(SqlBaseParser.AS);
            }

            this.state = 582;
            this.sourceName();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ColumnsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_columns;
    return this;
}

ColumnsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnsContext.prototype.constructor = ColumnsContext;

ColumnsContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

ColumnsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterColumns(this);
	}
};

ColumnsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitColumns(this);
	}
};




SqlBaseParser.ColumnsContext = ColumnsContext;

SqlBaseParser.prototype.columns = function() {

    var localctx = new ColumnsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, SqlBaseParser.RULE_columns);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 585;
        this.match(SqlBaseParser.T__2);
        this.state = 586;
        this.identifier();
        this.state = 591;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SqlBaseParser.T__1) {
            this.state = 587;
            this.match(SqlBaseParser.T__1);
            this.state = 588;
            this.identifier();
            this.state = 593;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 594;
        this.match(SqlBaseParser.T__3);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RelationPrimaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_relationPrimary;
    return this;
}

RelationPrimaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationPrimaryContext.prototype.constructor = RelationPrimaryContext;


 
RelationPrimaryContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function TableNameContext(parser, ctx) {
	RelationPrimaryContext.call(this, parser);
    RelationPrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TableNameContext.prototype = Object.create(RelationPrimaryContext.prototype);
TableNameContext.prototype.constructor = TableNameContext;

SqlBaseParser.TableNameContext = TableNameContext;

TableNameContext.prototype.sourceName = function() {
    return this.getTypedRuleContext(SourceNameContext,0);
};
TableNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterTableName(this);
	}
};

TableNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitTableName(this);
	}
};



SqlBaseParser.RelationPrimaryContext = RelationPrimaryContext;

SqlBaseParser.prototype.relationPrimary = function() {

    var localctx = new RelationPrimaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, SqlBaseParser.RULE_relationPrimary);
    try {
        localctx = new TableNameContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 596;
        this.sourceName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.booleanExpression = function() {
    return this.getTypedRuleContext(BooleanExpressionContext,0);
};

ExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterExpression(this);
	}
};

ExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitExpression(this);
	}
};




SqlBaseParser.ExpressionContext = ExpressionContext;

SqlBaseParser.prototype.expression = function() {

    var localctx = new ExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, SqlBaseParser.RULE_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 598;
        this.booleanExpression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BooleanExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_booleanExpression;
    return this;
}

BooleanExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BooleanExpressionContext.prototype.constructor = BooleanExpressionContext;


 
BooleanExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function LogicalNotContext(parser, ctx) {
	BooleanExpressionContext.call(this, parser);
    BooleanExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LogicalNotContext.prototype = Object.create(BooleanExpressionContext.prototype);
LogicalNotContext.prototype.constructor = LogicalNotContext;

SqlBaseParser.LogicalNotContext = LogicalNotContext;

LogicalNotContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};

LogicalNotContext.prototype.booleanExpression = function() {
    return this.getTypedRuleContext(BooleanExpressionContext,0);
};
LogicalNotContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterLogicalNot(this);
	}
};

LogicalNotContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitLogicalNot(this);
	}
};


function BooleanDefaultContext(parser, ctx) {
	BooleanExpressionContext.call(this, parser);
    BooleanExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BooleanDefaultContext.prototype = Object.create(BooleanExpressionContext.prototype);
BooleanDefaultContext.prototype.constructor = BooleanDefaultContext;

SqlBaseParser.BooleanDefaultContext = BooleanDefaultContext;

BooleanDefaultContext.prototype.predicated = function() {
    return this.getTypedRuleContext(PredicatedContext,0);
};
BooleanDefaultContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterBooleanDefault(this);
	}
};

BooleanDefaultContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitBooleanDefault(this);
	}
};


function LogicalBinaryContext(parser, ctx) {
	BooleanExpressionContext.call(this, parser);
    this.left = null; // BooleanExpressionContext;
    this.operator = null; // Token;
    this.right = null; // BooleanExpressionContext;
    BooleanExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LogicalBinaryContext.prototype = Object.create(BooleanExpressionContext.prototype);
LogicalBinaryContext.prototype.constructor = LogicalBinaryContext;

SqlBaseParser.LogicalBinaryContext = LogicalBinaryContext;

LogicalBinaryContext.prototype.booleanExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BooleanExpressionContext);
    } else {
        return this.getTypedRuleContext(BooleanExpressionContext,i);
    }
};

LogicalBinaryContext.prototype.AND = function() {
    return this.getToken(SqlBaseParser.AND, 0);
};

LogicalBinaryContext.prototype.OR = function() {
    return this.getToken(SqlBaseParser.OR, 0);
};
LogicalBinaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterLogicalBinary(this);
	}
};

LogicalBinaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitLogicalBinary(this);
	}
};



SqlBaseParser.prototype.booleanExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new BooleanExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 70;
    this.enterRecursionRule(localctx, 70, SqlBaseParser.RULE_booleanExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 604;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.T__2:
        case SqlBaseParser.EMIT:
        case SqlBaseParser.CHANGES:
        case SqlBaseParser.ESCAPE:
        case SqlBaseParser.NULL:
        case SqlBaseParser.TRUE:
        case SqlBaseParser.FALSE:
        case SqlBaseParser.INTEGER:
        case SqlBaseParser.DATE:
        case SqlBaseParser.TIME:
        case SqlBaseParser.TIMESTAMP:
        case SqlBaseParser.INTERVAL:
        case SqlBaseParser.YEAR:
        case SqlBaseParser.MONTH:
        case SqlBaseParser.DAY:
        case SqlBaseParser.HOUR:
        case SqlBaseParser.MINUTE:
        case SqlBaseParser.SECOND:
        case SqlBaseParser.ZONE:
        case SqlBaseParser.CASE:
        case SqlBaseParser.PARTITION:
        case SqlBaseParser.STRUCT:
        case SqlBaseParser.EXPLAIN:
        case SqlBaseParser.ANALYZE:
        case SqlBaseParser.TYPE:
        case SqlBaseParser.TYPES:
        case SqlBaseParser.CAST:
        case SqlBaseParser.SHOW:
        case SqlBaseParser.TABLES:
        case SqlBaseParser.COLUMNS:
        case SqlBaseParser.COLUMN:
        case SqlBaseParser.PARTITIONS:
        case SqlBaseParser.FUNCTIONS:
        case SqlBaseParser.FUNCTION:
        case SqlBaseParser.ARRAY:
        case SqlBaseParser.MAP:
        case SqlBaseParser.SET:
        case SqlBaseParser.RESET:
        case SqlBaseParser.SESSION:
        case SqlBaseParser.KEY:
        case SqlBaseParser.SINK:
        case SqlBaseParser.SOURCE:
        case SqlBaseParser.PRIMARY:
        case SqlBaseParser.IF:
        case SqlBaseParser.PLUS:
        case SqlBaseParser.MINUS:
        case SqlBaseParser.STRING:
        case SqlBaseParser.INTEGER_VALUE:
        case SqlBaseParser.DECIMAL_VALUE:
        case SqlBaseParser.FLOATING_POINT_VALUE:
        case SqlBaseParser.IDENTIFIER:
        case SqlBaseParser.DIGIT_IDENTIFIER:
        case SqlBaseParser.QUOTED_IDENTIFIER:
        case SqlBaseParser.BACKQUOTED_IDENTIFIER:
            localctx = new BooleanDefaultContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 601;
            this.predicated();
            break;
        case SqlBaseParser.NOT:
            localctx = new LogicalNotContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 602;
            this.match(SqlBaseParser.NOT);
            this.state = 603;
            this.booleanExpression(3);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 614;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,78,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 612;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,77,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new LogicalBinaryContext(this, new BooleanExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_booleanExpression);
                    this.state = 606;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 607;
                    localctx.operator = this.match(SqlBaseParser.AND);
                    this.state = 608;
                    localctx.right = this.booleanExpression(3);
                    break;

                case 2:
                    localctx = new LogicalBinaryContext(this, new BooleanExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_booleanExpression);
                    this.state = 609;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 610;
                    localctx.operator = this.match(SqlBaseParser.OR);
                    this.state = 611;
                    localctx.right = this.booleanExpression(2);
                    break;

                } 
            }
            this.state = 616;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,78,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function PredicatedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_predicated;
    this._valueExpression = null; // ValueExpressionContext
    return this;
}

PredicatedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PredicatedContext.prototype.constructor = PredicatedContext;

PredicatedContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};

PredicatedContext.prototype.predicate = function() {
    return this.getTypedRuleContext(PredicateContext,0);
};

PredicatedContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterPredicated(this);
	}
};

PredicatedContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitPredicated(this);
	}
};




SqlBaseParser.PredicatedContext = PredicatedContext;

SqlBaseParser.prototype.predicated = function() {

    var localctx = new PredicatedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, SqlBaseParser.RULE_predicated);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 617;
        localctx._valueExpression = this.valueExpression(0);
        this.state = 619;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
        if(la_===1) {
            this.state = 618;
            this.predicate(localctx._valueExpression);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PredicateContext(parser, parent, invokingState, value) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_predicate;
    this.value = null
    this.value = value || null;
    return this;
}

PredicateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PredicateContext.prototype.constructor = PredicateContext;


 
PredicateContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
    this.value = ctx.value;
};


function ComparisonContext(parser, ctx) {
	PredicateContext.call(this, parser);
    this.right = null; // ValueExpressionContext;
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ComparisonContext.prototype = Object.create(PredicateContext.prototype);
ComparisonContext.prototype.constructor = ComparisonContext;

SqlBaseParser.ComparisonContext = ComparisonContext;

ComparisonContext.prototype.comparisonOperator = function() {
    return this.getTypedRuleContext(ComparisonOperatorContext,0);
};

ComparisonContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};
ComparisonContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterComparison(this);
	}
};

ComparisonContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitComparison(this);
	}
};


function LikeContext(parser, ctx) {
	PredicateContext.call(this, parser);
    this.pattern = null; // ValueExpressionContext;
    this.escape = null; // Token;
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LikeContext.prototype = Object.create(PredicateContext.prototype);
LikeContext.prototype.constructor = LikeContext;

SqlBaseParser.LikeContext = LikeContext;

LikeContext.prototype.LIKE = function() {
    return this.getToken(SqlBaseParser.LIKE, 0);
};

LikeContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};

LikeContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};

LikeContext.prototype.ESCAPE = function() {
    return this.getToken(SqlBaseParser.ESCAPE, 0);
};

LikeContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};
LikeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterLike(this);
	}
};

LikeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitLike(this);
	}
};


function DistinctFromContext(parser, ctx) {
	PredicateContext.call(this, parser);
    this.right = null; // ValueExpressionContext;
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DistinctFromContext.prototype = Object.create(PredicateContext.prototype);
DistinctFromContext.prototype.constructor = DistinctFromContext;

SqlBaseParser.DistinctFromContext = DistinctFromContext;

DistinctFromContext.prototype.IS = function() {
    return this.getToken(SqlBaseParser.IS, 0);
};

DistinctFromContext.prototype.DISTINCT = function() {
    return this.getToken(SqlBaseParser.DISTINCT, 0);
};

DistinctFromContext.prototype.FROM = function() {
    return this.getToken(SqlBaseParser.FROM, 0);
};

DistinctFromContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};

DistinctFromContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};
DistinctFromContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterDistinctFrom(this);
	}
};

DistinctFromContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitDistinctFrom(this);
	}
};


function InListContext(parser, ctx) {
	PredicateContext.call(this, parser);
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InListContext.prototype = Object.create(PredicateContext.prototype);
InListContext.prototype.constructor = InListContext;

SqlBaseParser.InListContext = InListContext;

InListContext.prototype.IN = function() {
    return this.getToken(SqlBaseParser.IN, 0);
};

InListContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

InListContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};
InListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterInList(this);
	}
};

InListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitInList(this);
	}
};


function NullPredicateContext(parser, ctx) {
	PredicateContext.call(this, parser);
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NullPredicateContext.prototype = Object.create(PredicateContext.prototype);
NullPredicateContext.prototype.constructor = NullPredicateContext;

SqlBaseParser.NullPredicateContext = NullPredicateContext;

NullPredicateContext.prototype.IS = function() {
    return this.getToken(SqlBaseParser.IS, 0);
};

NullPredicateContext.prototype.NULL = function() {
    return this.getToken(SqlBaseParser.NULL, 0);
};

NullPredicateContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};
NullPredicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterNullPredicate(this);
	}
};

NullPredicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitNullPredicate(this);
	}
};


function BetweenContext(parser, ctx) {
	PredicateContext.call(this, parser);
    this.lower = null; // ValueExpressionContext;
    this.upper = null; // ValueExpressionContext;
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BetweenContext.prototype = Object.create(PredicateContext.prototype);
BetweenContext.prototype.constructor = BetweenContext;

SqlBaseParser.BetweenContext = BetweenContext;

BetweenContext.prototype.BETWEEN = function() {
    return this.getToken(SqlBaseParser.BETWEEN, 0);
};

BetweenContext.prototype.AND = function() {
    return this.getToken(SqlBaseParser.AND, 0);
};

BetweenContext.prototype.valueExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueExpressionContext);
    } else {
        return this.getTypedRuleContext(ValueExpressionContext,i);
    }
};

BetweenContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};
BetweenContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterBetween(this);
	}
};

BetweenContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitBetween(this);
	}
};



SqlBaseParser.PredicateContext = PredicateContext;

SqlBaseParser.prototype.predicate = function(value) {

    var localctx = new PredicateContext(this, this._ctx, this.state, value);
    this.enterRule(localctx, 74, SqlBaseParser.RULE_predicate);
    var _la = 0; // Token type
    try {
        this.state = 668;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,87,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ComparisonContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 621;
            this.comparisonOperator();
            this.state = 622;
            localctx.right = this.valueExpression(0);
            break;

        case 2:
            localctx = new BetweenContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 625;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.NOT) {
                this.state = 624;
                this.match(SqlBaseParser.NOT);
            }

            this.state = 627;
            this.match(SqlBaseParser.BETWEEN);
            this.state = 628;
            localctx.lower = this.valueExpression(0);
            this.state = 629;
            this.match(SqlBaseParser.AND);
            this.state = 630;
            localctx.upper = this.valueExpression(0);
            break;

        case 3:
            localctx = new InListContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 633;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.NOT) {
                this.state = 632;
                this.match(SqlBaseParser.NOT);
            }

            this.state = 635;
            this.match(SqlBaseParser.IN);
            this.state = 636;
            this.match(SqlBaseParser.T__2);
            this.state = 637;
            this.expression();
            this.state = 642;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__1) {
                this.state = 638;
                this.match(SqlBaseParser.T__1);
                this.state = 639;
                this.expression();
                this.state = 644;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 645;
            this.match(SqlBaseParser.T__3);
            break;

        case 4:
            localctx = new LikeContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 648;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.NOT) {
                this.state = 647;
                this.match(SqlBaseParser.NOT);
            }

            this.state = 650;
            this.match(SqlBaseParser.LIKE);
            this.state = 651;
            localctx.pattern = this.valueExpression(0);
            this.state = 654;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,84,this._ctx);
            if(la_===1) {
                this.state = 652;
                this.match(SqlBaseParser.ESCAPE);
                this.state = 653;
                localctx.escape = this.match(SqlBaseParser.STRING);

            }
            break;

        case 5:
            localctx = new NullPredicateContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 656;
            this.match(SqlBaseParser.IS);
            this.state = 658;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.NOT) {
                this.state = 657;
                this.match(SqlBaseParser.NOT);
            }

            this.state = 660;
            this.match(SqlBaseParser.NULL);
            break;

        case 6:
            localctx = new DistinctFromContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 661;
            this.match(SqlBaseParser.IS);
            this.state = 663;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.NOT) {
                this.state = 662;
                this.match(SqlBaseParser.NOT);
            }

            this.state = 665;
            this.match(SqlBaseParser.DISTINCT);
            this.state = 666;
            this.match(SqlBaseParser.FROM);
            this.state = 667;
            localctx.right = this.valueExpression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ValueExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_valueExpression;
    return this;
}

ValueExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValueExpressionContext.prototype.constructor = ValueExpressionContext;


 
ValueExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function ValueExpressionDefaultContext(parser, ctx) {
	ValueExpressionContext.call(this, parser);
    ValueExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ValueExpressionDefaultContext.prototype = Object.create(ValueExpressionContext.prototype);
ValueExpressionDefaultContext.prototype.constructor = ValueExpressionDefaultContext;

SqlBaseParser.ValueExpressionDefaultContext = ValueExpressionDefaultContext;

ValueExpressionDefaultContext.prototype.primaryExpression = function() {
    return this.getTypedRuleContext(PrimaryExpressionContext,0);
};
ValueExpressionDefaultContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterValueExpressionDefault(this);
	}
};

ValueExpressionDefaultContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitValueExpressionDefault(this);
	}
};


function ConcatenationContext(parser, ctx) {
	ValueExpressionContext.call(this, parser);
    this.left = null; // ValueExpressionContext;
    this.right = null; // ValueExpressionContext;
    ValueExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConcatenationContext.prototype = Object.create(ValueExpressionContext.prototype);
ConcatenationContext.prototype.constructor = ConcatenationContext;

SqlBaseParser.ConcatenationContext = ConcatenationContext;

ConcatenationContext.prototype.CONCAT = function() {
    return this.getToken(SqlBaseParser.CONCAT, 0);
};

ConcatenationContext.prototype.valueExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueExpressionContext);
    } else {
        return this.getTypedRuleContext(ValueExpressionContext,i);
    }
};
ConcatenationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterConcatenation(this);
	}
};

ConcatenationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitConcatenation(this);
	}
};


function ArithmeticBinaryContext(parser, ctx) {
	ValueExpressionContext.call(this, parser);
    this.left = null; // ValueExpressionContext;
    this.operator = null; // Token;
    this.right = null; // ValueExpressionContext;
    ValueExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArithmeticBinaryContext.prototype = Object.create(ValueExpressionContext.prototype);
ArithmeticBinaryContext.prototype.constructor = ArithmeticBinaryContext;

SqlBaseParser.ArithmeticBinaryContext = ArithmeticBinaryContext;

ArithmeticBinaryContext.prototype.valueExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueExpressionContext);
    } else {
        return this.getTypedRuleContext(ValueExpressionContext,i);
    }
};

ArithmeticBinaryContext.prototype.ASTERISK = function() {
    return this.getToken(SqlBaseParser.ASTERISK, 0);
};

ArithmeticBinaryContext.prototype.SLASH = function() {
    return this.getToken(SqlBaseParser.SLASH, 0);
};

ArithmeticBinaryContext.prototype.PERCENT = function() {
    return this.getToken(SqlBaseParser.PERCENT, 0);
};

ArithmeticBinaryContext.prototype.PLUS = function() {
    return this.getToken(SqlBaseParser.PLUS, 0);
};

ArithmeticBinaryContext.prototype.MINUS = function() {
    return this.getToken(SqlBaseParser.MINUS, 0);
};
ArithmeticBinaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterArithmeticBinary(this);
	}
};

ArithmeticBinaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitArithmeticBinary(this);
	}
};


function ArithmeticUnaryContext(parser, ctx) {
	ValueExpressionContext.call(this, parser);
    this.operator = null; // Token;
    ValueExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArithmeticUnaryContext.prototype = Object.create(ValueExpressionContext.prototype);
ArithmeticUnaryContext.prototype.constructor = ArithmeticUnaryContext;

SqlBaseParser.ArithmeticUnaryContext = ArithmeticUnaryContext;

ArithmeticUnaryContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};

ArithmeticUnaryContext.prototype.MINUS = function() {
    return this.getToken(SqlBaseParser.MINUS, 0);
};

ArithmeticUnaryContext.prototype.PLUS = function() {
    return this.getToken(SqlBaseParser.PLUS, 0);
};
ArithmeticUnaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterArithmeticUnary(this);
	}
};

ArithmeticUnaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitArithmeticUnary(this);
	}
};


function AtTimeZoneContext(parser, ctx) {
	ValueExpressionContext.call(this, parser);
    ValueExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AtTimeZoneContext.prototype = Object.create(ValueExpressionContext.prototype);
AtTimeZoneContext.prototype.constructor = AtTimeZoneContext;

SqlBaseParser.AtTimeZoneContext = AtTimeZoneContext;

AtTimeZoneContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};

AtTimeZoneContext.prototype.AT = function() {
    return this.getToken(SqlBaseParser.AT, 0);
};

AtTimeZoneContext.prototype.timeZoneSpecifier = function() {
    return this.getTypedRuleContext(TimeZoneSpecifierContext,0);
};
AtTimeZoneContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterAtTimeZone(this);
	}
};

AtTimeZoneContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitAtTimeZone(this);
	}
};



SqlBaseParser.prototype.valueExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ValueExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 76;
    this.enterRecursionRule(localctx, 76, SqlBaseParser.RULE_valueExpression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 674;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.T__2:
        case SqlBaseParser.EMIT:
        case SqlBaseParser.CHANGES:
        case SqlBaseParser.ESCAPE:
        case SqlBaseParser.NULL:
        case SqlBaseParser.TRUE:
        case SqlBaseParser.FALSE:
        case SqlBaseParser.INTEGER:
        case SqlBaseParser.DATE:
        case SqlBaseParser.TIME:
        case SqlBaseParser.TIMESTAMP:
        case SqlBaseParser.INTERVAL:
        case SqlBaseParser.YEAR:
        case SqlBaseParser.MONTH:
        case SqlBaseParser.DAY:
        case SqlBaseParser.HOUR:
        case SqlBaseParser.MINUTE:
        case SqlBaseParser.SECOND:
        case SqlBaseParser.ZONE:
        case SqlBaseParser.CASE:
        case SqlBaseParser.PARTITION:
        case SqlBaseParser.STRUCT:
        case SqlBaseParser.EXPLAIN:
        case SqlBaseParser.ANALYZE:
        case SqlBaseParser.TYPE:
        case SqlBaseParser.TYPES:
        case SqlBaseParser.CAST:
        case SqlBaseParser.SHOW:
        case SqlBaseParser.TABLES:
        case SqlBaseParser.COLUMNS:
        case SqlBaseParser.COLUMN:
        case SqlBaseParser.PARTITIONS:
        case SqlBaseParser.FUNCTIONS:
        case SqlBaseParser.FUNCTION:
        case SqlBaseParser.ARRAY:
        case SqlBaseParser.MAP:
        case SqlBaseParser.SET:
        case SqlBaseParser.RESET:
        case SqlBaseParser.SESSION:
        case SqlBaseParser.KEY:
        case SqlBaseParser.SINK:
        case SqlBaseParser.SOURCE:
        case SqlBaseParser.PRIMARY:
        case SqlBaseParser.IF:
        case SqlBaseParser.STRING:
        case SqlBaseParser.INTEGER_VALUE:
        case SqlBaseParser.DECIMAL_VALUE:
        case SqlBaseParser.FLOATING_POINT_VALUE:
        case SqlBaseParser.IDENTIFIER:
        case SqlBaseParser.DIGIT_IDENTIFIER:
        case SqlBaseParser.QUOTED_IDENTIFIER:
        case SqlBaseParser.BACKQUOTED_IDENTIFIER:
            localctx = new ValueExpressionDefaultContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 671;
            this.primaryExpression(0);
            break;
        case SqlBaseParser.PLUS:
        case SqlBaseParser.MINUS:
            localctx = new ArithmeticUnaryContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 672;
            localctx.operator = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.PLUS || _la===SqlBaseParser.MINUS)) {
                localctx.operator = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 673;
            this.valueExpression(4);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 690;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,90,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 688;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,89,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ArithmeticBinaryContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_valueExpression);
                    this.state = 676;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 677;
                    localctx.operator = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(((((_la - 142)) & ~0x1f) == 0 && ((1 << (_la - 142)) & ((1 << (SqlBaseParser.ASTERISK - 142)) | (1 << (SqlBaseParser.SLASH - 142)) | (1 << (SqlBaseParser.PERCENT - 142)))) !== 0))) {
                        localctx.operator = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 678;
                    localctx.right = this.valueExpression(4);
                    break;

                case 2:
                    localctx = new ArithmeticBinaryContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_valueExpression);
                    this.state = 679;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 680;
                    localctx.operator = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===SqlBaseParser.PLUS || _la===SqlBaseParser.MINUS)) {
                        localctx.operator = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 681;
                    localctx.right = this.valueExpression(3);
                    break;

                case 3:
                    localctx = new ConcatenationContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_valueExpression);
                    this.state = 682;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 683;
                    this.match(SqlBaseParser.CONCAT);
                    this.state = 684;
                    localctx.right = this.valueExpression(2);
                    break;

                case 4:
                    localctx = new AtTimeZoneContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_valueExpression);
                    this.state = 685;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 686;
                    this.match(SqlBaseParser.AT);
                    this.state = 687;
                    this.timeZoneSpecifier();
                    break;

                } 
            }
            this.state = 692;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,90,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function PrimaryExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_primaryExpression;
    return this;
}

PrimaryExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryExpressionContext.prototype.constructor = PrimaryExpressionContext;


 
PrimaryExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function DereferenceContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    this.base = null; // PrimaryExpressionContext;
    this.fieldName = null; // IdentifierContext;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DereferenceContext.prototype = Object.create(PrimaryExpressionContext.prototype);
DereferenceContext.prototype.constructor = DereferenceContext;

SqlBaseParser.DereferenceContext = DereferenceContext;

DereferenceContext.prototype.STRUCT_FIELD_REF = function() {
    return this.getToken(SqlBaseParser.STRUCT_FIELD_REF, 0);
};

DereferenceContext.prototype.primaryExpression = function() {
    return this.getTypedRuleContext(PrimaryExpressionContext,0);
};

DereferenceContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
DereferenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterDereference(this);
	}
};

DereferenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitDereference(this);
	}
};


function SimpleCaseContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    this.elseExpression = null; // ExpressionContext;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SimpleCaseContext.prototype = Object.create(PrimaryExpressionContext.prototype);
SimpleCaseContext.prototype.constructor = SimpleCaseContext;

SqlBaseParser.SimpleCaseContext = SimpleCaseContext;

SimpleCaseContext.prototype.CASE = function() {
    return this.getToken(SqlBaseParser.CASE, 0);
};

SimpleCaseContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};

SimpleCaseContext.prototype.END = function() {
    return this.getToken(SqlBaseParser.END, 0);
};

SimpleCaseContext.prototype.whenClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WhenClauseContext);
    } else {
        return this.getTypedRuleContext(WhenClauseContext,i);
    }
};

SimpleCaseContext.prototype.ELSE = function() {
    return this.getToken(SqlBaseParser.ELSE, 0);
};

SimpleCaseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
SimpleCaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterSimpleCase(this);
	}
};

SimpleCaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitSimpleCase(this);
	}
};


function ColumnReferenceContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ColumnReferenceContext.prototype = Object.create(PrimaryExpressionContext.prototype);
ColumnReferenceContext.prototype.constructor = ColumnReferenceContext;

SqlBaseParser.ColumnReferenceContext = ColumnReferenceContext;

ColumnReferenceContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
ColumnReferenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterColumnReference(this);
	}
};

ColumnReferenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitColumnReference(this);
	}
};


function SubscriptContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    this.value = null; // PrimaryExpressionContext;
    this.index = null; // ValueExpressionContext;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SubscriptContext.prototype = Object.create(PrimaryExpressionContext.prototype);
SubscriptContext.prototype.constructor = SubscriptContext;

SqlBaseParser.SubscriptContext = SubscriptContext;

SubscriptContext.prototype.primaryExpression = function() {
    return this.getTypedRuleContext(PrimaryExpressionContext,0);
};

SubscriptContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};
SubscriptContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterSubscript(this);
	}
};

SubscriptContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitSubscript(this);
	}
};


function StructConstructorContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

StructConstructorContext.prototype = Object.create(PrimaryExpressionContext.prototype);
StructConstructorContext.prototype.constructor = StructConstructorContext;

SqlBaseParser.StructConstructorContext = StructConstructorContext;

StructConstructorContext.prototype.STRUCT = function() {
    return this.getToken(SqlBaseParser.STRUCT, 0);
};

StructConstructorContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

StructConstructorContext.prototype.ASSIGN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.ASSIGN);
    } else {
        return this.getToken(SqlBaseParser.ASSIGN, i);
    }
};


StructConstructorContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
StructConstructorContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterStructConstructor(this);
	}
};

StructConstructorContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitStructConstructor(this);
	}
};


function TypeConstructorContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeConstructorContext.prototype = Object.create(PrimaryExpressionContext.prototype);
TypeConstructorContext.prototype.constructor = TypeConstructorContext;

SqlBaseParser.TypeConstructorContext = TypeConstructorContext;

TypeConstructorContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

TypeConstructorContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};
TypeConstructorContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterTypeConstructor(this);
	}
};

TypeConstructorContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitTypeConstructor(this);
	}
};


function QualifiedColumnReferenceContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

QualifiedColumnReferenceContext.prototype = Object.create(PrimaryExpressionContext.prototype);
QualifiedColumnReferenceContext.prototype.constructor = QualifiedColumnReferenceContext;

SqlBaseParser.QualifiedColumnReferenceContext = QualifiedColumnReferenceContext;

QualifiedColumnReferenceContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};
QualifiedColumnReferenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterQualifiedColumnReference(this);
	}
};

QualifiedColumnReferenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitQualifiedColumnReference(this);
	}
};


function CastContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CastContext.prototype = Object.create(PrimaryExpressionContext.prototype);
CastContext.prototype.constructor = CastContext;

SqlBaseParser.CastContext = CastContext;

CastContext.prototype.CAST = function() {
    return this.getToken(SqlBaseParser.CAST, 0);
};

CastContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

CastContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};

CastContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};
CastContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterCast(this);
	}
};

CastContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitCast(this);
	}
};


function ParenthesizedExpressionContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ParenthesizedExpressionContext.prototype = Object.create(PrimaryExpressionContext.prototype);
ParenthesizedExpressionContext.prototype.constructor = ParenthesizedExpressionContext;

SqlBaseParser.ParenthesizedExpressionContext = ParenthesizedExpressionContext;

ParenthesizedExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
ParenthesizedExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterParenthesizedExpression(this);
	}
};

ParenthesizedExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitParenthesizedExpression(this);
	}
};


function ArrayConstructorContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArrayConstructorContext.prototype = Object.create(PrimaryExpressionContext.prototype);
ArrayConstructorContext.prototype.constructor = ArrayConstructorContext;

SqlBaseParser.ArrayConstructorContext = ArrayConstructorContext;

ArrayConstructorContext.prototype.ARRAY = function() {
    return this.getToken(SqlBaseParser.ARRAY, 0);
};

ArrayConstructorContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
ArrayConstructorContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterArrayConstructor(this);
	}
};

ArrayConstructorContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitArrayConstructor(this);
	}
};


function MapConstructorContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MapConstructorContext.prototype = Object.create(PrimaryExpressionContext.prototype);
MapConstructorContext.prototype.constructor = MapConstructorContext;

SqlBaseParser.MapConstructorContext = MapConstructorContext;

MapConstructorContext.prototype.MAP = function() {
    return this.getToken(SqlBaseParser.MAP, 0);
};

MapConstructorContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

MapConstructorContext.prototype.ASSIGN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.ASSIGN);
    } else {
        return this.getToken(SqlBaseParser.ASSIGN, i);
    }
};

MapConstructorContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterMapConstructor(this);
	}
};

MapConstructorContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitMapConstructor(this);
	}
};


function FunctionCallContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FunctionCallContext.prototype = Object.create(PrimaryExpressionContext.prototype);
FunctionCallContext.prototype.constructor = FunctionCallContext;

SqlBaseParser.FunctionCallContext = FunctionCallContext;

FunctionCallContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

FunctionCallContext.prototype.ASTERISK = function() {
    return this.getToken(SqlBaseParser.ASTERISK, 0);
};

FunctionCallContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
FunctionCallContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterFunctionCall(this);
	}
};

FunctionCallContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitFunctionCall(this);
	}
};


function SearchedCaseContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    this.elseExpression = null; // ExpressionContext;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SearchedCaseContext.prototype = Object.create(PrimaryExpressionContext.prototype);
SearchedCaseContext.prototype.constructor = SearchedCaseContext;

SqlBaseParser.SearchedCaseContext = SearchedCaseContext;

SearchedCaseContext.prototype.CASE = function() {
    return this.getToken(SqlBaseParser.CASE, 0);
};

SearchedCaseContext.prototype.END = function() {
    return this.getToken(SqlBaseParser.END, 0);
};

SearchedCaseContext.prototype.whenClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WhenClauseContext);
    } else {
        return this.getTypedRuleContext(WhenClauseContext,i);
    }
};

SearchedCaseContext.prototype.ELSE = function() {
    return this.getToken(SqlBaseParser.ELSE, 0);
};

SearchedCaseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
SearchedCaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterSearchedCase(this);
	}
};

SearchedCaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitSearchedCase(this);
	}
};


function LiteralExpressionContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiteralExpressionContext.prototype = Object.create(PrimaryExpressionContext.prototype);
LiteralExpressionContext.prototype.constructor = LiteralExpressionContext;

SqlBaseParser.LiteralExpressionContext = LiteralExpressionContext;

LiteralExpressionContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};
LiteralExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterLiteralExpression(this);
	}
};

LiteralExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitLiteralExpression(this);
	}
};



SqlBaseParser.prototype.primaryExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new PrimaryExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 78;
    this.enterRecursionRule(localctx, 78, SqlBaseParser.RULE_primaryExpression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 807;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,103,this._ctx);
        switch(la_) {
        case 1:
            localctx = new LiteralExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 694;
            this.literal();
            break;

        case 2:
            localctx = new TypeConstructorContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 695;
            this.identifier();
            this.state = 696;
            this.match(SqlBaseParser.STRING);
            break;

        case 3:
            localctx = new SimpleCaseContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 698;
            this.match(SqlBaseParser.CASE);
            this.state = 699;
            this.valueExpression(0);
            this.state = 701; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 700;
                this.whenClause();
                this.state = 703; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===SqlBaseParser.WHEN);
            this.state = 707;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.ELSE) {
                this.state = 705;
                this.match(SqlBaseParser.ELSE);
                this.state = 706;
                localctx.elseExpression = this.expression();
            }

            this.state = 709;
            this.match(SqlBaseParser.END);
            break;

        case 4:
            localctx = new SearchedCaseContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 711;
            this.match(SqlBaseParser.CASE);
            this.state = 713; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 712;
                this.whenClause();
                this.state = 715; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===SqlBaseParser.WHEN);
            this.state = 719;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.ELSE) {
                this.state = 717;
                this.match(SqlBaseParser.ELSE);
                this.state = 718;
                localctx.elseExpression = this.expression();
            }

            this.state = 721;
            this.match(SqlBaseParser.END);
            break;

        case 5:
            localctx = new CastContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 723;
            this.match(SqlBaseParser.CAST);
            this.state = 724;
            this.match(SqlBaseParser.T__2);
            this.state = 725;
            this.expression();
            this.state = 726;
            this.match(SqlBaseParser.AS);
            this.state = 727;
            this.type(0);
            this.state = 728;
            this.match(SqlBaseParser.T__3);
            break;

        case 6:
            localctx = new ArrayConstructorContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 730;
            this.match(SqlBaseParser.ARRAY);
            this.state = 731;
            this.match(SqlBaseParser.T__5);
            this.state = 740;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlBaseParser.T__2) | (1 << SqlBaseParser.EMIT) | (1 << SqlBaseParser.CHANGES) | (1 << SqlBaseParser.NOT) | (1 << SqlBaseParser.ESCAPE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SqlBaseParser.NULL - 32)) | (1 << (SqlBaseParser.TRUE - 32)) | (1 << (SqlBaseParser.FALSE - 32)) | (1 << (SqlBaseParser.INTEGER - 32)) | (1 << (SqlBaseParser.DATE - 32)) | (1 << (SqlBaseParser.TIME - 32)) | (1 << (SqlBaseParser.TIMESTAMP - 32)) | (1 << (SqlBaseParser.INTERVAL - 32)) | (1 << (SqlBaseParser.YEAR - 32)) | (1 << (SqlBaseParser.MONTH - 32)) | (1 << (SqlBaseParser.DAY - 32)) | (1 << (SqlBaseParser.HOUR - 32)) | (1 << (SqlBaseParser.MINUTE - 32)) | (1 << (SqlBaseParser.SECOND - 32)) | (1 << (SqlBaseParser.ZONE - 32)) | (1 << (SqlBaseParser.CASE - 32)))) !== 0) || ((((_la - 74)) & ~0x1f) == 0 && ((1 << (_la - 74)) & ((1 << (SqlBaseParser.PARTITION - 74)) | (1 << (SqlBaseParser.STRUCT - 74)) | (1 << (SqlBaseParser.EXPLAIN - 74)) | (1 << (SqlBaseParser.ANALYZE - 74)) | (1 << (SqlBaseParser.TYPE - 74)) | (1 << (SqlBaseParser.TYPES - 74)) | (1 << (SqlBaseParser.CAST - 74)) | (1 << (SqlBaseParser.SHOW - 74)) | (1 << (SqlBaseParser.TABLES - 74)) | (1 << (SqlBaseParser.COLUMNS - 74)) | (1 << (SqlBaseParser.COLUMN - 74)) | (1 << (SqlBaseParser.PARTITIONS - 74)) | (1 << (SqlBaseParser.FUNCTIONS - 74)))) !== 0) || ((((_la - 106)) & ~0x1f) == 0 && ((1 << (_la - 106)) & ((1 << (SqlBaseParser.FUNCTION - 106)) | (1 << (SqlBaseParser.ARRAY - 106)) | (1 << (SqlBaseParser.MAP - 106)) | (1 << (SqlBaseParser.SET - 106)) | (1 << (SqlBaseParser.RESET - 106)) | (1 << (SqlBaseParser.SESSION - 106)) | (1 << (SqlBaseParser.KEY - 106)) | (1 << (SqlBaseParser.SINK - 106)) | (1 << (SqlBaseParser.SOURCE - 106)) | (1 << (SqlBaseParser.PRIMARY - 106)) | (1 << (SqlBaseParser.IF - 106)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (SqlBaseParser.PLUS - 140)) | (1 << (SqlBaseParser.MINUS - 140)) | (1 << (SqlBaseParser.STRING - 140)) | (1 << (SqlBaseParser.INTEGER_VALUE - 140)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 140)) | (1 << (SqlBaseParser.FLOATING_POINT_VALUE - 140)) | (1 << (SqlBaseParser.IDENTIFIER - 140)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 140)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 140)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 140)))) !== 0)) {
                this.state = 732;
                this.expression();
                this.state = 737;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__1) {
                    this.state = 733;
                    this.match(SqlBaseParser.T__1);
                    this.state = 734;
                    this.expression();
                    this.state = 739;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 742;
            this.match(SqlBaseParser.T__6);
            break;

        case 7:
            localctx = new MapConstructorContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 743;
            this.match(SqlBaseParser.MAP);
            this.state = 744;
            this.match(SqlBaseParser.T__2);
            this.state = 758;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlBaseParser.T__2) | (1 << SqlBaseParser.EMIT) | (1 << SqlBaseParser.CHANGES) | (1 << SqlBaseParser.NOT) | (1 << SqlBaseParser.ESCAPE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SqlBaseParser.NULL - 32)) | (1 << (SqlBaseParser.TRUE - 32)) | (1 << (SqlBaseParser.FALSE - 32)) | (1 << (SqlBaseParser.INTEGER - 32)) | (1 << (SqlBaseParser.DATE - 32)) | (1 << (SqlBaseParser.TIME - 32)) | (1 << (SqlBaseParser.TIMESTAMP - 32)) | (1 << (SqlBaseParser.INTERVAL - 32)) | (1 << (SqlBaseParser.YEAR - 32)) | (1 << (SqlBaseParser.MONTH - 32)) | (1 << (SqlBaseParser.DAY - 32)) | (1 << (SqlBaseParser.HOUR - 32)) | (1 << (SqlBaseParser.MINUTE - 32)) | (1 << (SqlBaseParser.SECOND - 32)) | (1 << (SqlBaseParser.ZONE - 32)) | (1 << (SqlBaseParser.CASE - 32)))) !== 0) || ((((_la - 74)) & ~0x1f) == 0 && ((1 << (_la - 74)) & ((1 << (SqlBaseParser.PARTITION - 74)) | (1 << (SqlBaseParser.STRUCT - 74)) | (1 << (SqlBaseParser.EXPLAIN - 74)) | (1 << (SqlBaseParser.ANALYZE - 74)) | (1 << (SqlBaseParser.TYPE - 74)) | (1 << (SqlBaseParser.TYPES - 74)) | (1 << (SqlBaseParser.CAST - 74)) | (1 << (SqlBaseParser.SHOW - 74)) | (1 << (SqlBaseParser.TABLES - 74)) | (1 << (SqlBaseParser.COLUMNS - 74)) | (1 << (SqlBaseParser.COLUMN - 74)) | (1 << (SqlBaseParser.PARTITIONS - 74)) | (1 << (SqlBaseParser.FUNCTIONS - 74)))) !== 0) || ((((_la - 106)) & ~0x1f) == 0 && ((1 << (_la - 106)) & ((1 << (SqlBaseParser.FUNCTION - 106)) | (1 << (SqlBaseParser.ARRAY - 106)) | (1 << (SqlBaseParser.MAP - 106)) | (1 << (SqlBaseParser.SET - 106)) | (1 << (SqlBaseParser.RESET - 106)) | (1 << (SqlBaseParser.SESSION - 106)) | (1 << (SqlBaseParser.KEY - 106)) | (1 << (SqlBaseParser.SINK - 106)) | (1 << (SqlBaseParser.SOURCE - 106)) | (1 << (SqlBaseParser.PRIMARY - 106)) | (1 << (SqlBaseParser.IF - 106)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (SqlBaseParser.PLUS - 140)) | (1 << (SqlBaseParser.MINUS - 140)) | (1 << (SqlBaseParser.STRING - 140)) | (1 << (SqlBaseParser.INTEGER_VALUE - 140)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 140)) | (1 << (SqlBaseParser.FLOATING_POINT_VALUE - 140)) | (1 << (SqlBaseParser.IDENTIFIER - 140)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 140)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 140)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 140)))) !== 0)) {
                this.state = 745;
                this.expression();
                this.state = 746;
                this.match(SqlBaseParser.ASSIGN);
                this.state = 747;
                this.expression();
                this.state = 755;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__1) {
                    this.state = 748;
                    this.match(SqlBaseParser.T__1);
                    this.state = 749;
                    this.expression();
                    this.state = 750;
                    this.match(SqlBaseParser.ASSIGN);
                    this.state = 751;
                    this.expression();
                    this.state = 757;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 760;
            this.match(SqlBaseParser.T__3);
            break;

        case 8:
            localctx = new StructConstructorContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 761;
            this.match(SqlBaseParser.STRUCT);
            this.state = 762;
            this.match(SqlBaseParser.T__2);
            this.state = 776;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlBaseParser.EMIT) | (1 << SqlBaseParser.CHANGES) | (1 << SqlBaseParser.ESCAPE))) !== 0) || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (SqlBaseParser.INTEGER - 35)) | (1 << (SqlBaseParser.DATE - 35)) | (1 << (SqlBaseParser.TIME - 35)) | (1 << (SqlBaseParser.TIMESTAMP - 35)) | (1 << (SqlBaseParser.INTERVAL - 35)) | (1 << (SqlBaseParser.YEAR - 35)) | (1 << (SqlBaseParser.MONTH - 35)) | (1 << (SqlBaseParser.DAY - 35)) | (1 << (SqlBaseParser.HOUR - 35)) | (1 << (SqlBaseParser.MINUTE - 35)) | (1 << (SqlBaseParser.SECOND - 35)) | (1 << (SqlBaseParser.ZONE - 35)))) !== 0) || ((((_la - 74)) & ~0x1f) == 0 && ((1 << (_la - 74)) & ((1 << (SqlBaseParser.PARTITION - 74)) | (1 << (SqlBaseParser.STRUCT - 74)) | (1 << (SqlBaseParser.EXPLAIN - 74)) | (1 << (SqlBaseParser.ANALYZE - 74)) | (1 << (SqlBaseParser.TYPE - 74)) | (1 << (SqlBaseParser.TYPES - 74)) | (1 << (SqlBaseParser.SHOW - 74)) | (1 << (SqlBaseParser.TABLES - 74)) | (1 << (SqlBaseParser.COLUMNS - 74)) | (1 << (SqlBaseParser.COLUMN - 74)) | (1 << (SqlBaseParser.PARTITIONS - 74)) | (1 << (SqlBaseParser.FUNCTIONS - 74)))) !== 0) || ((((_la - 106)) & ~0x1f) == 0 && ((1 << (_la - 106)) & ((1 << (SqlBaseParser.FUNCTION - 106)) | (1 << (SqlBaseParser.ARRAY - 106)) | (1 << (SqlBaseParser.MAP - 106)) | (1 << (SqlBaseParser.SET - 106)) | (1 << (SqlBaseParser.RESET - 106)) | (1 << (SqlBaseParser.SESSION - 106)) | (1 << (SqlBaseParser.KEY - 106)) | (1 << (SqlBaseParser.SINK - 106)) | (1 << (SqlBaseParser.SOURCE - 106)) | (1 << (SqlBaseParser.PRIMARY - 106)) | (1 << (SqlBaseParser.IF - 106)))) !== 0) || ((((_la - 152)) & ~0x1f) == 0 && ((1 << (_la - 152)) & ((1 << (SqlBaseParser.IDENTIFIER - 152)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 152)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 152)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 152)))) !== 0)) {
                this.state = 763;
                this.identifier();
                this.state = 764;
                this.match(SqlBaseParser.ASSIGN);
                this.state = 765;
                this.expression();
                this.state = 773;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__1) {
                    this.state = 766;
                    this.match(SqlBaseParser.T__1);
                    this.state = 767;
                    this.identifier();
                    this.state = 768;
                    this.match(SqlBaseParser.ASSIGN);
                    this.state = 769;
                    this.expression();
                    this.state = 775;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 778;
            this.match(SqlBaseParser.T__3);
            break;

        case 9:
            localctx = new FunctionCallContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 779;
            this.identifier();
            this.state = 780;
            this.match(SqlBaseParser.T__2);
            this.state = 781;
            this.match(SqlBaseParser.ASTERISK);
            this.state = 782;
            this.match(SqlBaseParser.T__3);
            break;

        case 10:
            localctx = new FunctionCallContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 784;
            this.identifier();
            this.state = 785;
            this.match(SqlBaseParser.T__2);
            this.state = 794;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlBaseParser.T__2) | (1 << SqlBaseParser.EMIT) | (1 << SqlBaseParser.CHANGES) | (1 << SqlBaseParser.NOT) | (1 << SqlBaseParser.ESCAPE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SqlBaseParser.NULL - 32)) | (1 << (SqlBaseParser.TRUE - 32)) | (1 << (SqlBaseParser.FALSE - 32)) | (1 << (SqlBaseParser.INTEGER - 32)) | (1 << (SqlBaseParser.DATE - 32)) | (1 << (SqlBaseParser.TIME - 32)) | (1 << (SqlBaseParser.TIMESTAMP - 32)) | (1 << (SqlBaseParser.INTERVAL - 32)) | (1 << (SqlBaseParser.YEAR - 32)) | (1 << (SqlBaseParser.MONTH - 32)) | (1 << (SqlBaseParser.DAY - 32)) | (1 << (SqlBaseParser.HOUR - 32)) | (1 << (SqlBaseParser.MINUTE - 32)) | (1 << (SqlBaseParser.SECOND - 32)) | (1 << (SqlBaseParser.ZONE - 32)) | (1 << (SqlBaseParser.CASE - 32)))) !== 0) || ((((_la - 74)) & ~0x1f) == 0 && ((1 << (_la - 74)) & ((1 << (SqlBaseParser.PARTITION - 74)) | (1 << (SqlBaseParser.STRUCT - 74)) | (1 << (SqlBaseParser.EXPLAIN - 74)) | (1 << (SqlBaseParser.ANALYZE - 74)) | (1 << (SqlBaseParser.TYPE - 74)) | (1 << (SqlBaseParser.TYPES - 74)) | (1 << (SqlBaseParser.CAST - 74)) | (1 << (SqlBaseParser.SHOW - 74)) | (1 << (SqlBaseParser.TABLES - 74)) | (1 << (SqlBaseParser.COLUMNS - 74)) | (1 << (SqlBaseParser.COLUMN - 74)) | (1 << (SqlBaseParser.PARTITIONS - 74)) | (1 << (SqlBaseParser.FUNCTIONS - 74)))) !== 0) || ((((_la - 106)) & ~0x1f) == 0 && ((1 << (_la - 106)) & ((1 << (SqlBaseParser.FUNCTION - 106)) | (1 << (SqlBaseParser.ARRAY - 106)) | (1 << (SqlBaseParser.MAP - 106)) | (1 << (SqlBaseParser.SET - 106)) | (1 << (SqlBaseParser.RESET - 106)) | (1 << (SqlBaseParser.SESSION - 106)) | (1 << (SqlBaseParser.KEY - 106)) | (1 << (SqlBaseParser.SINK - 106)) | (1 << (SqlBaseParser.SOURCE - 106)) | (1 << (SqlBaseParser.PRIMARY - 106)) | (1 << (SqlBaseParser.IF - 106)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (SqlBaseParser.PLUS - 140)) | (1 << (SqlBaseParser.MINUS - 140)) | (1 << (SqlBaseParser.STRING - 140)) | (1 << (SqlBaseParser.INTEGER_VALUE - 140)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 140)) | (1 << (SqlBaseParser.FLOATING_POINT_VALUE - 140)) | (1 << (SqlBaseParser.IDENTIFIER - 140)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 140)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 140)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 140)))) !== 0)) {
                this.state = 786;
                this.expression();
                this.state = 791;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__1) {
                    this.state = 787;
                    this.match(SqlBaseParser.T__1);
                    this.state = 788;
                    this.expression();
                    this.state = 793;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 796;
            this.match(SqlBaseParser.T__3);
            break;

        case 11:
            localctx = new ColumnReferenceContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 798;
            this.identifier();
            break;

        case 12:
            localctx = new QualifiedColumnReferenceContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 799;
            this.identifier();
            this.state = 800;
            this.match(SqlBaseParser.T__4);
            this.state = 801;
            this.identifier();
            break;

        case 13:
            localctx = new ParenthesizedExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 803;
            this.match(SqlBaseParser.T__2);
            this.state = 804;
            this.expression();
            this.state = 805;
            this.match(SqlBaseParser.T__3);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 819;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,105,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 817;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,104,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new SubscriptContext(this, new PrimaryExpressionContext(this, _parentctx, _parentState));
                    localctx.value = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_primaryExpression);
                    this.state = 809;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 810;
                    this.match(SqlBaseParser.T__5);
                    this.state = 811;
                    localctx.index = this.valueExpression(0);
                    this.state = 812;
                    this.match(SqlBaseParser.T__6);
                    break;

                case 2:
                    localctx = new DereferenceContext(this, new PrimaryExpressionContext(this, _parentctx, _parentState));
                    localctx.base = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_primaryExpression);
                    this.state = 814;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 815;
                    this.match(SqlBaseParser.STRUCT_FIELD_REF);
                    this.state = 816;
                    localctx.fieldName = this.identifier();
                    break;

                } 
            }
            this.state = 821;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,105,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function TimeZoneSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_timeZoneSpecifier;
    return this;
}

TimeZoneSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TimeZoneSpecifierContext.prototype.constructor = TimeZoneSpecifierContext;


 
TimeZoneSpecifierContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function TimeZoneStringContext(parser, ctx) {
	TimeZoneSpecifierContext.call(this, parser);
    TimeZoneSpecifierContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TimeZoneStringContext.prototype = Object.create(TimeZoneSpecifierContext.prototype);
TimeZoneStringContext.prototype.constructor = TimeZoneStringContext;

SqlBaseParser.TimeZoneStringContext = TimeZoneStringContext;

TimeZoneStringContext.prototype.TIME = function() {
    return this.getToken(SqlBaseParser.TIME, 0);
};

TimeZoneStringContext.prototype.ZONE = function() {
    return this.getToken(SqlBaseParser.ZONE, 0);
};

TimeZoneStringContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};
TimeZoneStringContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterTimeZoneString(this);
	}
};

TimeZoneStringContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitTimeZoneString(this);
	}
};



SqlBaseParser.TimeZoneSpecifierContext = TimeZoneSpecifierContext;

SqlBaseParser.prototype.timeZoneSpecifier = function() {

    var localctx = new TimeZoneSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, SqlBaseParser.RULE_timeZoneSpecifier);
    try {
        localctx = new TimeZoneStringContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 822;
        this.match(SqlBaseParser.TIME);
        this.state = 823;
        this.match(SqlBaseParser.ZONE);
        this.state = 824;
        this.match(SqlBaseParser.STRING);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ComparisonOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_comparisonOperator;
    return this;
}

ComparisonOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComparisonOperatorContext.prototype.constructor = ComparisonOperatorContext;

ComparisonOperatorContext.prototype.EQ = function() {
    return this.getToken(SqlBaseParser.EQ, 0);
};

ComparisonOperatorContext.prototype.NEQ = function() {
    return this.getToken(SqlBaseParser.NEQ, 0);
};

ComparisonOperatorContext.prototype.LT = function() {
    return this.getToken(SqlBaseParser.LT, 0);
};

ComparisonOperatorContext.prototype.LTE = function() {
    return this.getToken(SqlBaseParser.LTE, 0);
};

ComparisonOperatorContext.prototype.GT = function() {
    return this.getToken(SqlBaseParser.GT, 0);
};

ComparisonOperatorContext.prototype.GTE = function() {
    return this.getToken(SqlBaseParser.GTE, 0);
};

ComparisonOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterComparisonOperator(this);
	}
};

ComparisonOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitComparisonOperator(this);
	}
};




SqlBaseParser.ComparisonOperatorContext = ComparisonOperatorContext;

SqlBaseParser.prototype.comparisonOperator = function() {

    var localctx = new ComparisonOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, SqlBaseParser.RULE_comparisonOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 826;
        _la = this._input.LA(1);
        if(!(((((_la - 134)) & ~0x1f) == 0 && ((1 << (_la - 134)) & ((1 << (SqlBaseParser.EQ - 134)) | (1 << (SqlBaseParser.NEQ - 134)) | (1 << (SqlBaseParser.LT - 134)) | (1 << (SqlBaseParser.LTE - 134)) | (1 << (SqlBaseParser.GT - 134)) | (1 << (SqlBaseParser.GTE - 134)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BooleanValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_booleanValue;
    return this;
}

BooleanValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BooleanValueContext.prototype.constructor = BooleanValueContext;

BooleanValueContext.prototype.TRUE = function() {
    return this.getToken(SqlBaseParser.TRUE, 0);
};

BooleanValueContext.prototype.FALSE = function() {
    return this.getToken(SqlBaseParser.FALSE, 0);
};

BooleanValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterBooleanValue(this);
	}
};

BooleanValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitBooleanValue(this);
	}
};




SqlBaseParser.BooleanValueContext = BooleanValueContext;

SqlBaseParser.prototype.booleanValue = function() {

    var localctx = new BooleanValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, SqlBaseParser.RULE_booleanValue);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 828;
        _la = this._input.LA(1);
        if(!(_la===SqlBaseParser.TRUE || _la===SqlBaseParser.FALSE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_type;
    return this;
}

TypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeContext.prototype.constructor = TypeContext;

TypeContext.prototype.ARRAY = function() {
    return this.getToken(SqlBaseParser.ARRAY, 0);
};

TypeContext.prototype.LT = function() {
    return this.getToken(SqlBaseParser.LT, 0);
};

TypeContext.prototype.type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeContext);
    } else {
        return this.getTypedRuleContext(TypeContext,i);
    }
};

TypeContext.prototype.GT = function() {
    return this.getToken(SqlBaseParser.GT, 0);
};

TypeContext.prototype.MAP = function() {
    return this.getToken(SqlBaseParser.MAP, 0);
};

TypeContext.prototype.STRUCT = function() {
    return this.getToken(SqlBaseParser.STRUCT, 0);
};

TypeContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

TypeContext.prototype.DECIMAL = function() {
    return this.getToken(SqlBaseParser.DECIMAL, 0);
};

TypeContext.prototype.number = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NumberContext);
    } else {
        return this.getTypedRuleContext(NumberContext,i);
    }
};

TypeContext.prototype.baseType = function() {
    return this.getTypedRuleContext(BaseTypeContext,0);
};

TypeContext.prototype.typeParameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeParameterContext);
    } else {
        return this.getTypedRuleContext(TypeParameterContext,i);
    }
};

TypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterType(this);
	}
};

TypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitType(this);
	}
};



SqlBaseParser.prototype.type = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new TypeContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 86;
    this.enterRecursionRule(localctx, 86, SqlBaseParser.RULE_type, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 880;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,110,this._ctx);
        switch(la_) {
        case 1:
            this.state = 831;
            this.match(SqlBaseParser.ARRAY);
            this.state = 832;
            this.match(SqlBaseParser.LT);
            this.state = 833;
            this.type(0);
            this.state = 834;
            this.match(SqlBaseParser.GT);
            break;

        case 2:
            this.state = 836;
            this.match(SqlBaseParser.MAP);
            this.state = 837;
            this.match(SqlBaseParser.LT);
            this.state = 838;
            this.type(0);
            this.state = 839;
            this.match(SqlBaseParser.T__1);
            this.state = 840;
            this.type(0);
            this.state = 841;
            this.match(SqlBaseParser.GT);
            break;

        case 3:
            this.state = 843;
            this.match(SqlBaseParser.STRUCT);
            this.state = 844;
            this.match(SqlBaseParser.LT);
            this.state = 856;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlBaseParser.EMIT) | (1 << SqlBaseParser.CHANGES) | (1 << SqlBaseParser.ESCAPE))) !== 0) || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (SqlBaseParser.INTEGER - 35)) | (1 << (SqlBaseParser.DATE - 35)) | (1 << (SqlBaseParser.TIME - 35)) | (1 << (SqlBaseParser.TIMESTAMP - 35)) | (1 << (SqlBaseParser.INTERVAL - 35)) | (1 << (SqlBaseParser.YEAR - 35)) | (1 << (SqlBaseParser.MONTH - 35)) | (1 << (SqlBaseParser.DAY - 35)) | (1 << (SqlBaseParser.HOUR - 35)) | (1 << (SqlBaseParser.MINUTE - 35)) | (1 << (SqlBaseParser.SECOND - 35)) | (1 << (SqlBaseParser.ZONE - 35)))) !== 0) || ((((_la - 74)) & ~0x1f) == 0 && ((1 << (_la - 74)) & ((1 << (SqlBaseParser.PARTITION - 74)) | (1 << (SqlBaseParser.STRUCT - 74)) | (1 << (SqlBaseParser.EXPLAIN - 74)) | (1 << (SqlBaseParser.ANALYZE - 74)) | (1 << (SqlBaseParser.TYPE - 74)) | (1 << (SqlBaseParser.TYPES - 74)) | (1 << (SqlBaseParser.SHOW - 74)) | (1 << (SqlBaseParser.TABLES - 74)) | (1 << (SqlBaseParser.COLUMNS - 74)) | (1 << (SqlBaseParser.COLUMN - 74)) | (1 << (SqlBaseParser.PARTITIONS - 74)) | (1 << (SqlBaseParser.FUNCTIONS - 74)))) !== 0) || ((((_la - 106)) & ~0x1f) == 0 && ((1 << (_la - 106)) & ((1 << (SqlBaseParser.FUNCTION - 106)) | (1 << (SqlBaseParser.ARRAY - 106)) | (1 << (SqlBaseParser.MAP - 106)) | (1 << (SqlBaseParser.SET - 106)) | (1 << (SqlBaseParser.RESET - 106)) | (1 << (SqlBaseParser.SESSION - 106)) | (1 << (SqlBaseParser.KEY - 106)) | (1 << (SqlBaseParser.SINK - 106)) | (1 << (SqlBaseParser.SOURCE - 106)) | (1 << (SqlBaseParser.PRIMARY - 106)) | (1 << (SqlBaseParser.IF - 106)))) !== 0) || ((((_la - 152)) & ~0x1f) == 0 && ((1 << (_la - 152)) & ((1 << (SqlBaseParser.IDENTIFIER - 152)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 152)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 152)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 152)))) !== 0)) {
                this.state = 845;
                this.identifier();
                this.state = 846;
                this.type(0);
                this.state = 853;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__1) {
                    this.state = 847;
                    this.match(SqlBaseParser.T__1);
                    this.state = 848;
                    this.identifier();
                    this.state = 849;
                    this.type(0);
                    this.state = 855;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 858;
            this.match(SqlBaseParser.GT);
            break;

        case 4:
            this.state = 859;
            this.match(SqlBaseParser.DECIMAL);
            this.state = 860;
            this.match(SqlBaseParser.T__2);
            this.state = 861;
            this.number();
            this.state = 862;
            this.match(SqlBaseParser.T__1);
            this.state = 863;
            this.number();
            this.state = 864;
            this.match(SqlBaseParser.T__3);
            break;

        case 5:
            this.state = 866;
            this.baseType();
            this.state = 878;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,109,this._ctx);
            if(la_===1) {
                this.state = 867;
                this.match(SqlBaseParser.T__2);
                this.state = 868;
                this.typeParameter();
                this.state = 873;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__1) {
                    this.state = 869;
                    this.match(SqlBaseParser.T__1);
                    this.state = 870;
                    this.typeParameter();
                    this.state = 875;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 876;
                this.match(SqlBaseParser.T__3);

            }
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 886;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,111,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new TypeContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_type);
                this.state = 882;
                if (!( this.precpred(this._ctx, 6))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                }
                this.state = 883;
                this.match(SqlBaseParser.ARRAY); 
            }
            this.state = 888;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,111,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function TypeParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_typeParameter;
    return this;
}

TypeParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeParameterContext.prototype.constructor = TypeParameterContext;

TypeParameterContext.prototype.INTEGER_VALUE = function() {
    return this.getToken(SqlBaseParser.INTEGER_VALUE, 0);
};

TypeParameterContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

TypeParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterTypeParameter(this);
	}
};

TypeParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitTypeParameter(this);
	}
};




SqlBaseParser.TypeParameterContext = TypeParameterContext;

SqlBaseParser.prototype.typeParameter = function() {

    var localctx = new TypeParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, SqlBaseParser.RULE_typeParameter);
    try {
        this.state = 891;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.INTEGER_VALUE:
            this.enterOuterAlt(localctx, 1);
            this.state = 889;
            this.match(SqlBaseParser.INTEGER_VALUE);
            break;
        case SqlBaseParser.EMIT:
        case SqlBaseParser.CHANGES:
        case SqlBaseParser.ESCAPE:
        case SqlBaseParser.INTEGER:
        case SqlBaseParser.DATE:
        case SqlBaseParser.TIME:
        case SqlBaseParser.TIMESTAMP:
        case SqlBaseParser.INTERVAL:
        case SqlBaseParser.YEAR:
        case SqlBaseParser.MONTH:
        case SqlBaseParser.DAY:
        case SqlBaseParser.HOUR:
        case SqlBaseParser.MINUTE:
        case SqlBaseParser.SECOND:
        case SqlBaseParser.ZONE:
        case SqlBaseParser.PARTITION:
        case SqlBaseParser.STRUCT:
        case SqlBaseParser.EXPLAIN:
        case SqlBaseParser.ANALYZE:
        case SqlBaseParser.TYPE:
        case SqlBaseParser.TYPES:
        case SqlBaseParser.SHOW:
        case SqlBaseParser.TABLES:
        case SqlBaseParser.COLUMNS:
        case SqlBaseParser.COLUMN:
        case SqlBaseParser.PARTITIONS:
        case SqlBaseParser.FUNCTIONS:
        case SqlBaseParser.FUNCTION:
        case SqlBaseParser.ARRAY:
        case SqlBaseParser.MAP:
        case SqlBaseParser.SET:
        case SqlBaseParser.RESET:
        case SqlBaseParser.SESSION:
        case SqlBaseParser.DECIMAL:
        case SqlBaseParser.KEY:
        case SqlBaseParser.SINK:
        case SqlBaseParser.SOURCE:
        case SqlBaseParser.PRIMARY:
        case SqlBaseParser.IF:
        case SqlBaseParser.IDENTIFIER:
        case SqlBaseParser.DIGIT_IDENTIFIER:
        case SqlBaseParser.QUOTED_IDENTIFIER:
        case SqlBaseParser.BACKQUOTED_IDENTIFIER:
            this.enterOuterAlt(localctx, 2);
            this.state = 890;
            this.type(0);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BaseTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_baseType;
    return this;
}

BaseTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BaseTypeContext.prototype.constructor = BaseTypeContext;

BaseTypeContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

BaseTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterBaseType(this);
	}
};

BaseTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitBaseType(this);
	}
};




SqlBaseParser.BaseTypeContext = BaseTypeContext;

SqlBaseParser.prototype.baseType = function() {

    var localctx = new BaseTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, SqlBaseParser.RULE_baseType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 893;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WhenClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_whenClause;
    this.condition = null; // ExpressionContext
    this.result = null; // ExpressionContext
    return this;
}

WhenClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhenClauseContext.prototype.constructor = WhenClauseContext;

WhenClauseContext.prototype.WHEN = function() {
    return this.getToken(SqlBaseParser.WHEN, 0);
};

WhenClauseContext.prototype.THEN = function() {
    return this.getToken(SqlBaseParser.THEN, 0);
};

WhenClauseContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

WhenClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterWhenClause(this);
	}
};

WhenClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitWhenClause(this);
	}
};




SqlBaseParser.WhenClauseContext = WhenClauseContext;

SqlBaseParser.prototype.whenClause = function() {

    var localctx = new WhenClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, SqlBaseParser.RULE_whenClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 895;
        this.match(SqlBaseParser.WHEN);
        this.state = 896;
        localctx.condition = this.expression();
        this.state = 897;
        this.match(SqlBaseParser.THEN);
        this.state = 898;
        localctx.result = this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_identifier;
    return this;
}

IdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierContext.prototype.constructor = IdentifierContext;


 
IdentifierContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function BackQuotedIdentifierContext(parser, ctx) {
	IdentifierContext.call(this, parser);
    IdentifierContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BackQuotedIdentifierContext.prototype = Object.create(IdentifierContext.prototype);
BackQuotedIdentifierContext.prototype.constructor = BackQuotedIdentifierContext;

SqlBaseParser.BackQuotedIdentifierContext = BackQuotedIdentifierContext;

BackQuotedIdentifierContext.prototype.BACKQUOTED_IDENTIFIER = function() {
    return this.getToken(SqlBaseParser.BACKQUOTED_IDENTIFIER, 0);
};
BackQuotedIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterBackQuotedIdentifier(this);
	}
};

BackQuotedIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitBackQuotedIdentifier(this);
	}
};


function QuotedIdentifierAlternativeContext(parser, ctx) {
	IdentifierContext.call(this, parser);
    IdentifierContext.prototype.copyFrom.call(this, ctx);
    return this;
}

QuotedIdentifierAlternativeContext.prototype = Object.create(IdentifierContext.prototype);
QuotedIdentifierAlternativeContext.prototype.constructor = QuotedIdentifierAlternativeContext;

SqlBaseParser.QuotedIdentifierAlternativeContext = QuotedIdentifierAlternativeContext;

QuotedIdentifierAlternativeContext.prototype.QUOTED_IDENTIFIER = function() {
    return this.getToken(SqlBaseParser.QUOTED_IDENTIFIER, 0);
};
QuotedIdentifierAlternativeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterQuotedIdentifierAlternative(this);
	}
};

QuotedIdentifierAlternativeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitQuotedIdentifierAlternative(this);
	}
};


function DigitIdentifierContext(parser, ctx) {
	IdentifierContext.call(this, parser);
    IdentifierContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DigitIdentifierContext.prototype = Object.create(IdentifierContext.prototype);
DigitIdentifierContext.prototype.constructor = DigitIdentifierContext;

SqlBaseParser.DigitIdentifierContext = DigitIdentifierContext;

DigitIdentifierContext.prototype.DIGIT_IDENTIFIER = function() {
    return this.getToken(SqlBaseParser.DIGIT_IDENTIFIER, 0);
};
DigitIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterDigitIdentifier(this);
	}
};

DigitIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitDigitIdentifier(this);
	}
};


function UnquotedIdentifierContext(parser, ctx) {
	IdentifierContext.call(this, parser);
    IdentifierContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnquotedIdentifierContext.prototype = Object.create(IdentifierContext.prototype);
UnquotedIdentifierContext.prototype.constructor = UnquotedIdentifierContext;

SqlBaseParser.UnquotedIdentifierContext = UnquotedIdentifierContext;

UnquotedIdentifierContext.prototype.IDENTIFIER = function() {
    return this.getToken(SqlBaseParser.IDENTIFIER, 0);
};

UnquotedIdentifierContext.prototype.nonReserved = function() {
    return this.getTypedRuleContext(NonReservedContext,0);
};
UnquotedIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterUnquotedIdentifier(this);
	}
};

UnquotedIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitUnquotedIdentifier(this);
	}
};



SqlBaseParser.IdentifierContext = IdentifierContext;

SqlBaseParser.prototype.identifier = function() {

    var localctx = new IdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, SqlBaseParser.RULE_identifier);
    try {
        this.state = 905;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.IDENTIFIER:
            localctx = new UnquotedIdentifierContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 900;
            this.match(SqlBaseParser.IDENTIFIER);
            break;
        case SqlBaseParser.QUOTED_IDENTIFIER:
            localctx = new QuotedIdentifierAlternativeContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 901;
            this.match(SqlBaseParser.QUOTED_IDENTIFIER);
            break;
        case SqlBaseParser.EMIT:
        case SqlBaseParser.CHANGES:
        case SqlBaseParser.ESCAPE:
        case SqlBaseParser.INTEGER:
        case SqlBaseParser.DATE:
        case SqlBaseParser.TIME:
        case SqlBaseParser.TIMESTAMP:
        case SqlBaseParser.INTERVAL:
        case SqlBaseParser.YEAR:
        case SqlBaseParser.MONTH:
        case SqlBaseParser.DAY:
        case SqlBaseParser.HOUR:
        case SqlBaseParser.MINUTE:
        case SqlBaseParser.SECOND:
        case SqlBaseParser.ZONE:
        case SqlBaseParser.PARTITION:
        case SqlBaseParser.STRUCT:
        case SqlBaseParser.EXPLAIN:
        case SqlBaseParser.ANALYZE:
        case SqlBaseParser.TYPE:
        case SqlBaseParser.TYPES:
        case SqlBaseParser.SHOW:
        case SqlBaseParser.TABLES:
        case SqlBaseParser.COLUMNS:
        case SqlBaseParser.COLUMN:
        case SqlBaseParser.PARTITIONS:
        case SqlBaseParser.FUNCTIONS:
        case SqlBaseParser.FUNCTION:
        case SqlBaseParser.ARRAY:
        case SqlBaseParser.MAP:
        case SqlBaseParser.SET:
        case SqlBaseParser.RESET:
        case SqlBaseParser.SESSION:
        case SqlBaseParser.KEY:
        case SqlBaseParser.SINK:
        case SqlBaseParser.SOURCE:
        case SqlBaseParser.PRIMARY:
        case SqlBaseParser.IF:
            localctx = new UnquotedIdentifierContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 902;
            this.nonReserved();
            break;
        case SqlBaseParser.BACKQUOTED_IDENTIFIER:
            localctx = new BackQuotedIdentifierContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 903;
            this.match(SqlBaseParser.BACKQUOTED_IDENTIFIER);
            break;
        case SqlBaseParser.DIGIT_IDENTIFIER:
            localctx = new DigitIdentifierContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 904;
            this.match(SqlBaseParser.DIGIT_IDENTIFIER);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SourceNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_sourceName;
    return this;
}

SourceNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SourceNameContext.prototype.constructor = SourceNameContext;

SourceNameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

SourceNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterSourceName(this);
	}
};

SourceNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitSourceName(this);
	}
};




SqlBaseParser.SourceNameContext = SourceNameContext;

SqlBaseParser.prototype.sourceName = function() {

    var localctx = new SourceNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, SqlBaseParser.RULE_sourceName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 907;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NumberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_number;
    return this;
}

NumberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumberContext.prototype.constructor = NumberContext;


 
NumberContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function DecimalLiteralContext(parser, ctx) {
	NumberContext.call(this, parser);
    NumberContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DecimalLiteralContext.prototype = Object.create(NumberContext.prototype);
DecimalLiteralContext.prototype.constructor = DecimalLiteralContext;

SqlBaseParser.DecimalLiteralContext = DecimalLiteralContext;

DecimalLiteralContext.prototype.DECIMAL_VALUE = function() {
    return this.getToken(SqlBaseParser.DECIMAL_VALUE, 0);
};
DecimalLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterDecimalLiteral(this);
	}
};

DecimalLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitDecimalLiteral(this);
	}
};


function FloatLiteralContext(parser, ctx) {
	NumberContext.call(this, parser);
    NumberContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FloatLiteralContext.prototype = Object.create(NumberContext.prototype);
FloatLiteralContext.prototype.constructor = FloatLiteralContext;

SqlBaseParser.FloatLiteralContext = FloatLiteralContext;

FloatLiteralContext.prototype.FLOATING_POINT_VALUE = function() {
    return this.getToken(SqlBaseParser.FLOATING_POINT_VALUE, 0);
};
FloatLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterFloatLiteral(this);
	}
};

FloatLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitFloatLiteral(this);
	}
};


function IntegerLiteralContext(parser, ctx) {
	NumberContext.call(this, parser);
    NumberContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IntegerLiteralContext.prototype = Object.create(NumberContext.prototype);
IntegerLiteralContext.prototype.constructor = IntegerLiteralContext;

SqlBaseParser.IntegerLiteralContext = IntegerLiteralContext;

IntegerLiteralContext.prototype.INTEGER_VALUE = function() {
    return this.getToken(SqlBaseParser.INTEGER_VALUE, 0);
};
IntegerLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterIntegerLiteral(this);
	}
};

IntegerLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitIntegerLiteral(this);
	}
};



SqlBaseParser.NumberContext = NumberContext;

SqlBaseParser.prototype.number = function() {

    var localctx = new NumberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, SqlBaseParser.RULE_number);
    try {
        this.state = 912;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.DECIMAL_VALUE:
            localctx = new DecimalLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 909;
            this.match(SqlBaseParser.DECIMAL_VALUE);
            break;
        case SqlBaseParser.FLOATING_POINT_VALUE:
            localctx = new FloatLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 910;
            this.match(SqlBaseParser.FLOATING_POINT_VALUE);
            break;
        case SqlBaseParser.INTEGER_VALUE:
            localctx = new IntegerLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 911;
            this.match(SqlBaseParser.INTEGER_VALUE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_literal;
    return this;
}

LiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralContext.prototype.constructor = LiteralContext;


 
LiteralContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function NullLiteralContext(parser, ctx) {
	LiteralContext.call(this, parser);
    LiteralContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NullLiteralContext.prototype = Object.create(LiteralContext.prototype);
NullLiteralContext.prototype.constructor = NullLiteralContext;

SqlBaseParser.NullLiteralContext = NullLiteralContext;

NullLiteralContext.prototype.NULL = function() {
    return this.getToken(SqlBaseParser.NULL, 0);
};
NullLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterNullLiteral(this);
	}
};

NullLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitNullLiteral(this);
	}
};


function StringLiteralContext(parser, ctx) {
	LiteralContext.call(this, parser);
    LiteralContext.prototype.copyFrom.call(this, ctx);
    return this;
}

StringLiteralContext.prototype = Object.create(LiteralContext.prototype);
StringLiteralContext.prototype.constructor = StringLiteralContext;

SqlBaseParser.StringLiteralContext = StringLiteralContext;

StringLiteralContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};
StringLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterStringLiteral(this);
	}
};

StringLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitStringLiteral(this);
	}
};


function NumericLiteralContext(parser, ctx) {
	LiteralContext.call(this, parser);
    LiteralContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NumericLiteralContext.prototype = Object.create(LiteralContext.prototype);
NumericLiteralContext.prototype.constructor = NumericLiteralContext;

SqlBaseParser.NumericLiteralContext = NumericLiteralContext;

NumericLiteralContext.prototype.number = function() {
    return this.getTypedRuleContext(NumberContext,0);
};
NumericLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterNumericLiteral(this);
	}
};

NumericLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitNumericLiteral(this);
	}
};


function BooleanLiteralContext(parser, ctx) {
	LiteralContext.call(this, parser);
    LiteralContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BooleanLiteralContext.prototype = Object.create(LiteralContext.prototype);
BooleanLiteralContext.prototype.constructor = BooleanLiteralContext;

SqlBaseParser.BooleanLiteralContext = BooleanLiteralContext;

BooleanLiteralContext.prototype.booleanValue = function() {
    return this.getTypedRuleContext(BooleanValueContext,0);
};
BooleanLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterBooleanLiteral(this);
	}
};

BooleanLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitBooleanLiteral(this);
	}
};



SqlBaseParser.LiteralContext = LiteralContext;

SqlBaseParser.prototype.literal = function() {

    var localctx = new LiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, SqlBaseParser.RULE_literal);
    try {
        this.state = 918;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.NULL:
            localctx = new NullLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 914;
            this.match(SqlBaseParser.NULL);
            break;
        case SqlBaseParser.INTEGER_VALUE:
        case SqlBaseParser.DECIMAL_VALUE:
        case SqlBaseParser.FLOATING_POINT_VALUE:
            localctx = new NumericLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 915;
            this.number();
            break;
        case SqlBaseParser.TRUE:
        case SqlBaseParser.FALSE:
            localctx = new BooleanLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 916;
            this.booleanValue();
            break;
        case SqlBaseParser.STRING:
            localctx = new StringLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 917;
            this.match(SqlBaseParser.STRING);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NonReservedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_nonReserved;
    return this;
}

NonReservedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NonReservedContext.prototype.constructor = NonReservedContext;

NonReservedContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};

NonReservedContext.prototype.TABLES = function() {
    return this.getToken(SqlBaseParser.TABLES, 0);
};

NonReservedContext.prototype.COLUMNS = function() {
    return this.getToken(SqlBaseParser.COLUMNS, 0);
};

NonReservedContext.prototype.COLUMN = function() {
    return this.getToken(SqlBaseParser.COLUMN, 0);
};

NonReservedContext.prototype.PARTITIONS = function() {
    return this.getToken(SqlBaseParser.PARTITIONS, 0);
};

NonReservedContext.prototype.FUNCTIONS = function() {
    return this.getToken(SqlBaseParser.FUNCTIONS, 0);
};

NonReservedContext.prototype.FUNCTION = function() {
    return this.getToken(SqlBaseParser.FUNCTION, 0);
};

NonReservedContext.prototype.SESSION = function() {
    return this.getToken(SqlBaseParser.SESSION, 0);
};

NonReservedContext.prototype.STRUCT = function() {
    return this.getToken(SqlBaseParser.STRUCT, 0);
};

NonReservedContext.prototype.MAP = function() {
    return this.getToken(SqlBaseParser.MAP, 0);
};

NonReservedContext.prototype.ARRAY = function() {
    return this.getToken(SqlBaseParser.ARRAY, 0);
};

NonReservedContext.prototype.PARTITION = function() {
    return this.getToken(SqlBaseParser.PARTITION, 0);
};

NonReservedContext.prototype.INTEGER = function() {
    return this.getToken(SqlBaseParser.INTEGER, 0);
};

NonReservedContext.prototype.DATE = function() {
    return this.getToken(SqlBaseParser.DATE, 0);
};

NonReservedContext.prototype.TIME = function() {
    return this.getToken(SqlBaseParser.TIME, 0);
};

NonReservedContext.prototype.TIMESTAMP = function() {
    return this.getToken(SqlBaseParser.TIMESTAMP, 0);
};

NonReservedContext.prototype.INTERVAL = function() {
    return this.getToken(SqlBaseParser.INTERVAL, 0);
};

NonReservedContext.prototype.ZONE = function() {
    return this.getToken(SqlBaseParser.ZONE, 0);
};

NonReservedContext.prototype.YEAR = function() {
    return this.getToken(SqlBaseParser.YEAR, 0);
};

NonReservedContext.prototype.MONTH = function() {
    return this.getToken(SqlBaseParser.MONTH, 0);
};

NonReservedContext.prototype.DAY = function() {
    return this.getToken(SqlBaseParser.DAY, 0);
};

NonReservedContext.prototype.HOUR = function() {
    return this.getToken(SqlBaseParser.HOUR, 0);
};

NonReservedContext.prototype.MINUTE = function() {
    return this.getToken(SqlBaseParser.MINUTE, 0);
};

NonReservedContext.prototype.SECOND = function() {
    return this.getToken(SqlBaseParser.SECOND, 0);
};

NonReservedContext.prototype.EXPLAIN = function() {
    return this.getToken(SqlBaseParser.EXPLAIN, 0);
};

NonReservedContext.prototype.ANALYZE = function() {
    return this.getToken(SqlBaseParser.ANALYZE, 0);
};

NonReservedContext.prototype.TYPE = function() {
    return this.getToken(SqlBaseParser.TYPE, 0);
};

NonReservedContext.prototype.TYPES = function() {
    return this.getToken(SqlBaseParser.TYPES, 0);
};

NonReservedContext.prototype.SET = function() {
    return this.getToken(SqlBaseParser.SET, 0);
};

NonReservedContext.prototype.RESET = function() {
    return this.getToken(SqlBaseParser.RESET, 0);
};

NonReservedContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

NonReservedContext.prototype.SOURCE = function() {
    return this.getToken(SqlBaseParser.SOURCE, 0);
};

NonReservedContext.prototype.SINK = function() {
    return this.getToken(SqlBaseParser.SINK, 0);
};

NonReservedContext.prototype.PRIMARY = function() {
    return this.getToken(SqlBaseParser.PRIMARY, 0);
};

NonReservedContext.prototype.KEY = function() {
    return this.getToken(SqlBaseParser.KEY, 0);
};

NonReservedContext.prototype.EMIT = function() {
    return this.getToken(SqlBaseParser.EMIT, 0);
};

NonReservedContext.prototype.CHANGES = function() {
    return this.getToken(SqlBaseParser.CHANGES, 0);
};

NonReservedContext.prototype.ESCAPE = function() {
    return this.getToken(SqlBaseParser.ESCAPE, 0);
};

NonReservedContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterNonReserved(this);
	}
};

NonReservedContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitNonReserved(this);
	}
};




SqlBaseParser.NonReservedContext = NonReservedContext;

SqlBaseParser.prototype.nonReserved = function() {

    var localctx = new NonReservedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, SqlBaseParser.RULE_nonReserved);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 920;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlBaseParser.EMIT) | (1 << SqlBaseParser.CHANGES) | (1 << SqlBaseParser.ESCAPE))) !== 0) || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (SqlBaseParser.INTEGER - 35)) | (1 << (SqlBaseParser.DATE - 35)) | (1 << (SqlBaseParser.TIME - 35)) | (1 << (SqlBaseParser.TIMESTAMP - 35)) | (1 << (SqlBaseParser.INTERVAL - 35)) | (1 << (SqlBaseParser.YEAR - 35)) | (1 << (SqlBaseParser.MONTH - 35)) | (1 << (SqlBaseParser.DAY - 35)) | (1 << (SqlBaseParser.HOUR - 35)) | (1 << (SqlBaseParser.MINUTE - 35)) | (1 << (SqlBaseParser.SECOND - 35)) | (1 << (SqlBaseParser.ZONE - 35)))) !== 0) || ((((_la - 74)) & ~0x1f) == 0 && ((1 << (_la - 74)) & ((1 << (SqlBaseParser.PARTITION - 74)) | (1 << (SqlBaseParser.STRUCT - 74)) | (1 << (SqlBaseParser.EXPLAIN - 74)) | (1 << (SqlBaseParser.ANALYZE - 74)) | (1 << (SqlBaseParser.TYPE - 74)) | (1 << (SqlBaseParser.TYPES - 74)) | (1 << (SqlBaseParser.SHOW - 74)) | (1 << (SqlBaseParser.TABLES - 74)) | (1 << (SqlBaseParser.COLUMNS - 74)) | (1 << (SqlBaseParser.COLUMN - 74)) | (1 << (SqlBaseParser.PARTITIONS - 74)) | (1 << (SqlBaseParser.FUNCTIONS - 74)))) !== 0) || ((((_la - 106)) & ~0x1f) == 0 && ((1 << (_la - 106)) & ((1 << (SqlBaseParser.FUNCTION - 106)) | (1 << (SqlBaseParser.ARRAY - 106)) | (1 << (SqlBaseParser.MAP - 106)) | (1 << (SqlBaseParser.SET - 106)) | (1 << (SqlBaseParser.RESET - 106)) | (1 << (SqlBaseParser.SESSION - 106)) | (1 << (SqlBaseParser.KEY - 106)) | (1 << (SqlBaseParser.SINK - 106)) | (1 << (SqlBaseParser.SOURCE - 106)) | (1 << (SqlBaseParser.PRIMARY - 106)) | (1 << (SqlBaseParser.IF - 106)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


SqlBaseParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 35:
			return this.booleanExpression_sempred(localctx, predIndex);
	case 38:
			return this.valueExpression_sempred(localctx, predIndex);
	case 39:
			return this.primaryExpression_sempred(localctx, predIndex);
	case 43:
			return this.type_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

SqlBaseParser.prototype.booleanExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 2);
		case 1:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SqlBaseParser.prototype.valueExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 2:
			return this.precpred(this._ctx, 3);
		case 3:
			return this.precpred(this._ctx, 2);
		case 4:
			return this.precpred(this._ctx, 1);
		case 5:
			return this.precpred(this._ctx, 5);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SqlBaseParser.prototype.primaryExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 6:
			return this.precpred(this._ctx, 5);
		case 7:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SqlBaseParser.prototype.type_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 8:
			return this.precpred(this._ctx, 6);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.SqlBaseParser = SqlBaseParser;
